{"version":3,"file":"static\\development\\pages\\ventasFac.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/components/ChipArray.js","webpack:///./components/components/ClippedDrawer.js","webpack:///./components/components/FullScreenDialog.js","webpack:///./components/components/Search.js","webpack:///./components/components/SectionContentFactura.js","webpack:///./components/components/SectionFactura.js","webpack:///./components/components/TableList.js","webpack:///./components/components/menus/ItemMenuHerramienta.js","webpack:///./components/components/menus/MenuHerramientas.js","webpack:///./components/components/productos/components/ControlVencimiento.js","webpack:///./components/components/productos/components/ListaProductos.js","webpack:///./components/components/productos/components/Proveedores.js","webpack:///./components/components/productos/components/Stock.js","webpack:///./components/components/session/ItemUser.js","webpack:///./components/components/session/Login.js","webpack:///./components/components/session/LoginContenedor.js","webpack:///./components/components/session/LoginUsuarios.js","webpack:///./components/components/tables/ReturnTextTable.js","webpack:///./components/components/tables/TableNomalToolbar.js","webpack:///./components/components/tables/TableNormal.js","webpack:///./components/components/tables/TableNormalHead.js","webpack:///./components/components/tileData.js","webpack:///./components/components/ventas/HistorialVentas_01.js","webpack:///./components/components/ventas/VentasDevueltas_01.js","webpack:///./components/components/ventas/Ventas_01.js","webpack:///./components/containers/Layout.js","webpack:///./components/modals_container/ModalCompraProductos.js","webpack:///./components/modals_container/ModalContainerNormal.js","webpack:///./components/modals_container/ModalNewCategoria.js","webpack:///./components/modals_container/ModalNewCliente.js","webpack:///./components/modals_container/ModalNewEditProveedor.js","webpack:///./components/modals_container/ModalNewProducto.js","webpack:///./components/modals_container/ModalSettingsPrices.js","webpack:///./components/modals_container/compra_productos/ModalPreguntarCaja.js","webpack:///./components/modals_container/compra_productos/ModalPreguntarCajaSalida.js","webpack:///./components/modals_container/ventas/ModalCancelarVenta.js","webpack:///./components/modals_container/ventas/ModalEditarVenta.js","webpack:///./components/modals_container/ventas/ModalFinalizaPago.js","webpack:///./components/plugins/AutoCompleteAdmin.js","webpack:///./components/plugins/AutoCompleteClientes-New.js","webpack:///./components/plugins/AutoCompleteClientes.js","webpack:///./components/plugins/AutoCompleteProveedores.js","webpack:///./components/plugins/AutoCompleteRetenciones.js","webpack:///./components/plugins/AutoCompleteSelectedProducto.js","webpack:///./components/plugins/ContainerSelectPrecios.js","webpack:///./components/plugins/EmitirFacturaModal.js","webpack:///./components/plugins/ModalNewVenta.js","webpack:///./components/plugins/ModalNewVentaJs.js","webpack:///./components/plugins/SnackBars.js","webpack:///./components/plugins/anadirVencimiento.js","webpack:///./components/plugins/deleteActivarDesactivar.js","webpack:///./components/plugins/nueva_venta.js","webpack:///./components/plugins/plantillas/container_plantillas.js","webpack:///./components/plugins/plantillas/resivo_venta.js","webpack:///./components/plugins/plugins/Dolar.js","webpack:///./components/plugins/plugins/ErrorEstado.js","webpack:///./components/plugins/plugins/ViewPDF.js","webpack:///./components/plugins/setSnackBars.js","webpack:///./components/plugins/table-vacia.js","webpack:///./components/plugins/ventas/ContenedorBotonesVenta.js","webpack:///./components/plugins/ventas/ContenedorClienteVista.js","webpack:///./components/plugins/ventas/ContenedorNumeroFactura.js","webpack:///./components/plugins/ventas/ContenedorPreciosTotalesVista.js","webpack:///./components/plugins/ventas/ContenedorProductoVista.js","webpack:///./components/plugins/ventas/ContenedorSeleccionarTipoPago.js","webpack:///./components/plugins/ventas/ContenedorSeleccionarTipoPrecio.js","webpack:///./components/theme/theme.js","webpack:///./pages/ventasFac.js","webpack:///./utils/colors.js","webpack:///./utils/funtions.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@material-ui/core\"","webpack:///external \"@material-ui/core/AppBar\"","webpack:///external \"@material-ui/core/Avatar\"","webpack:///external \"@material-ui/core/Button\"","webpack:///external \"@material-ui/core/ButtonBase\"","webpack:///external \"@material-ui/core/Checkbox\"","webpack:///external \"@material-ui/core/CircularProgress\"","webpack:///external \"@material-ui/core/Dialog\"","webpack:///external \"@material-ui/core/DialogActions\"","webpack:///external \"@material-ui/core/DialogContent\"","webpack:///external \"@material-ui/core/DialogContentText\"","webpack:///external \"@material-ui/core/DialogTitle\"","webpack:///external \"@material-ui/core/Divider\"","webpack:///external \"@material-ui/core/Drawer\"","webpack:///external \"@material-ui/core/Fade\"","webpack:///external \"@material-ui/core/FormControl\"","webpack:///external \"@material-ui/core/FormControlLabel\"","webpack:///external \"@material-ui/core/FormLabel\"","webpack:///external \"@material-ui/core/Grid\"","webpack:///external \"@material-ui/core/IconButton\"","webpack:///external \"@material-ui/core/Input\"","webpack:///external \"@material-ui/core/InputAdornment\"","webpack:///external \"@material-ui/core/InputLabel\"","webpack:///external \"@material-ui/core/List\"","webpack:///external \"@material-ui/core/ListItem\"","webpack:///external \"@material-ui/core/ListItemIcon\"","webpack:///external \"@material-ui/core/ListItemSecondaryAction\"","webpack:///external \"@material-ui/core/ListItemText\"","webpack:///external \"@material-ui/core/Menu\"","webpack:///external \"@material-ui/core/MenuItem\"","webpack:///external \"@material-ui/core/Paper\"","webpack:///external \"@material-ui/core/Popper\"","webpack:///external \"@material-ui/core/Radio\"","webpack:///external \"@material-ui/core/RadioGroup\"","webpack:///external \"@material-ui/core/Slide\"","webpack:///external \"@material-ui/core/Snackbar\"","webpack:///external \"@material-ui/core/SnackbarContent\"","webpack:///external \"@material-ui/core/Switch\"","webpack:///external \"@material-ui/core/Tab\"","webpack:///external \"@material-ui/core/Table\"","webpack:///external \"@material-ui/core/TableBody\"","webpack:///external \"@material-ui/core/TableCell\"","webpack:///external \"@material-ui/core/TableHead\"","webpack:///external \"@material-ui/core/TablePagination\"","webpack:///external \"@material-ui/core/TableRow\"","webpack:///external \"@material-ui/core/TableSortLabel\"","webpack:///external \"@material-ui/core/Tabs\"","webpack:///external \"@material-ui/core/TextField\"","webpack:///external \"@material-ui/core/Toolbar\"","webpack:///external \"@material-ui/core/Tooltip\"","webpack:///external \"@material-ui/core/Typography\"","webpack:///external \"@material-ui/core/colors/blue\"","webpack:///external \"@material-ui/core/colors/red\"","webpack:///external \"@material-ui/core/colors/teal\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"@material-ui/icons/AccountCircle\"","webpack:///external \"@material-ui/icons/Add\"","webpack:///external \"@material-ui/icons/AttachMoney\"","webpack:///external \"@material-ui/icons/Check\"","webpack:///external \"@material-ui/icons/CheckCircle\"","webpack:///external \"@material-ui/icons/ChevronLeft\"","webpack:///external \"@material-ui/icons/ChevronRight\"","webpack:///external \"@material-ui/icons/Clear\"","webpack:///external \"@material-ui/icons/Close\"","webpack:///external \"@material-ui/icons/CreditCard\"","webpack:///external \"@material-ui/icons/Delete\"","webpack:///external \"@material-ui/icons/Done\"","webpack:///external \"@material-ui/icons/DoneAll\"","webpack:///external \"@material-ui/icons/DonutSmall\"","webpack:///external \"@material-ui/icons/Drafts\"","webpack:///external \"@material-ui/icons/DriveEta\"","webpack:///external \"@material-ui/icons/Edit\"","webpack:///external \"@material-ui/icons/Error\"","webpack:///external \"@material-ui/icons/FileCopy\"","webpack:///external \"@material-ui/icons/Group\"","webpack:///external \"@material-ui/icons/History\"","webpack:///external \"@material-ui/icons/Home\"","webpack:///external \"@material-ui/icons/Info\"","webpack:///external \"@material-ui/icons/Input\"","webpack:///external \"@material-ui/icons/LocalAtm\"","webpack:///external \"@material-ui/icons/LocalPrintshop\"","webpack:///external \"@material-ui/icons/Mail\"","webpack:///external \"@material-ui/icons/MarkunreadMailbox\"","webpack:///external \"@material-ui/icons/Menu\"","webpack:///external \"@material-ui/icons/MonetizationOn\"","webpack:///external \"@material-ui/icons/Payment\"","webpack:///external \"@material-ui/icons/PictureAsPdf\"","webpack:///external \"@material-ui/icons/Remove\"","webpack:///external \"@material-ui/icons/Report\"","webpack:///external \"@material-ui/icons/Save\"","webpack:///external \"@material-ui/icons/Search\"","webpack:///external \"@material-ui/icons/Settings\"","webpack:///external \"@material-ui/icons/ShoppingBasket\"","webpack:///external \"@material-ui/icons/ShoppingCart\"","webpack:///external \"@material-ui/icons/Style\"","webpack:///external \"@material-ui/icons/Subtitles\"","webpack:///external \"@material-ui/icons/SupervisedUserCircle\"","webpack:///external \"@material-ui/icons/SwapHoriz\"","webpack:///external \"@material-ui/icons/TrendingUp\"","webpack:///external \"@material-ui/icons/Visibility\"","webpack:///external \"@material-ui/icons/VisibilityOff\"","webpack:///external \"@material-ui/icons/Warning\"","webpack:///external \"classnames\"","webpack:///external \"firebase/app\"","webpack:///external \"firebase/auth\"","webpack:///external \"firebase/database\"","webpack:///external \"firebase/firestore\"","webpack:///external \"next/head\"","webpack:///external \"next/link\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-dom\"","webpack:///external \"react-number-format\"","webpack:///external \"react-pdf-js\"","webpack:///external \"react-to-print\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React from 'react';\r\n\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n\r\nclass ChipsArray extends React.Component {\r\n    state = {\r\n        selectedValue: 'a',\r\n        value: 'todos',\r\n    };\r\n\r\n    handleDelete = data => () => {\r\n        if (data.label === 'React') {\r\n            alert('Why would you want to delete React?! :)'); // eslint-disable-line no-alert\r\n            return;\r\n        }\r\n\r\n        this.setState(state => {\r\n            const chipData = [...state.chipData];\r\n            const chipToDelete = chipData.indexOf(data);\r\n            chipData.splice(chipToDelete, 1);\r\n            return { chipData };\r\n        });\r\n    };\r\n\r\n    handleChange = event => {\r\n        this.setState({ value: event.target.value });\r\n        this.props.handleChangueList(event.target.value)\r\n    };\r\n    \r\n\r\n    render() {\r\n\r\n        return (\r\n            <div style={{\r\n                backgroundColor: '#E1F5FE',\r\n            }}>\r\n                <FormLabel\r\n                    style={{\r\n                        marginBottom: 10,\r\n                        paddingLeft: 23,\r\n                        paddingTop: 20,\r\n                    }}\r\n                    component=\"legend\"\r\n                >\r\n                    {this.props.title}\r\n                </FormLabel>\r\n\r\n                <div style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'start',\r\n                    flexWrap: 'wrap',\r\n\r\n                    backgroundColor: '#E1F5FE',\r\n                    paddingBottom: 10,\r\n                    paddingLeft: 23\r\n                }}>\r\n\r\n                    {\r\n                        this.props.data.length > 0 ?\r\n                            <RadioGroup\r\n                                aria-label=\"gender\"\r\n                                name=\"gender2\"\r\n                                value={this.state.value}\r\n                                onChange={this.handleChange}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    paddingLeft: 14,\r\n                                }}\r\n                            >\r\n                                <FormControlLabel\r\n                                    value=\"todos\"\r\n                                    control={<Radio color=\"secondary\" />}\r\n                                    label='Todos'\r\n                                    style={{\r\n                                        border: 'solid 1px rgba(0,0,0,0.4)',\r\n                                        borderRadius: 50,\r\n                                        paddingRight: 20,\r\n                                        marginRight: 25,\r\n                                        marginBottom: 10\r\n                                    }}\r\n                                />\r\n                                {this.props.data.map(data => {\r\n\r\n                                    return (\r\n                                        <FormControlLabel\r\n                                            key={data.key}\r\n                                            value={`${data.nombre}`}\r\n                                            control={<Radio color=\"secondary\" />}\r\n                                            label={`${data.nombre}`}\r\n                                            style={{\r\n                                                border: 'solid 1px rgba(0,0,0,0.4)',\r\n                                                borderRadius: 50,\r\n                                                paddingRight: 20,\r\n                                                marginRight: 25,\r\n                                                marginBottom: 10\r\n                                            }}\r\n                                        />\r\n                                    );\r\n                                })}\r\n\r\n                            </RadioGroup>\r\n                            :\r\n                            <div>\r\n                               \r\n                            </div>\r\n                    }\r\n\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ChipsArray\r\n","import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { mailFolderListItems, otherMailFolderListItems } from './tileData';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\n// firebase\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\n\r\n\r\nconst drawerWidth = 260;\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    zIndex: 1,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginLeft: 12,\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawerPaper: {\r\n    position: 'fixed',\r\n    height: '100vh',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing.unit * 7,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing.unit * 9,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    position: 'relative'\r\n  },\r\n});\r\n\r\n\r\n\r\nclass ClippedDrawer extends React.Component {\r\n\r\n  state = {\r\n    open: false,\r\n    anchorEl: null,\r\n  };\r\n\r\n  handleDrawerOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleDrawerClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  handleClick = event => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { anchorEl } = this.state;\r\n    const { classes, theme, user } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"fixed\"\r\n          className={classNames(classes.appBar, this.state.open && classes.appBarShift)}>\r\n          <Toolbar disableGutters={!this.state.open}>\r\n\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"Open drawer\"\r\n              onClick={this.handleDrawerOpen}\r\n              className={classNames(classes.menuButton, this.state.open && classes.hide)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n\r\n            <Typography variant=\"title\" color=\"inherit\" noWrap style={{ flex: 1 }}>\r\n              {this.props.title}\r\n            </Typography>\r\n\r\n\r\n\r\n            <ButtonBase onClick={this.handleClick} style={{ marginRight: 20 }}>\r\n              <Typography variant=\"subheading\" color=\"inherit\" noWrap style={{ marginRight: 10 }}>\r\n                {user.nombre}\r\n              </Typography>\r\n              <Avatar style={{ width: 40, height: 40, fontSize: 20 }}>{user ? user.nombre.toString().charAt(0) : 'none'}</Avatar>\r\n            </ButtonBase>\r\n\r\n            <Menu\r\n              id=\"simple-menu\"\r\n              anchorEl={anchorEl}\r\n              open={Boolean(anchorEl)}\r\n              onClose={this.handleClose}\r\n            >\r\n              {/* <MenuItem onClick={this.handleClose}>Perfil</MenuItem>\r\n              <MenuItem onClick={this.handleClose}>Configuración</MenuItem> */}\r\n              <MenuItem onClick={() => {\r\n                sessionStorage.removeItem(\"code-status-ser-section\");\r\n                this.props.closeSesion()\r\n              }}>Cerrar Sesión</MenuItem>\r\n            </Menu>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          classes={{\r\n            paper: classNames(classes.drawerPaper, !this.state.open && classes.drawerPaperClose),\r\n          }}\r\n          open={this.state.open}\r\n        >\r\n          <div className={classes.toolbar}>\r\n            <IconButton onClick={this.handleDrawerClose}>\r\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n            </IconButton>\r\n          </div>\r\n          {/* \r\n          <div style={{\r\n            marginTop: 64,\r\n            width: drawerWidth\r\n          }} /> */}\r\n          <Divider />\r\n          <List>{mailFolderListItems}</List>\r\n          <Divider />\r\n          <List>{otherMailFolderListItems}</List>\r\n        </Drawer>\r\n\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'row'\r\n          }}>\r\n            \r\n            <div style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              width: '95%',\r\n              height:'100%',\r\n              position:'fixed',\r\n              paddingLeft:'5%',\r\n            }}>\r\n              {this.props.children}\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nClippedDrawer.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(ClippedDrawer);\r\n","import React from 'react';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\n\r\nfunction Transition(props) {\r\n  return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass FullScreenDialog extends React.Component {\r\n  state = {\r\n    open: false,\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      open: this.props.openModal\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState({\r\n      open: props.openModal\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dialog\r\n          fullScreen\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n          TransitionComponent={Transition}\r\n        >\r\n          <div>\r\n            {\r\n              this.props.children\r\n            }\r\n          </div>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default FullScreenDialog\r\n","import React, { Component } from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchI from '@material-ui/icons/Search';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nclass Search extends Component {\r\n\r\n    state = {\r\n        amount: '',\r\n        buscar: '',\r\n        weight: '',\r\n        weightRange: '',\r\n        showPassword: false,\r\n\r\n        loading: 'llena',\r\n    };\r\n\r\n    handleChange = prop => event => {\r\n        this.setState({ [prop]: event.target.value });\r\n        this.props.handleSearch(event.target.value)\r\n    };\r\n\r\n    _onKeyPress = (event) => {\r\n        if (event.charCode === 13) { // enter key pressed\r\n            event.preventDefault();\r\n            this.props.handleSearch(this.state.buscar)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            loading: this.props.loading ? this.props.loading : 'llena'\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({\r\n            loading: this.props.loading ? this.props.loading : 'llena'\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                {\r\n                    this.state.loading === 'cargando' &&\r\n                    <CircularProgress size={25} style={{ marginLeft: '40%', position: 'absolute' }} />\r\n                }\r\n\r\n\r\n                <Tooltip title={`${this.props.textoTooltip}`} >\r\n                    <TextField\r\n                        id={this.props.id}\r\n                        style={{\r\n                            width: '100%',\r\n                        }}\r\n                        disabled={this.state.loading === 'cargando' ? true : false}\r\n                        variant=\"standard\"\r\n                        type='text'\r\n                        label={`${this.props.textoSearch}`}\r\n                        value={this.state.buscar}\r\n                        onChange={this.handleChange('buscar')}\r\n                        onKeyPress={this._onKeyPress}\r\n                        margin='none'\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment variant=\"filled\" position=\"end\">\r\n                                    {\r\n                                        this.state.buscar.length > 0 &&\r\n                                        <Tooltip title={`Click para borrar`}>\r\n                                            <IconButton\r\n                                                aria-label=\"Toggle clean\"\r\n                                                onClick={() => {\r\n                                                    this.setState({\r\n                                                        buscar: ''\r\n                                                    })\r\n                                                    this.props.handleSearch('')\r\n                                                }}\r\n                                            >\r\n                                                <Clear />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    }\r\n                                    <Tooltip title={`Click para buscar`}>\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle Search\"\r\n                                            onClick={() => this.props.handleSearch(this.state.buscar)}\r\n                                        >\r\n                                            <SearchI />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Tooltip>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Search from './Search';\r\nimport SimpleTable from './TableList';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../utils/funtions';\r\nimport AutoCompleteSelectedProducto from '../plugins/AutoCompleteSelectedProducto';\r\nimport TablaNormal from './tables/TableNormal';\r\nimport setSnackBars from '../plugins/setSnackBars';\r\n\r\n\r\n\r\n\r\nclass SectionContentFactura extends Component {\r\n\r\n\r\n    state = {\r\n        //nuevo\r\n        listaSeleccionados: [],\r\n        listaSeleccionadosValoresEditados: [],\r\n        rowslistaProductos: [\r\n            { id: 'acciones', numeric: true, disablePadding: false, label: 'Acciones' },\r\n            { id: 'cantidad', numeric: true, disablePadding: false, label: 'Cantidad' },\r\n            { id: 'descripcion_producto', numeric: true, disablePadding: false, label: 'Descripcion' },\r\n            { id: 'precio_costo', numeric: true, disablePadding: false, label: 'Precio/U' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n        ],\r\n        itemProductoCargado: null,\r\n        cargaAutomatica: false,\r\n\r\n        //sumas totales,\r\n        sumaTotal: '',\r\n        sumaTotalIva: '',\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/productos');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            arryList: [],\r\n                            arryListTemporal: [],\r\n                            estadoSearch: 'cargando'\r\n                        })\r\n                        var hhh = funtions.snapshotToArray(snapshot)\r\n                        this.setState({\r\n                            arryList: hhh,\r\n                            arryListTemporal: hhh,\r\n                            estadoSearch: 'llena'\r\n                        })\r\n                        this.setState({\r\n                            categorias: funtions.categorieToKey(funtions.repeatTo(funtions.inventarioToCategories(snapshot))),\r\n                            proveedores: funtions.categorieToKey(funtions.repeatTo(funtions.inventarioToProveedores(snapshot)))\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            arryList: [],\r\n                            arryListTemporal: [],\r\n                            categorias: [],\r\n                            proveedores: [],\r\n                            estadoSearch: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    /* \r\n        componentWillReceiveProps(props) {\r\n            if (props.productosSeleccionadosData.length > 0) {\r\n                //console.log(props.productosSeleccionadosData)\r\n                this.setProductosDesdeEditar(props.productosSeleccionadosData)\r\n            }\r\n        }\r\n    \r\n        setProductosDesdeEditar = array => {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    this.setState({\r\n                        cargaAutomatica:true\r\n                    })\r\n                    array.forEach(item => {\r\n                        var productosRef = db.ref('users/' + user.uid + \"/productos/\" + item.codigo);\r\n                        productosRef.on('value', (snapshot) => {\r\n                            if (snapshot.val()) {\r\n                                //console.log(funtions.snapshotToArray(snapshot))\r\n                                var it=snapshot.val()\r\n                                var itKey=snapshot.key\r\n                                it.id=itKey\r\n                                console.log(it)\r\n                                this.onChangueSelectedProducto(it)\r\n                            }\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        } */\r\n\r\n    calcularValorTotal = () => {\r\n        var sumatotalConIVA = 0\r\n        var sumatotal = 0\r\n        var sumatotalProductosSinIva = 0\r\n        var sumatotalProductosConIva = 0\r\n        this.state.listaSeleccionadosValoresEditados.forEach(item => {\r\n            var stock = this.state.listaSeleccionadosValoresEditados.filter(it => it.codigo === item.codigo)[0].cantidad\r\n            var precio = this.state.listaSeleccionadosValoresEditados.filter(it => it.codigo === item.codigo)[0].precio_venta_a\r\n\r\n            var precioIva = 0\r\n            if (item.tiene_iva === true) {\r\n                precioIva = (precio * Number(item.porcentaje_iva)) / 100\r\n                sumatotalProductosConIva += Number(precio) * Number(item.cantidad)\r\n            } else {\r\n                precioIva = 0\r\n                sumatotalProductosSinIva += Number(precio) * Number(item.cantidad)\r\n            }\r\n\r\n            sumatotalConIVA = sumatotalConIVA + (Number(stock) * Number(precioIva))\r\n            sumatotal = sumatotal + (Number(stock) * Number(precio))\r\n        })\r\n        this.props.handleSumaTotal((sumatotal + sumatotalConIVA).toFixed(2))\r\n        this.props.handleSumaTotalIva(sumatotalConIVA.toFixed(2))\r\n        this.props.handleSubTotal(sumatotal.toFixed(2))\r\n        this.props.handlePrecioPrductosSinIva(sumatotalProductosSinIva.toFixed(2))\r\n        this.props.handlePrecioPrductosConIva(sumatotalProductosConIva.toFixed(2))\r\n        this.props.productosSeleccionados(this.state.listaSeleccionadosValoresEditados)\r\n    }\r\n\r\n\r\n    nuevaVenta = () => {\r\n        this.setState({\r\n            listaSeleccionados: [],\r\n            listaSeleccionadosValoresEditados: [],\r\n            itemProductoCargado: null,\r\n            sumaTotal: 0,\r\n            sumaTotalIva: 0,\r\n        })\r\n        this.props.handleSumaTotal(0.00)\r\n        this.props.handleSumaTotalIva(0.00)\r\n        this.props.handleSubTotal(0.00)\r\n        this.props.productosSeleccionados([])\r\n    }\r\n\r\n    getNumeroStockActual = (item) => {\r\n        var restaStock = Number(item.stock_actual) - Number(this.state.listaSeleccionadosValoresEditados.filter(item2 => item2.codigo === item.codigo)[0].cantidad)\r\n        return restaStock\r\n    }\r\n\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n        if (item.id === 'cantidad') {\r\n\r\n            var restaRetorno = <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row' }}>\r\n                <TextField\r\n                    id=\"handle-precio-edit-cantidad\"\r\n                    margin=\"dense\"\r\n                    type=\"number\"\r\n                    value={this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].cantidad}\r\n                    onChange={event => {\r\n                        var array = this.state.listaSeleccionadosValoresEditados\r\n                        array.filter(item => n.codigo === item.codigo)[0].cantidad = event.target.value\r\n                        this.setState({\r\n                            listaSeleccionadosValoresEditados: array\r\n                        })\r\n                        this.calcularValorTotal()\r\n                    }}\r\n                    placeholder='00'\r\n                    style={{ width: 50 }}\r\n                />\r\n                <div style={{ width: 'max-content', display: 'flex', alignItems: 'center', justifyContent: 'start', paddingLeft: 10 }}>\r\n                    {`en stock ${Number(n.stock_actual) - Number(this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].cantidad)}`}\r\n                </div>\r\n            </div>\r\n\r\n            return restaRetorno\r\n        }\r\n        if (item.id === 'descripcion_producto') {\r\n            return n.descripcion_producto\r\n        }\r\n        if (item.id === 'precio_costo') {\r\n            return n.precio_venta_a\r\n        }\r\n        if (item.id === 'total') {\r\n            var itemValor = this.state.listaSeleccionadosValoresEditados.filter(item => item.codigo === n.codigo)[0]\r\n            var sumaTotal = itemValor.cantidad * n.precio_venta_a\r\n            return sumaTotal.toFixed(2)\r\n        }\r\n        if (item.id === 'acciones') {\r\n            return <Button variant=\"fab\" mini color=\"default\" aria-label=\"quit\" onClick={() => {\r\n                const arraySeleccionados = this.state.listaSeleccionados\r\n                const arraySeleccionadosEditados = this.state.listaSeleccionadosValoresEditados\r\n                var contador1 = 0\r\n                var contador2 = 0\r\n                arraySeleccionados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionados.splice(contador1, 1);\r\n                        this.setState({ listaSeleccionados: arraySeleccionados })\r\n                    }\r\n                    contador1++\r\n                })\r\n                arraySeleccionadosEditados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionadosEditados.splice(contador2, 1);\r\n                        this.setState({ listaSeleccionadosValoresEditados: arraySeleccionadosEditados })\r\n                    }\r\n                    contador2++\r\n                })\r\n                this.calcularValorTotal()\r\n            }}>\r\n                <CloseIcon />\r\n            </Button>\r\n        }\r\n\r\n    }\r\n\r\n    onChangueSelectedProducto = item => {\r\n        var array = this.state.listaSeleccionados\r\n        var arrayValoresSelecionados = this.state.listaSeleccionadosValoresEditados\r\n        var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n\r\n\r\n        if (this.state.cargaAutomatica === false) {\r\n            this.setState({\r\n                itemProductoCargado: item\r\n            })\r\n        } else {\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vacío', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                    })\r\n                    this.setState({\r\n                        itemProductoCargado: null\r\n                    })\r\n                }\r\n                this.calcularValorTotal()\r\n            }\r\n        }\r\n        this.setState({\r\n            listaSeleccionados: array,\r\n            listaSeleccionadosValoresEditados: arrayValoresSelecionados,\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    setItemToSeleccionados = (item) => {\r\n        if (this.state.itemProductoCargado != null) {\r\n            var array = this.state.listaSeleccionados\r\n            var arrayValoresSelecionados = this.state.listaSeleccionadosValoresEditados\r\n            var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vacío', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                    })\r\n                    this.setState({\r\n                        listaSeleccionados: array,\r\n                        listaSeleccionadosValoresEditados: arrayValoresSelecionados,\r\n                    })\r\n\r\n                    this.setState({\r\n                        itemProductoCargado: null\r\n                    })\r\n                }\r\n            }\r\n            this.calcularValorTotal()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleText: {\r\n                width: '100%'\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Grid container >\r\n                    <Grid item xs={6} style={{ background: 'rgba(222, 239, 255)', paddingLeft: 16, paddingRight: 16 }}>\r\n                        <TextField\r\n                            id=\"filled-tipo-venta\"\r\n                            select\r\n                            label=\"Tipo de venta\"\r\n                            error={this.props.tipo_venta.length > 0 ? false : true}\r\n                            value={this.props.tipo_venta}\r\n                            onChange={event => this.props.handleTipoVenta(event.target.value)}\r\n                            margin=\"normal\"\r\n                            variant=\"outlined\"\r\n                            style={styles.styleText}\r\n                        >\r\n                            <MenuItem value={'factura'}>Factura</MenuItem>\r\n                            <MenuItem value={'final'}>Consumidor Final</MenuItem>\r\n                        </TextField>\r\n\r\n                        <AutoCompleteSelectedProducto\r\n                            styleText={styles.styleText}\r\n                            onChangue={this.onChangueSelectedProducto}\r\n                        >\r\n                        </AutoCompleteSelectedProducto>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ background: '#a0ffbe' }}>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            marginTop: 16,\r\n                            marginLeft: 16,\r\n                            marginRight: 16\r\n                        }}>\r\n                            <Typography variant=\"title\" gutterBottom>\r\n                                {this.state.itemProductoCargado ? this.state.itemProductoCargado.descripcion_producto : 'Nombre de producto'}\r\n                            </Typography>\r\n                            <div style={{ flex: 1 }} />\r\n                            <Typography variant=\"subheading\" gutterBottom >\r\n                                {this.state.itemProductoCargado ? this.state.itemProductoCargado.codigo : 'Codigo'}\r\n                            </Typography>\r\n                        </div>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            marginBottom: 16,\r\n                            marginLeft: 16,\r\n                            marginRight: 16,\r\n                        }}>\r\n                            <Typography variant=\"subheading\" gutterBottom>\r\n                                {this.state.itemProductoCargado ? '$ ' + this.state.itemProductoCargado.precio_venta_a : 'Precio'}\r\n                            </Typography>\r\n                            <div style={{ flex: 1 }} />\r\n                            <Typography variant=\"subheading\" gutterBottom>\r\n                                {this.state.itemProductoCargado ? 'cantidad: ' + this.state.itemProductoCargado.stock_actual : 'Stock Actual'}\r\n                            </Typography>\r\n                        </div>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            paddingBottom: 16,\r\n                            paddingTop: 16,\r\n                            paddingLeft: 16,\r\n                            paddingRight: 16,\r\n                            background: '#33ffa2',\r\n                            height: 30\r\n                        }}>\r\n                            <div style={{ flex: 1 }} />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={this.state.cargaAutomatica}\r\n                                        onChange={() => this.setState({ cargaAutomatica: !this.state.cargaAutomatica })}\r\n                                    />}\r\n                                label=\"Carga Automática\"\r\n                            />\r\n                            <Button variant=\"contained\" size=\"small\" color=\"default\" onClick={() => {\r\n                                this.setItemToSeleccionados(this.state.itemProductoCargado)\r\n                            }}>\r\n                                Agregar\r\n                            </Button>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container >\r\n                    <Grid item xs={12} >\r\n                        <Divider />\r\n                        <TablaNormal\r\n                            textoTitleP=\"Productos\"\r\n                            textoTitleS=\"Producto\"\r\n                            selectedItems={true}\r\n                            toolbar={false}\r\n                            data={this.state.listaSeleccionados}\r\n                            rows={this.state.rowslistaProductos}\r\n                            handleGetData={this.handleGetData}\r\n                            estadoTabla={this.state.listaSeleccionados.length > 0 ? 'llena' : 'vacio'}\r\n                            itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionContentFactura;","import React, { Component } from 'react';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AutoCompleteClientes from '../plugins/AutoCompleteClientes';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport AutoCompleteCliente from '../plugins/AutoCompleteClientes-New';\r\n\r\n\r\nclass SectionFactura extends Component {\r\n\r\n    state = {\r\n        clienteFacturacion: '',\r\n        clienteSeleccionado: null,\r\n\r\n    }\r\n\r\n    nuevaVenta = () => {\r\n        this.setState({\r\n            clienteFacturacion: '',\r\n            clienteSeleccionado: null,\r\n        })\r\n        this.props.handleDescontar(0)\r\n        this.props.handleDineroResibido(0)\r\n    }\r\n\r\n    getClienteDataBase = (codigo) => {\r\n        if (codigo) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    if (this.state.clienteFacturacion.length > 0) {\r\n                        var db = firebase.database();\r\n                        var productosRef = db.ref('users/' + user.uid + \"/clientes/\" + codigo);\r\n                        productosRef.on('value', (snapshot) => {\r\n                            if (snapshot.val()) {\r\n                                this.setState({\r\n                                    clienteSeleccionado: snapshot.val()\r\n                                })\r\n                            } else {\r\n                                this.setState({\r\n                                    clienteSeleccionado: null\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onChangueSelectedCliente = (item) => {\r\n        this.setState({ clienteFacturacion: item.codigo })\r\n        this.getClienteDataBase(item.codigo)\r\n        this.props.handleCliente(item.codigo)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            textFields: {\r\n                marginRight: 16,\r\n                marginLeft: 16,\r\n                width: '90%'\r\n            },\r\n            styleClientes: {\r\n                width: '100%',\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Paper style={{ height: '100%', position: 'fixed' }}>\r\n                <div style={{ display: this.props.tipo_venta === 'final' ? 'none' : 'block' }}>\r\n\r\n                    <Typography variant=\"title\" style={{ paddingTop: 16, paddingLeft: 16 }}>\r\n                        {this.state.clienteSeleccionado ? this.state.clienteSeleccionado.nombre : 'Nombre del cliente'}\r\n                    </Typography>\r\n                    <Typography variant=\"subheading\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                        {this.state.clienteSeleccionado ? this.state.clienteSeleccionado.numero_identificacion : 'Identificación'}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" style={{ paddingTop: 15, paddingLeft: 16 }}>\r\n                        {this.state.clienteSeleccionado ? this.state.clienteSeleccionado.email : 'Email'}\r\n                    </Typography>\r\n                    <Typography variant=\"caption\" style={{ paddingTop: 2, paddingLeft: 16 }}>\r\n                        {this.state.clienteSeleccionado ? `${this.state.clienteSeleccionado.telefono} / ${this.state.clienteSeleccionado.celular}` : 'Teléfono/Celular'}\r\n                    </Typography>\r\n\r\n                    <div style={{ paddingLeft: 16, paddingRight: 16 }}>\r\n                        <AutoCompleteCliente\r\n                            styleText={styles.styleClientes}\r\n                            dataRef=\"clientes\"\r\n                            dataRefObject=\"cliente\"\r\n                            error={this.state.clienteFacturacion.length>0?false:true}\r\n                            onChangue={(item) => this.onChangueSelectedCliente(item)}\r\n                            usuario={this.props.usuario}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <Divider style={{ marginTop: 15, marginBottom: 15 }} />\r\n\r\n                <TextField\r\n                    id=\"outlined-multiline-static-comentario\"\r\n                    label=\"Descuento\"\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    style={styles.textFields}\r\n                    value={this.props.descuento}\r\n                    onChange={e => {\r\n                        this.props.handleDescontar(e.target.value)\r\n                    }}\r\n                    autoComplete='off'\r\n                />\r\n\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Typography variant=\"body2\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                        SubTotal\r\n                    </Typography>\r\n                    <div style={{ flex: 1 }}></div>\r\n                    <Typography variant=\"body2\" style={{ paddingTop: 5, paddingRight: 16 }}>\r\n                        {Number(this.props.sumaSubTotal).toFixed(2)}\r\n                    </Typography>\r\n                </div>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Typography variant=\"body2\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                        Iva\r\n                    </Typography>\r\n                    <div style={{ flex: 1 }}></div>\r\n                    <Typography variant=\"body2\" style={{ paddingTop: 5, paddingRight: 16 }}>\r\n                        {Number(this.props.sumaIva).toFixed(2)}\r\n                    </Typography>\r\n                </div>\r\n                <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Typography variant=\"body2\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                        Total\r\n                    </Typography>\r\n                    <div style={{ flex: 1 }}></div>\r\n                    <Typography variant=\"body2\" style={{ paddingTop: 5, paddingRight: 16 }}>\r\n                        {(Number(this.props.sumaTotal)).toFixed(2)}\r\n                    </Typography>\r\n                </div>\r\n\r\n                <TextField\r\n                    id=\"outlined-multiline-static-comentario\"\r\n                    label=\"Comentario\"\r\n                    multiline\r\n                    rows=\"2\"\r\n                    variant=\"outlined\"\r\n                    margin=\"dense\"\r\n                    style={styles.textFields}\r\n                    value={this.props.observacion}\r\n                    onChange={e => {\r\n                        this.props.handleObservacion(e.target.value)\r\n                    }}\r\n                    autoComplete='off'\r\n                />\r\n\r\n                <Divider style={{ marginTop: 15, marginBottom: 15 }} />\r\n\r\n                <Grid container variant=\"permanent\" spacing={20} style={{ width: '95%' }}>\r\n                    <Grid item xs={6} >\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Dinero resivido\"\r\n                            margin=\"dense\"\r\n                            variant=\"outlined\"\r\n                            style={styles.textFields}\r\n                            value={this.props.dinero_resibido}\r\n                            error={this.props.dinero_resibido.length > 0 ? false : true}\r\n                            onChange={e => {\r\n                                this.props.handleDineroResibido(e.target.value)\r\n                            }}\r\n                            autoComplete='off'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6} >\r\n                        <TextField\r\n                            id=\"outlined-vuelto\"\r\n                            label=\"Cambio\"\r\n                            margin=\"dense\"\r\n                            variant=\"outlined\"\r\n                            style={styles.textFields}\r\n                            autoComplete='off'\r\n                            value={this.props.cambio}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container variant=\"permanent\" spacing={20} style={{ width: '95%', paddingLeft: 16 }}>\r\n                    <div style={{ display: this.props.tipo_venta === 'final' ? 'none' : 'block' }}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={this.props.facturaElectronica}\r\n                                    onChange={() => this.props.handleFacturaElectronica()}\r\n                                />}\r\n                            label=\"Factura Electrónica\"\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Divider style={{ marginTop: 15, marginBottom: 15 }} />\r\n\r\n                <Grid container\r\n                    variant=\"permanent\" spacing={20} style={styles.textFields}>\r\n                    <Grid item xs={6} style={{ padding: 5 }}>\r\n                        <Button variant=\"contained\" size=\"small\" color=\"primary\" style={{ width: '100%' }} onClick={this.props.handleFinalizarVenta}>\r\n                            Aceptar\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ padding: 5 }}>\r\n                        <Button variant=\"contained\" size=\"small\" color=\"secondary\" style={{ width: '100%' }} onClick={()=>{\r\n                            this.props.handleClose()\r\n                        }}>\r\n                            Cancelar\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SectionFactura;","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Add from '@material-ui/icons/Add';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TablaVacia from '../plugins/table-vacia';\r\n\r\nfunction desc(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction stableSort(array, cmp) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nfunction getSorting(order, orderBy) {\r\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\r\n}\r\n\r\n\r\nclass EnhancedTableHead extends React.Component {\r\n\r\n    createSortHandler = property => event => {\r\n        this.props.onRequestSort(event, property);\r\n    };\r\n\r\n    render() {\r\n        const { onSelectAllClick, order, orderBy, numSelected, rowCount, rows, actionsNot } = this.props;\r\n\r\n        return (\r\n            <TableHead>\r\n                <TableRow>\r\n                    {\r\n                        !actionsNot&&\r\n                        <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                            checked={numSelected === rowCount}\r\n                            onChange={onSelectAllClick}\r\n                        />\r\n                    </TableCell>\r\n                    }\r\n                    \r\n                    {rows.map(row => {\r\n                        return (\r\n                            <TableCell\r\n                                key={row.id}\r\n                                numeric={row.numeric}\r\n                                padding={row.disablePadding ? 'none' : 'default'}\r\n                                sortDirection={orderBy === row.id ? order : false}\r\n                            >\r\n                                <Tooltip\r\n                                    title=\"Ordenar Por\"\r\n                                    placement={row.numeric ? 'bottom-end' : 'bottom-start'}\r\n                                    enterDelay={300}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={orderBy === row.id}\r\n                                        direction={order}\r\n                                        onClick={this.createSortHandler(row.id)}\r\n                                    >\r\n                                        {row.label}\r\n                                    </TableSortLabel>\r\n                                </Tooltip>\r\n                            </TableCell>\r\n                        );\r\n                    }, this)}\r\n                </TableRow>\r\n            </TableHead>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet EnhancedTableToolbar = props => {\r\n    const {\r\n        numSelected,\r\n        textoTitleP,\r\n        textoTitleS,\r\n        handleClickOpen,\r\n        selected,\r\n        handleDeleteItems,\r\n        deleteSelectedItems,\r\n        handleEditItem,\r\n        actionsNot\r\n    } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                backgroundColor: '#E1F5FE'\r\n            }}>\r\n\r\n                <Toolbar>\r\n                    <Typography variant=\"title\" style={{ width: '70%' }} id=\"tableTitle\" >\r\n                        {numSelected === 0 ? `Lista de ${textoTitleP}` : numSelected > 1 ? `${numSelected}  ${textoTitleP} Seleccionados ` : `${numSelected}  ${textoTitleS} Seleccionado`}\r\n                    </Typography>\r\n\r\n                    <div style={{\r\n                        flex: '1 1 100%',\r\n                    }} />\r\n\r\n                    {\r\n                        !actionsNot &&\r\n                        <div style={\r\n                            {\r\n                                color: 'white',\r\n                                display: 'flex',\r\n                                flexDirection: 'row'\r\n                            }\r\n                        }>\r\n\r\n                            <Tooltip title={`Nuevo ${textoTitleS}`}>\r\n                                <IconButton\r\n                                    disabled={numSelected === 0 ? false : true}\r\n                                    aria-label=\"Nuevo\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClickOpen}\r\n                                >\r\n                                    <Add />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"Editar  Producto\">\r\n                                <IconButton\r\n                                    disabled={numSelected === 1 ? false : true}\r\n                                    color=\"secondary\"\r\n                                    aria-label=\"Editar\"\r\n                                    onClick={() => {\r\n                                        handleEditItem(selected[0])\r\n                                    }}>\r\n                                    <EditIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"Eliminar Producto\">\r\n                                <IconButton\r\n                                    disabled={numSelected > 0 ? false : true}\r\n                                    aria-label=\"Eliminar\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                        deleteSelectedItems()\r\n                                        handleDeleteItems(selected)\r\n                                    }}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        </div>\r\n                    }\r\n                </Toolbar>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar = EnhancedTableToolbar\r\n\r\nclass EnhancedTable extends React.Component {\r\n    state = {\r\n        order: 'asc',\r\n        orderBy: 'nombre',\r\n        selected: [],\r\n        data: [],\r\n        page: 0,\r\n        rowsPerPage: 15\r\n    };\r\n\r\n    deleteSelectedItems = () => {\r\n        this.setState({\r\n            selected: []\r\n        })\r\n    }\r\n\r\n    handleRequestSort = (event, property) => {\r\n        const orderBy = property;\r\n        let order = 'desc';\r\n\r\n        if (this.state.orderBy === property && this.state.order === 'desc') {\r\n            order = 'asc';\r\n        }\r\n\r\n        this.setState({ order, orderBy });\r\n    };\r\n\r\n    handleSelectAllClick = event => {\r\n        if (event.target.checked) {\r\n            this.setState(state => ({ selected: state.data.map(n => n.id) }));\r\n            return;\r\n        }\r\n        this.setState({ selected: [] });\r\n    };\r\n\r\n    handleClick = (event, id) => {\r\n        const { selected } = this.state;\r\n        const selectedIndex = selected.indexOf(id);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n        this.setState({ selected: newSelected });\r\n    };\r\n\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = event => {\r\n        this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    isSelected = id => this.state.selected.indexOf(id) !== -1;\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            data: this.props.data,\r\n            estadoTabla: this.props.estadoTabla\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({\r\n            data: props.data,\r\n            estadoTabla: props.estadoTabla\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\r\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\r\n\r\n        return (\r\n            <div style={{\r\n                width: '100%'\r\n            }}>\r\n\r\n                <EnhancedTableToolbar\r\n                    numSelected={selected.length}\r\n                    textoTitleP={this.props.textoTitleP}\r\n                    textoTitleS={this.props.textoTitleS}\r\n                    handleClickOpen={this.props.handleClickOpen}\r\n                    selected={this.state.selected}\r\n                    deleteSelectedItems={this.deleteSelectedItems}\r\n                    handleDeleteItems={this.props.handleDeleteItems}\r\n                    handleEditItem={this.props.handleEditItem}\r\n                    actionsNot={this.props.actionsNot ? true : false}\r\n                />\r\n\r\n                {\r\n                    this.state.estadoTabla === 'vacio' &&\r\n                    <TablaVacia\r\n                        title={`Aún no hay ${this.props.textoTitleP}`}\r\n                        titleButton={`AGREGAR ${this.props.textoTitleS}`}\r\n                        handleClickOpen={this.props.handleClickOpen}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    this.state.estadoTabla === 'llena' &&\r\n                    <div>\r\n                        <div style={{\r\n                            overflowX: 'auto'\r\n                        }}>\r\n                            <Table aria-labelledby=\"tableTitle\">\r\n                                <EnhancedTableHead\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={this.handleSelectAllClick}\r\n                                    onRequestSort={this.handleRequestSort}\r\n                                    rowCount={data.length}\r\n                                    rows={this.props.rows}\r\n                                    actionsNot={this.props.actionsNot ? true : false}\r\n                                />\r\n                                <TableBody>\r\n                                    {stableSort(data, getSorting(order, orderBy))\r\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                        .map(n => {\r\n                                            const isSelected = this.isSelected(n.id);\r\n                                            return (\r\n                                                <TableRow\r\n                                                    hover\r\n                                                   // onClick={event => this.handleClick(event, n.id)}\r\n                                                    role=\"checkbox\"\r\n                                                    aria-checked={isSelected}\r\n                                                    tabIndex={-1}\r\n                                                    key={n.id}\r\n                                                    selected={isSelected}\r\n                                                >\r\n                                                    {\r\n                                                        !this.props.actionsNot &&\r\n                                                        <TableCell padding=\"checkbox\">\r\n                                                            <Tooltip title=\"Seleccionar\">\r\n                                                                <Checkbox checked={isSelected} />\r\n                                                            </Tooltip>\r\n                                                        </TableCell>\r\n                                                    }\r\n\r\n                                                    {\r\n                                                        this.props.rows.map((item) => {\r\n                                                            return <TableCell key={item.id} numeric>{this.props.handleGetData(n, item)}</TableCell>\r\n                                                        })\r\n                                                    }\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                    {emptyRows > 0 && (\r\n                                        <TableRow style={{ height: 49 * emptyRows }}>\r\n                                            <TableCell colSpan={6} />\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </div>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={data.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            labelRowsPerPage=\"Número de filas\"\r\n                            labelDisplayedRows={({ from, to, count }) => `${from}-${to} de ${count}`}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n                        />\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoTabla === 'cargando' &&\r\n                    <div style={{\r\n                        width: '100%',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        padding: 30,\r\n                        flexGrow: 1,\r\n                    }}>\r\n                        <CircularProgress size={40} />\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoTabla === 'sin_resultados' &&\r\n                    <div style={{\r\n                        width: '100%',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        padding: 30,\r\n                        flexGrow: 1,\r\n                    }}>\r\n                        <Typography variant=\"subheading\" >\r\n                            No existen Resultados\r\n                            </Typography>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnhancedTable\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ItemMenuHerramienta extends Component {\r\n    render() {\r\n        const { titleButton, color, visible, onClick, disabled } = this.props\r\n        return (\r\n            <Grid item >\r\n                {\r\n                    visible &&\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color={color} onClick={onClick}\r\n                        disabled={disabled}\r\n                    >\r\n                        <div style={{ marginRight: 8, display: 'flex', alignItems: 'center' }}>\r\n                            {\r\n                                this.props.children\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                titleButton\r\n                            }\r\n                        </div>\r\n                    </Button>\r\n                }\r\n\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemMenuHerramienta;","import React, { Component, Children } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass MenuHerramientas extends Component {\r\n    render() {\r\n        const { children } = this.props\r\n        return (\r\n            <Grid container spacing={16} style={{ marginLeft: 16, marginRight: 16, marginTop: 5, marginBottom: 5 }}>\r\n                {\r\n                    children\r\n                }\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuHerramientas;","import React, { Component } from 'react';\r\nimport MenuHerramientas from '../../menus/MenuHerramientas'\r\nimport ItemMenuHerramienta from '../../menus/ItemMenuHerramienta'\r\nimport TablaNormal from '../../tables/TableNormal'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nclass ControlVencimiento extends Component {\r\n\r\n    state={\r\n        listaStock:[\r\n            {\r\n                cantidad: '175',\r\n                categoria: 'Filtros',\r\n                codigo: '2781927897189',\r\n                id: '2781927897189',\r\n                iva: '13',\r\n                nombre: 'filtros',\r\n                precio_mayor: '17,56',\r\n                precio_menor: '16',\r\n                proveedor: 'BtaApps'\r\n            },\r\n            {\r\n                cantidad: '175',\r\n                categoria: 'Filtros',\r\n                codigo: '5435345345',\r\n                id: '5435345345',\r\n                iva: '13',\r\n                nombre: 'filtros',\r\n                precio_mayor: '17,56',\r\n                precio_menor: '16',\r\n                proveedor: 'BtaApps'\r\n            },\r\n            {\r\n                cantidad: '175',\r\n                categoria: 'Filtros',\r\n                codigo: '34534632',\r\n                id: '34534632',\r\n                iva: '13',\r\n                nombre: 'filtros',\r\n                precio_mayor: '17,56',\r\n                precio_menor: '16',\r\n                proveedor: 'BtaApps'\r\n            }\r\n        ],\r\n        rowslistaStock: [\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'nombre', numeric: true, disablePadding: false, label: 'Nombre' },\r\n            { id: 'precio_mayor', numeric: true, disablePadding: false, label: 'Precio Mayor' },\r\n            { id: 'precio_menor', numeric: true, disablePadding: false, label: 'Precio Menor' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'cantidad', numeric: true, disablePadding: false, label: 'Cantidad' }\r\n        ],\r\n        estadoTabla:'llena'\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n        if (item.id === 'nombre') {\r\n            return n.nombre\r\n        }\r\n        if (item.id === 'precio_mayor') {\r\n            return n.precio_mayor\r\n        }\r\n        if (item.id === 'precio_menor') {\r\n            return n.precio_menor\r\n        }\r\n        if (item.id === 'iva') {\r\n            return n.iva\r\n        }\r\n        if (item.id === 'cantidad') {\r\n            return n.cantidad\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                Éstá en desarrollo\r\n                {/* <MenuHerramientas>\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Button\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        onClick={() => console.log(\"Hola\")}\r\n                    />\r\n                </MenuHerramientas>\r\n\r\n                <Divider />\r\n\r\n                <TablaNormal\r\n                    textoTitleP=\"Productos\"\r\n                    textoTitleS=\"Producto\"\r\n\r\n                    selectedItems={false}\r\n                    toolbar={false}\r\n\r\n                    data={this.state.listaStock}\r\n                    rows={this.state.rowslistaStock}\r\n                    handleGetData={this.handleGetData}\r\n                    estadoTabla={this.state.estadoTabla}\r\n                /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlVencimiento;","import React, { Component } from 'react';\r\nimport MenuHerramientas from '../../../../components/components/menus/MenuHerramientas'\r\nimport ItemMenuHerramienta from '../../../../components/components/menus/ItemMenuHerramienta'\r\nimport TablaNormal from '../../tables/TableNormal'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../../../utils/funtions';\r\nimport colors from '../../../../utils/colors';\r\n\r\n//dialogs\r\nimport FullScreenDialog from '../../../../components/components/FullScreenDialog';\r\nimport ModalNewProducto from '../../../../components/modals_container/ModalNewProducto';\r\nimport ModalContainerNormal from '../../../modals_container/ModalContainerNormal';\r\nimport DeleteActivarDesactivar from '../../../plugins/deleteActivarDesactivar';\r\nimport ReturnTextTable from '../../tables/ReturnTextTable';\r\nimport setSnackBars from '../../../plugins/setSnackBars';\r\nimport AnadirVencimiento from '../../../plugins/anadirVencimiento';\r\n\r\nimport Search from '../../Search';\r\nimport { Chip } from '@material-ui/core';\r\nimport Dolar from '../../../plugins/plugins/Dolar'\r\n\r\nclass ListaProductos extends Component {\r\n\r\n    state = {\r\n        //lista de los pruductos\r\n        listaProductos: [],\r\n        //lista de los pruductos temporales\r\n        listaProductosTemporal: [],\r\n        //columnas de la tabla de productos\r\n        rowsListaProductos: [\r\n            { id: 'acciones', numeric: false, disablePadding: true, label: '' },\r\n            { id: 'descripcion_producto', numeric: true, disablePadding: false, label: 'Descripcion' },\r\n            { id: 'codigo_barras', numeric: true, disablePadding: false, label: 'C. Barras' },\r\n            { id: 'codigo_referencia', numeric: true, disablePadding: false, label: 'C. Referencia' },\r\n            { id: 'stock_actual', numeric: true, disablePadding: false, label: 'Stock Actual' },\r\n\r\n            { id: 'precio_costo', numeric: true, disablePadding: false, label: 'Precio Costo' },\r\n            { id: 'tiene_iva', numeric: true, disablePadding: false, label: 'Tiene Iva' },\r\n\r\n            { id: 'categoria_producto', numeric: true, disablePadding: false, label: 'Categoria' },\r\n            { id: 'proveedor', numeric: true, disablePadding: false, label: 'Proveedor' },\r\n            { id: 'marca_producto', numeric: true, disablePadding: false, label: 'Marca' },\r\n            { id: 'porcentaje_iva', numeric: true, disablePadding: false, label: 'Iva (%)' },\r\n            { id: 'localizacion_producto', numeric: true, disablePadding: false, label: 'Localización' },\r\n            { id: 'numero_ventas', numeric: true, disablePadding: false, label: 'Numero de ventas' },\r\n            { id: 'unidad_medida', numeric: true, disablePadding: false, label: 'Unidad de medida' },\r\n            { id: 'producto_fraccionado', numeric: true, disablePadding: false, label: 'Fraccionado' },\r\n\r\n            { id: 'stock_minimo', numeric: true, disablePadding: false, label: 'Stock Minimo' },\r\n            { id: 'stock_maximo', numeric: true, disablePadding: false, label: 'Stock Maximo' },\r\n\r\n            { id: 'fecha_vencimiento', numeric: true, disablePadding: false, label: 'Fecha vencimiento' },\r\n            { id: 'fecha_registro', numeric: true, disablePadding: false, label: 'Fecha registro' },\r\n            { id: 'hora_registro', numeric: true, disablePadding: false, label: 'Hora registro' },\r\n\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n\r\n            { id: 'estado', numeric: true, disablePadding: false, label: 'Estado' },\r\n            { id: 'usuario', numeric: true, disablePadding: false, label: 'Usuario' },\r\n        ],\r\n        //estado de la tabla\r\n        estadoTabla: 'cargando',\r\n        //Estado del modal fullScrenn\r\n        openModalFullScreen: false,\r\n        estadoModalSimple: false,\r\n        estadoModalSimpleFechaNacimiento: false,\r\n        estadoModalDeleteActivarDesactivar: 'eliminar',\r\n        //item Selecionado\r\n        itemsSeleccionados: [],\r\n        estadoacciones: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            if (this.props.usuario === null) {\r\n            } else {\r\n                this.obtenerBaseDatos()\r\n            }\r\n        }, 100)\r\n\r\n    }\r\n\r\n    obtenerBaseDatos = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/productos');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaProductos: [],\r\n                            listaProductosTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var filterList = lista.sort((a, b) => {\r\n                            a = new Date(a.order);\r\n                            b = new Date(b.order);\r\n                            return a > b ? -1 : a < b ? 1 : 0;\r\n                        })\r\n                        this.setState({\r\n                            listaProductos: filterList,\r\n                            listaProductosTemporal: filterList,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaProductos: [],\r\n                            listaProductosTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    comprobarUsuario = (item) => {\r\n        if (this.state.estadoacciones === 'desactivar') {\r\n            if (item.usuario === this.props.usuario.code) {\r\n                this.setState({ itemSeleccionado: item })\r\n                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'desactivar' })\r\n            } else {\r\n                setSnackBars.openSnack('warning', 'rootSnackBar', 'Usted no registro este Producto', 2000)\r\n            }\r\n        } else if (this.state.estadoacciones === 'activar') {\r\n            if (item.usuario === this.props.usuario.code) {\r\n                this.setState({ itemSeleccionado: item })\r\n                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'activar' })\r\n            } else {\r\n                setSnackBars.openSnack('warning', 'rootSnackBar', 'Usted no registro este Producto', 2000)\r\n            }\r\n        } else {\r\n            if (item.usuario === this.props.usuario.code) {\r\n                this.setState({ itemSeleccionado: item })\r\n                this.setState({ openModalFullScreen: true })\r\n            } else {\r\n                setSnackBars.openSnack('warning', 'rootSnackBar', 'Usted no registro este Producto', 2000)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.codigo)\r\n        }\r\n\r\n        if (item.id === 'acciones') {\r\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title=\"Editar\" placement=\"left\">\r\n                    <IconButton aria-label=\"Editar\" onClick={() => {\r\n                        this.setState({\r\n                            estadoacciones: 'editar'\r\n                        })\r\n                        setTimeout(() => {\r\n                            this.comprobarUsuario(n)\r\n                        }, 100)\r\n                        /*   this.setState({ itemSeleccionado: n })\r\n                          this.setState({ openModalFullScreen: true }) */\r\n                    }}>\r\n                        <EditIcon color='primary' fontSize=\"small\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                {\r\n                    Boolean(n.estado) ?\r\n                        <Tooltip title=\"Desactivar\" placement=\"right\">\r\n                            <IconButton aria-label=\"Desactivar\" value=\"desactivar\" onClick={(event) => {\r\n                                this.setState({\r\n                                    estadoacciones: 'desactivar'\r\n                                })\r\n                                setTimeout(() => {\r\n                                    this.comprobarUsuario(n)\r\n                                }, 100)\r\n                                /*  this.setState({ itemSeleccionado: n })\r\n                                 this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'desactivar' }) */\r\n                            }}>\r\n                                <VisibilityOffIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        :\r\n                        <Tooltip title=\"Activar\">\r\n                            <IconButton aria-label=\"Activar\" value=\"activar\" onClick={() => {\r\n                                this.setState({\r\n                                    estadoacciones: 'activar'\r\n                                })\r\n                                setTimeout(() => {\r\n                                    this.comprobarUsuario(n)\r\n                                }, 100)\r\n                                /*  this.setState({ itemSeleccionado: n })\r\n                                 this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'activar' }) */\r\n                            }}>\r\n                                <VisibilityIcon color='primary' fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                }\r\n\r\n\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'descripcion_producto') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.descripcion_producto)}\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'codigo_barras') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.codigo_barras)\r\n        }\r\n\r\n        if (item.id === 'codigo_referencia') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.codigo_referencia)\r\n        }\r\n\r\n        if (item.id === 'precio_costo') {\r\n            return this.getColorActivadoDesactivado(n.estado,\r\n                <Chip\r\n                    label={<Dolar>{Number(n.precio_costo).toFixed(2)}</Dolar>}\r\n                    clickable\r\n                    color=\"default\"\r\n                />\r\n            )\r\n        }\r\n\r\n        if (item.id === 'categoria_producto') {\r\n            return <ReturnTextTable\r\n                referencia=\"categorias\"\r\n                codigo={n.categoria_producto}\r\n                datoTraido=\"nombre\"\r\n                estado={n.estado}\r\n            />\r\n        }\r\n\r\n        if (item.id === 'proveedor') {\r\n            return <ReturnTextTable\r\n                referencia=\"proveedores\"\r\n                codigo={n.proveedor}\r\n                datoTraido=\"nombre\"\r\n                estado={n.estado}\r\n            />\r\n        }\r\n\r\n        if (item.id === 'marca_producto') {\r\n            return <ReturnTextTable\r\n                referencia=\"marcas\"\r\n                codigo={n.marca_producto}\r\n                datoTraido=\"nombre\"\r\n                estado={n.estado}\r\n            />\r\n        }\r\n\r\n        if (item.id === 'porcentaje_iva') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.porcentaje_iva)\r\n        }\r\n\r\n        if (item.id === 'localizacion_producto') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.localizacion_producto)\r\n        }\r\n\r\n        if (item.id === 'numero_ventas') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.numero_ventas)\r\n        }\r\n\r\n        if (item.id === 'unidad_medida') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.unidad_medida)\r\n        }\r\n\r\n        if (item.id === 'producto_fraccionado') {\r\n            return n.producto_fraccionado === true ? this.getColorActivadoDesactivado(n.estado, \"Sí\") : this.getColorActivadoDesactivado(n.estado, \"No\")\r\n        }\r\n\r\n        if (item.id === 'stock_actual') {\r\n            return this.getColorActivadoDesactivado(n.estado,\r\n                <Chip\r\n                    label={n.stock_actual}\r\n                    clickable\r\n                    color=\"primary\"\r\n                />\r\n            )\r\n        }\r\n\r\n        if (item.id === 'stock_minimo') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.stock_minimo)\r\n        }\r\n\r\n        if (item.id === 'stock_maximo') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.stock_maximo)\r\n        }\r\n\r\n        if (item.id === 'fecha_vencimiento') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.fecha_vencimiento)}\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'fecha_registro') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.fecha_registro)}\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'hora_registro') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.hora_registro)\r\n        }\r\n\r\n        if (item.id === 'tiene_iva') {\r\n            return n.tiene_iva === true ?\r\n                this.getColorActivadoDesactivado(n.estado,\r\n                    <Chip\r\n                        label={<div style={{ color: colors.getColorWhite() }}>{'Sí'}</div>}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryDarkBlue300() }}\r\n                    />\r\n                )\r\n                :\r\n                this.getColorActivadoDesactivado(n.estado,\r\n                    <Chip\r\n                        label='No'\r\n                        clickable\r\n                        color=\"default\"\r\n                    />\r\n                )\r\n        }\r\n\r\n        if (item.id === 'estado') {\r\n            return n.estado === true ? this.getColorActivadoDesactivado(n.estado, \"Sí\") : this.getColorActivadoDesactivado(n.estado, \"No\")\r\n        }\r\n\r\n        if (item.id === 'usuario') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.usuario}\r\n                datoTraido=\"nombre\"\r\n                estado={n.estado}\r\n            />\r\n        }\r\n    }\r\n\r\n    getColorActivadoDesactivado = (estado, texto) =>\r\n        estado === false ?\r\n            <div style={{ color: 'rgba(0,0,0,0.5)' }}>\r\n                {texto}\r\n            </div>\r\n            : texto\r\n\r\n    handleEliminarItems = (itemsSeleccionados) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                itemsSeleccionados.forEach(element => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/productos/' + element.codigo);\r\n                    productosRef.remove()\r\n                });\r\n            }\r\n        })\r\n        this.setState({\r\n            itemsSeleccionados: [],\r\n            estadoModalSimple: false\r\n        })\r\n        setSnackBars.openSnack('success', 'rootSnackBar', 'Proveedores eliminados correctamente', 2000)\r\n    }\r\n\r\n    handleActivarItems = (itemsSeleccionados) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                itemsSeleccionados.forEach(element => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/productos/' + element.codigo);\r\n                    productosRef.update({\r\n                        estado: true\r\n                    })\r\n                });\r\n            }\r\n        })\r\n        this.setState({ estadoModalSimple: false })\r\n        setSnackBars.openSnack('info', 'rootSnackBar', 'Proveedores activados correctamente', 2000)\r\n    }\r\n\r\n    handleDesactivarItems = (itemsSeleccionados) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                itemsSeleccionados.forEach(element => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/productos/' + element.codigo);\r\n                    productosRef.update({\r\n                        estado: false\r\n                    })\r\n                });\r\n            }\r\n        })\r\n        this.setState({ estadoModalSimple: false })\r\n        setSnackBars.openSnack('warning', 'rootSnackBar', 'Proveedores desactivados correctamente', 2000)\r\n    }\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaProductos: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaProductosTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaProductos: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n\r\n\r\n                <MenuHerramientas>\r\n\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Nuevo Producto\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        onClick={() => {\r\n                            this.setState({ itemSeleccionado: null })\r\n                            this.setState({ openModalFullScreen: true })\r\n                        }}\r\n                    >\r\n                        <AddIcon/>\r\n                    </ItemMenuHerramienta>\r\n\r\n                    <div style={{ flex: 0.95 }}></div>\r\n\r\n                    <Search\r\n                        id='buscar-producto'\r\n                        textoSearch=\"Buscar...\"\r\n                        textoTooltip=\"Buscar producto\"\r\n                        handleSearch={this.handleSearch}\r\n                    />\r\n\r\n\r\n                </MenuHerramientas>\r\n\r\n                <Divider />\r\n\r\n                <TablaNormal\r\n                    textoTitleP=\"Productos\"\r\n                    textoTitleS=\"Producto\"\r\n                    selectedItems={true}\r\n                    toolbar={false}\r\n                    data={this.state.listaProductos}\r\n                    rows={this.state.rowsListaProductos}\r\n                    handleGetData={this.handleGetData}\r\n                    estadoTabla={this.state.estadoTabla}\r\n                    itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                    notTab={true}\r\n                />\r\n\r\n                <FullScreenDialog openModal={this.state.openModalFullScreen}>\r\n                    <ModalNewProducto\r\n                        item={this.state.itemSeleccionado}\r\n                        handleClose={() => this.setState({ openModalFullScreen: false })}\r\n                        setNewProducto={this.setNewProducto}\r\n                        setUpdateProducto={this.setUpdateProducto}\r\n                        usuario={this.props.usuario}\r\n                    >\r\n                    </ModalNewProducto>\r\n                </FullScreenDialog>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalSimple}\r\n                    handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                >\r\n                    <DeleteActivarDesactivar\r\n                        tipo={this.state.estadoModalDeleteActivarDesactivar}\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                        handleEliminarItems={() => this.handleEliminarItems([this.state.itemSeleccionado])}\r\n                        handleActivarItems={() => this.handleActivarItems([this.state.itemSeleccionado])}\r\n                        handleDesactivarItems={() => this.handleDesactivarItems([this.state.itemSeleccionado])}\r\n                    />\r\n                </ModalContainerNormal>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalSimpleFechaNacimiento}\r\n                    handleClose={() => this.setState({ estadoModalSimpleFechaNacimiento: false })}\r\n                >\r\n                    <AnadirVencimiento\r\n                        producto={this.state.itemsSeleccionados[0]}\r\n                        handleClose={() => this.setState({ estadoModalSimpleFechaNacimiento: false })}\r\n                    />\r\n                </ModalContainerNormal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListaProductos;","import React, { Component } from 'react';\r\nimport MenuHerramientas from '../../menus/MenuHerramientas'\r\nimport ItemMenuHerramienta from '../../menus/ItemMenuHerramienta'\r\nimport TablaNormal from '../../tables/TableNormal'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../../../utils/funtions';\r\n\r\n//dialogs\r\nimport FullScreenDialog from '../../../../components/components/FullScreenDialog';\r\nimport ModalNewEditProveedor from '../../../../components/modals_container/ModalNewEditProveedor';\r\nimport ModalContainerNormal from '../../../modals_container/ModalContainerNormal';\r\nimport DeleteActivarDesactivar from '../../../plugins/deleteActivarDesactivar';\r\nimport setSnackBars from '../../../plugins/setSnackBars';\r\nimport ReturnTextTable from '../../tables/ReturnTextTable';\r\nimport Search from '../../Search';\r\n\r\nclass Proveedores extends Component {\r\n\r\n    state = {\r\n        listaProveedores: [],\r\n        rowslistaStock: [\r\n            { id: 'acciones', numeric: false, disablePadding: true, label: 'Acciones' },\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'nombre', numeric: true, disablePadding: false, label: 'Nombre' },\r\n            { id: 'email', numeric: true, disablePadding: false, label: 'Email' },\r\n            { id: 'tipo_identificacion', numeric: true, disablePadding: false, label: 'Tipo de Identificacion' },\r\n            { id: 'identificacion', numeric: true, disablePadding: false, label: 'identificacion' },\r\n            { id: 'tipo_persona', numeric: true, disablePadding: false, label: 'Tipo Persona' },\r\n            { id: 'tipo', numeric: true, disablePadding: false, label: 'Tipo' },\r\n            { id: 'celular', numeric: true, disablePadding: false, label: 'celular' },\r\n            { id: 'telefono', numeric: true, disablePadding: false, label: 'Telefono' },\r\n            { id: 'direccion', numeric: true, disablePadding: false, label: 'Dirección' },\r\n            { id: 'observacion', numeric: true, disablePadding: false, label: 'Observacion' },\r\n            { id: 'usuario', numeric: true, disablePadding: false, label: 'Empleado' },\r\n            { id: 'ciudad', numeric: true, disablePadding: false, label: 'Ciudad' },\r\n            { id: 'barrio', numeric: true, disablePadding: false, label: 'Barrio' },\r\n            { id: 'fecha', numeric: true, disablePadding: false, label: 'Fecha de registro' },\r\n            { id: 'hora', numeric: true, disablePadding: false, label: 'Hora' },\r\n        ],\r\n        estadoTabla: 'llena',\r\n\r\n        //modals\r\n        openModalFullScreen: false,\r\n        estadoModalSimple: false,\r\n        estadoModalDeleteActivarDesactivar: 'eliminar',\r\n        //item Selecionado\r\n        itemsSeleccionados: [],\r\n        //uid de usuario\r\n        usuarioUID: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({ usuarioUID: user.uid })\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/proveedores');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaProveedores: [],\r\n                            listaProveedoresTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var filterList = lista.sort((a, b) => {\r\n                            a = new Date(a.order);\r\n                            b = new Date(b.order);\r\n                            return a > b ? -1 : a < b ? 1 : 0;\r\n                        })\r\n                        this.setState({\r\n                            listaProveedores: filterList,\r\n                            listaProveedoresTemporal: filterList,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaProveedores: [],\r\n                            listaProveedoresTemporal: [],\r\n                            //categorias: [],\r\n                            //proveedores: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n                /*for(var i=0;i<400;i++){\r\n                    this.setNewProductosData()\r\n                } */\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n        if (item.id === 'acciones') {\r\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                <Tooltip title=\"Editar\"  placement=\"left\">\r\n                    <IconButton aria-label=\"Editar\" onClick={()=>{\r\n                        this.setState({ itemSeleccionado: n })\r\n                        this.setState({ openModalFullScreen: true })\r\n                    }}>\r\n                        <EditIcon color='primary' />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                {\r\n                    Boolean(n.estado) ?\r\n                        <Tooltip title=\"Desactivar\" placement=\"right\">\r\n                            <IconButton aria-label=\"Desactivar\" onClick={() => {\r\n                                this.setState({ itemSeleccionado: n })\r\n                                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'desactivar' })\r\n                            }}>\r\n                                <VisibilityOffIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        :\r\n                        <Tooltip title=\"Activar\">\r\n                            <IconButton aria-label=\"Activar\" onClick={() => {\r\n                                this.setState({ itemSeleccionado: n })\r\n                                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'activar' })\r\n                            }}>\r\n                                <VisibilityIcon color='primary' />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                }\r\n\r\n\r\n            </div>\r\n        }\r\n        if (item.id === 'nombre') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.nombre)}\r\n            </div>\r\n        }\r\n        if (item.id === 'email') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.email)\r\n        }\r\n        if (item.id === 'tipo') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.tipo)\r\n        }\r\n        if (item.id === 'tipo_identificacion') {\r\n           \r\n            if(n.tipo_identificacion==='05'){                \r\n                return this.getColorActivadoDesactivado(n.estado, \"Cedula\")\r\n            }else{\r\n                return this.getColorActivadoDesactivado(n.estado, \"RUC\")\r\n            }\r\n            \r\n        }\r\n        if (item.id === 'identificacion') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.identificacion)\r\n        }\r\n\r\n        if (item.id === 'tipo_persona') {\r\n            if(n.tipo_persona===true){\r\n                return this.getColorActivadoDesactivado(n.estado, \"NO OBLIGADO A LLEVAR CONTABILIDAD\")\r\n            }else{\r\n                return this.getColorActivadoDesactivado(n.estado, \"OBLIGADO A LLEVAR CONTABILIDAD\")  \r\n            }\r\n           \r\n        }\r\n        if (item.id === 'celular') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.celular)\r\n        }\r\n        if (item.id === 'telefono') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.telefono)\r\n        }\r\n        if (item.id === 'direccion') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.direccion)}\r\n            </div>\r\n        }\r\n        if (item.id === 'observacion') {\r\n            return <div style={{ width: '200px' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.observacion)}\r\n            </div>\r\n        }\r\n        if (item.id === 'usuario') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.usuario}\r\n                datoTraido=\"nombre\"\r\n                estado={n.estado}\r\n            />\r\n        }\r\n        if (item.id === 'ciudad') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.ciudad)\r\n        }\r\n        if (item.id === 'barrio') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.barrio)\r\n        }\r\n        if (item.id === 'fecha') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {this.getColorActivadoDesactivado(n.estado, n.fecha)}\r\n            </div>\r\n        }\r\n        if (item.id === 'hora') {\r\n            return this.getColorActivadoDesactivado(n.estado, n.hora)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    getColorActivadoDesactivado = (estado, texto) =>\r\n        estado === false ?\r\n            <div style={{ color: 'rgba(0,0,0,0.5)' }}>\r\n                {texto}\r\n            </div>\r\n            : texto\r\n\r\n\r\n    handleEliminarItems = (itemsSeleccionados) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                itemsSeleccionados.forEach(element => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/proveedores/' + element.codigo);\r\n                    productosRef.remove()\r\n                });\r\n            }\r\n        })\r\n        this.setState({\r\n            itemsSeleccionados: [],\r\n            estadoModalSimple: false\r\n        })\r\n        setSnackBars.openSnack('success', 'rootSnackBar', 'Proveedores eliminados correctamente', 2000)\r\n    }\r\n\r\n    handleActivarItems = (itemsSeleccionados) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                itemsSeleccionados.forEach(element => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/proveedores/' + element.codigo);\r\n                    productosRef.update({\r\n                        estado: true\r\n                    })\r\n                });\r\n            }\r\n        })\r\n        this.setState({ estadoModalSimple: false })\r\n        setSnackBars.openSnack('info', 'rootSnackBar', 'Proveedores activados correctamente', 2000)\r\n    }\r\n\r\n    handleDesactivarItems = (itemsSeleccionados) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                itemsSeleccionados.forEach(element => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/proveedores/' + element.codigo);\r\n                    productosRef.update({\r\n                        estado: false\r\n                    })\r\n                });\r\n            }\r\n        })\r\n        this.setState({ estadoModalSimple: false })\r\n        setSnackBars.openSnack('warning', 'rootSnackBar', 'Proveedores desactivados correctamente', 2000)\r\n    }\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaProveedores: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaProveedoresTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaProveedores: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MenuHerramientas>\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Nuevo\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        disabled={this.state.itemsSeleccionados.length > 0}\r\n                        onClick={() => this.setState({ itemSeleccionado: null, openModalFullScreen: true })}\r\n                    />\r\n                    {/* <ItemMenuHerramienta\r\n                        titleButton=\"Editar\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        disabled={this.state.itemsSeleccionados.length === 1 ? false : true}\r\n                        onClick={() => {\r\n                            if (this.state.itemsSeleccionados.length > 0) {\r\n                                console.log(this.state.itemsSeleccionados)\r\n                                this.setState({ openModalFullScreen: true })\r\n                            }\r\n                        }}\r\n                    />\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Eliminar\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        disabled={!this.state.itemsSeleccionados.length > 0}\r\n                        onClick={() => {\r\n                            if (this.state.itemsSeleccionados.length > 0) {\r\n                                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'eliminar' })\r\n                            }\r\n                        }}\r\n                    />\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Activar\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        disabled={!this.state.itemsSeleccionados.length > 0}\r\n                        onClick={() => {\r\n                            if (this.state.itemsSeleccionados.length > 0) {\r\n                                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'activar' })\r\n                            }\r\n                        }}\r\n                    />\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Desactivar\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        disabled={!this.state.itemsSeleccionados.length > 0}\r\n                        onClick={() => {\r\n\r\n                            if (this.state.itemsSeleccionados.length > 0) {\r\n                              \r\n                                this.setState({ estadoModalSimple: true, estadoModalDeleteActivarDesactivar: 'desactivar' })\r\n                            }\r\n                        }}\r\n                    /> */}\r\n\r\n                    <div style={{ flex: 0.8 }}></div>\r\n\r\n                    <Search\r\n                        id='buscar-producto'\r\n                        textoSearch=\"Buscar...\"\r\n                        textoTooltip=\"Buscar producto\"\r\n                        handleSearch={this.handleSearch}\r\n                    />\r\n                </MenuHerramientas>\r\n\r\n                <Divider />\r\n\r\n                <TablaNormal\r\n                    textoTitleP=\"Proveedores\"\r\n                    textoTitleS=\"Proveedor\"\r\n                    selectedItems={true}\r\n                    toolbar={false}\r\n                    data={this.state.listaProveedores}\r\n                    rows={this.state.rowslistaStock}\r\n                    handleGetData={this.handleGetData}\r\n                    estadoTabla={this.state.estadoTabla}\r\n                    itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                />\r\n\r\n                <FullScreenDialog openModal={this.state.openModalFullScreen}>\r\n                    <ModalNewEditProveedor\r\n                        item={this.state.itemSeleccionado}\r\n                        handleClose={() => this.setState({ openModalFullScreen: false })}\r\n                        usuario={this.props.usuario}\r\n                    />\r\n                </FullScreenDialog>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalSimple}\r\n                    handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                >\r\n                    <DeleteActivarDesactivar\r\n                        tipo={this.state.estadoModalDeleteActivarDesactivar}\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                        handleEliminarItems={() => this.handleEliminarItems([this.state.itemSeleccionado])}\r\n                        handleActivarItems={() => this.handleActivarItems([this.state.itemSeleccionado])}\r\n                        handleDesactivarItems={() => this.handleDesactivarItems([this.state.itemSeleccionado])}\r\n                    />\r\n                </ModalContainerNormal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Proveedores;","import React, { Component } from 'react';\r\nimport MenuHerramientas from '../../menus/MenuHerramientas'\r\nimport ItemMenuHerramienta from '../../menus/ItemMenuHerramienta'\r\nimport TablaNormal from '../../tables/TableNormal'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../../../utils/funtions';\r\nimport ReturnTextTable from '../../tables/ReturnTextTable';\r\nimport ModalCompraProductos from '../../../modals_container/ModalCompraProductos';\r\nimport FullScreenDialog from '../../FullScreenDialog';\r\nimport Search from '../../Search';\r\n\r\nclass Stock extends Component {\r\n\r\n    state = {\r\n        listaStock: [],\r\n        listaStockTemporal: [],\r\n        rowslistaStock: [\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'tipo_operacion', numeric: true, disablePadding: false, label: 'Tipo de operación' },\r\n            { id: 'fecha', numeric: true, disablePadding: false, label: 'Fecha' },\r\n            { id: 'hora', numeric: true, disablePadding: false, label: 'Hora' },\r\n            { id: 'cliente_proveedor', numeric: true, disablePadding: false, label: 'Cliente/Proveedor' },\r\n            { id: 'productos', numeric: true, disablePadding: false, label: 'Productos' },\r\n            { id: 'empleado', numeric: true, disablePadding: false, label: 'Empleado' },\r\n            { id: 'subtotal', numeric: true, disablePadding: false, label: 'Sub Total' },\r\n            { id: 'total_final', numeric: true, disablePadding: false, label: 'Total final' },\r\n            { id: 'descuento', numeric: true, disablePadding: false, label: 'Descuento' },\r\n            { id: 'valor_pagado', numeric: true, disablePadding: false, label: 'Valor Pagado' },\r\n            { id: 'vuelto', numeric: true, disablePadding: false, label: 'Vuelto' },\r\n            { id: 'observacion', numeric: true, disablePadding: false, label: 'Observación' },\r\n            { id: 'otros_gastos', numeric: true, disablePadding: false, label: 'Otros Gastos' },\r\n            { id: 'flete', numeric: true, disablePadding: false, label: 'Flete' },\r\n            { id: 'medio_pago', numeric: true, disablePadding: false, label: 'Medio pago' },\r\n            { id: 'saldo_favor', numeric: true, disablePadding: false, label: 'Saldo a favor' },\r\n            { id: 'en_deuda', numeric: true, disablePadding: false, label: 'En deuda' },\r\n            { id: 'acreditado', numeric: true, disablePadding: false, label: 'Acreditado' },\r\n        ],\r\n        estadoTabla: 'llena',\r\n        //items selecionados tabla\r\n        itemsSeleccionados: [],\r\n        //referencias menus \r\n        referenciaMenuEntrada: null,\r\n        referenciaMenuSalida: null,\r\n        //estados modals\r\n        estadoModalSimpleCompraProductos: false,\r\n        //tipo de ajuste para productos\r\n        tipoAjuste: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.cargarData()\r\n    }\r\n\r\n    cargarData = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/operaciones_stock');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaStock: [],\r\n                            listaStockTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var filterList = lista.sort((a, b) => {\r\n                            a = new Date(a.order);\r\n                            b = new Date(b.order);\r\n                            return a > b ? -1 : a < b ? 1 : 0;\r\n                        })\r\n                        this.setState({\r\n                            listaStock: filterList,\r\n                            listaStockTemporal: filterList,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaStock: [],\r\n                            listaStockTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n\r\n        if (item.id === 'tipo_operacion') {\r\n            return n.tipo_operacion\r\n        }\r\n\r\n        if (item.id === 'fecha') {\r\n            return <div style={{ width: 'max-content' }}>{n.fecha}</div>\r\n        }\r\n\r\n        if (item.id === 'hora') {\r\n            return n.hora\r\n        }\r\n\r\n        if (item.id === 'cliente_proveedor') {\r\n            return n.cliente_proveedor==='Consumidor Final'?n.cliente_proveedor:<>\r\n             <ReturnTextTable\r\n                referencia=\"proveedores\"\r\n                codigo={n.cliente_proveedor}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n             <ReturnTextTable\r\n                referencia=\"clientes\"\r\n                codigo={n.cliente_proveedor}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n            </>\r\n        }\r\n\r\n        if (item.id === 'productos') {\r\n            return n.productos.map(item => {\r\n                return <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <div>{item.cantidad}</div>\r\n                    <div style={{ width: 10 }} />\r\n                    <ReturnTextTable\r\n                        referencia=\"productos\"\r\n                        codigo={item.codigo}\r\n                        datoTraido=\"descripcion_producto\"\r\n                        estado={true}\r\n                    />\r\n                </div>\r\n\r\n            })\r\n\r\n        }\r\n\r\n        if (item.id === 'total_final') {\r\n            return n.total_final\r\n        }\r\n\r\n        if (item.id === 'empleado') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.empleado}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n        }\r\n\r\n        if (item.id === 'vendedor') {\r\n            return n.vendedor\r\n        }\r\n\r\n        if (item.id === 'observacion') {\r\n            return n.observacion\r\n        }\r\n\r\n        if (item.id === 'subtotal') {\r\n            return n.subtotal\r\n        }\r\n\r\n        if (item.id === 'descuento') {\r\n            return n.descuento\r\n        }\r\n\r\n        if (item.id === 'otros_gastos') {\r\n            return n.otros_gastos\r\n        }\r\n\r\n        if (item.id === 'flete') {\r\n            return n.flete\r\n        }\r\n\r\n        if (item.id === 'valor_pagado') {\r\n            return n.valor_pagado\r\n        }\r\n\r\n        if (item.id === 'medio_pago') {\r\n            return n.medio_pago\r\n        }\r\n\r\n        if (item.id === 'saldo_favor') {\r\n            return n.saldo_favor\r\n        }\r\n\r\n        if (item.id === 'en_deuda') {\r\n            return n.en_deuda\r\n        }\r\n\r\n        if (item.id === 'vuelto') {\r\n            return n.vuelto\r\n        }\r\n\r\n        if (item.id === 'acreditado') {\r\n            return n.acreditado\r\n        }\r\n    }\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaStock: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaStockTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaStock: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MenuHerramientas>\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Entrada\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        onClick={event => this.setState({ referenciaMenuEntrada: event.currentTarget })}\r\n                    />\r\n\r\n                    <Menu\r\n                        id=\"simple-menu-entrada\"\r\n                        anchorEl={this.state.referenciaMenuEntrada}\r\n                        open={Boolean(this.state.referenciaMenuEntrada)}\r\n                        onClose={() => this.setState({ referenciaMenuEntrada: null })}\r\n                    >\r\n                        <MenuItem onClick={() => this.setState({\r\n                            tipoAjuste: 'devolucion_cliente',\r\n                            estadoModalSimpleCompraProductos: true\r\n                        })}>\r\n                            Devolución del cliente\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => this.setState({\r\n                            tipoAjuste: 'compra_producto',\r\n                            estadoModalSimpleCompraProductos: true\r\n                        })}>\r\n                            Compra de productos\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => this.setState({\r\n                            tipoAjuste: 'ajuste-stock-entrada',\r\n                            estadoModalSimpleCompraProductos: true\r\n                        })}>\r\n                            Ajuste de Stock\r\n                        </MenuItem>\r\n                    </Menu>\r\n\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Salida\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        onClick={event => this.setState({ referenciaMenuSalida: event.currentTarget })}\r\n                    />\r\n\r\n                    <Menu\r\n                        id=\"simple-menu-salida\"\r\n                        anchorEl={this.state.referenciaMenuSalida}\r\n                        open={Boolean(this.state.referenciaMenuSalida)}\r\n                        onClose={() => this.setState({ referenciaMenuSalida: null })}\r\n                    >\r\n                        <MenuItem onClick={() => this.setState({\r\n                            tipoAjuste: 'devolucion-proveedor',\r\n                            estadoModalSimpleCompraProductos: true\r\n                        })}>\r\n                            Devolución al proveedor\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => this.setState({\r\n                            tipoAjuste: 'ajuste-stock-salida',\r\n                            estadoModalSimpleCompraProductos: true\r\n                        })}>\r\n                            Ajuste de Stock\r\n                        </MenuItem>\r\n                    </Menu>\r\n\r\n                    {/* <ItemMenuHerramienta\r\n                        titleButton=\"Editar\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        onClick={() => console.log(\"Hola\")}\r\n                    />\r\n                    <ItemMenuHerramienta\r\n                        titleButton=\"Cancelar\"\r\n                        color=\"primary\"\r\n                        visible={true}\r\n                        onClick={() => console.log(\"Hola\")}\r\n                    /> */}\r\n\r\n                    <div style={{ flex: 0.9 }}></div>\r\n\r\n                    <Search\r\n                        id='buscar-producto'\r\n                        textoSearch=\"Buscar...\"\r\n                        textoTooltip=\"Buscar producto\"\r\n                        handleSearch={this.handleSearch}\r\n                    />\r\n                </MenuHerramientas>\r\n\r\n                <Divider />\r\n\r\n                <TablaNormal\r\n                    textoTitleP=\"Stocks\"\r\n                    textoTitleS=\"Stock\"\r\n                    selectedItems={true}\r\n                    toolbar={false}\r\n                    data={this.state.listaStock}\r\n                    rows={this.state.rowslistaStock}\r\n                    handleGetData={this.handleGetData}\r\n                    estadoTabla={this.state.estadoTabla}\r\n                    itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                />\r\n\r\n                <FullScreenDialog openModal={this.state.estadoModalSimpleCompraProductos}>\r\n                    <ModalCompraProductos\r\n                        handleClose={() => this.setState({\r\n                            estadoModalSimpleCompraProductos: false,\r\n                            referenciaMenuSalida: null,\r\n                            referenciaMenuEntrada: null\r\n                        })}\r\n                        usuario={this.props.usuario}\r\n                        tipoAjuste={this.state.tipoAjuste}\r\n                    />\r\n                </FullScreenDialog>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stock;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\n\r\nconst ItemUser = (props) => {\r\n    \r\n    return (      \r\n        <ButtonBase style={{margin:10}} onClick={props.onClick}>\r\n            <Paper elevation={4} >\r\n                <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                    margin: 20\r\n                }}>\r\n                    <Avatar style={{ width: 80, height: 80, fontSize: 40, marginBottom: 10 }}>{props.title?props.title.toString().charAt(0):'none'}</Avatar>\r\n                    <Typography variant=\"subheading\" gutterBottom>\r\n                        {props.title?props.title:'none'}\r\n                    </Typography>\r\n                </div>\r\n            </Paper>\r\n        </ButtonBase>\r\n    );\r\n}\r\n\r\nexport default ItemUser","import React, { Component } from 'react';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport setSnackBars from '../../plugins/setSnackBars'\r\n\r\n// firebase\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\n\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        password: '',\r\n        usuario: '',\r\n        statePassword: 'normal',\r\n        stateUsuario: 'normal',\r\n        showPassword: false,\r\n\r\n        loading: false,\r\n        success: false,\r\n    };\r\n\r\n    handleChangePassword = event => {\r\n        if (event.target.value.length === 0) {\r\n            this.setState({ statePassword: 'error' })\r\n        } else {\r\n            this.setState({ statePassword: 'normal' })\r\n        }\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    handleChangeUsuario = (event) => {\r\n        if (event.target.value.length === 0) {\r\n            this.setState({ stateUsuario: 'error' })\r\n        } else {\r\n            this.setState({ stateUsuario: 'normal' })\r\n        }\r\n        this.setState({ usuario: event.target.value })\r\n    }\r\n\r\n    handleClickShowPassword = () => {\r\n        this.setState(state => ({ showPassword: !state.showPassword }))\r\n    }\r\n\r\n    handleSetInitSession = () => {\r\n        if (this.state.usuario.length === 0) {\r\n            this.setState({\r\n                stateUsuario: 'error'\r\n            })\r\n        }\r\n        if (this.state.password.length === 0) {\r\n            this.setState({\r\n                statePassword: 'error'\r\n            })\r\n        }\r\n        if (this.state.usuario.length > 0 && this.state.password.length > 0) {\r\n            this.setState({\r\n                success: false,\r\n                loading: true,\r\n            })\r\n            firebase.auth().signInWithEmailAndPassword(this.state.usuario, this.state.password).catch((error) => {\r\n                var errorCode = error.code;\r\n                if (errorCode === 'auth/invalid-email') {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Formato de correo electrónico erroneo', 2000)\r\n                }\r\n                if (errorCode === 'auth/user-not-found') {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Usuario no registrado', 2000)\r\n                }\r\n                if (errorCode === 'auth/wrong-password') {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Contraseña erronea', 2000)\r\n                }\r\n                this.setState({\r\n                    loading: false,\r\n                    success: true,\r\n                });\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    _onKeyPress = (event) => {\r\n        if (event.charCode === 13) { // enter key pressed\r\n            event.preventDefault();\r\n            this.handleSetInitSession()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                width: '100%',\r\n                height: '100vh'\r\n            }}>\r\n\r\n                <div id='rootSnackBar'></div>\r\n                <Paper\r\n                    elevation={5}\r\n                    style={{\r\n                        minWidth: 300,\r\n                        padding: 30,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                    }}\r\n                >\r\n                    <Typography variant=\"display2\" component=\"h1\" style={{\r\n                        marginTop: 20,\r\n                        textAlign:'center',\r\n                        color:'black'\r\n                    }}>\r\n                        RapiFac\r\n                    </Typography>\r\n                    <Typography variant=\"headline\" component=\"h1\" style={{\r\n                        textAlign:'center',\r\n                        color:'gray',\r\n                        fontSize:15,\r\n                        marginBottom:20,\r\n                        marginTop:18\r\n                    }}>\r\n                        Ingresa al sistema\r\n                    </Typography>\r\n                    <form\r\n                        noValidate\r\n                        autoComplete=\"off\"\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            error={this.state.stateUsuario === 'normal' ? false : true}\r\n                            id=\"user\"\r\n                            type='text'\r\n                            value={this.state.usuario}\r\n                            onChange={this.handleChangeUsuario}\r\n                            label=\"Correo Electronico\"\r\n                            margin=\"normal\"\r\n                            onFocus={() => {\r\n                                this.state.usuario.length === 0 &&\r\n                                    this.setState({ stateUsuario: 'error' })\r\n                            }}\r\n                            style={{\r\n                                marginTop: 10,\r\n                                marginBottom: 20\r\n                            }}\r\n                        />\r\n                        <FormControl\r\n                            style={{\r\n                                marginBottom: 20\r\n                            }}\r\n                        >\r\n                            <InputLabel error={this.state.statePassword === 'normal' ? false : true} htmlFor=\"adornment-password\">Contraseña</InputLabel>\r\n                            <Input\r\n                                id=\"adornment-password\"\r\n                                label=\"Nombre de usuario\"\r\n                                error={this.state.statePassword === 'normal' ? false : true}\r\n                                type={this.state.showPassword ? 'text' : 'password'}\r\n                                value={this.state.password}\r\n                                onChange={this.handleChangePassword}\r\n                                onFocus={() => {\r\n                                    this.state.password.length === 0 &&\r\n                                        this.setState({ statePassword: 'error' })\r\n                                }}\r\n                                onKeyPress={this._onKeyPress}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle password visibility\"\r\n                                            onClick={this.handleClickShowPassword}\r\n                                        >\r\n                                            {this.state.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                        </FormControl>\r\n                    </form>\r\n\r\n                    <div style={{\r\n                        marginLeft: 20,\r\n                        marginRight: 20,\r\n                        position: 'relative',\r\n                    }}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\r\n                                marginTop: 20,\r\n                                marginBottom: 10,\r\n                                width: '100%'\r\n                            }}\r\n                            disabled={this.state.stateUsuario === 'normal' && this.state.statePassword === 'normal' ? this.state.loading : true}\r\n                            onClick={this.handleSetInitSession}\r\n                        >\r\n                            Iniciar sesion\r\n                        </Button>\r\n                        {\r\n                            this.state.loading &&\r\n                            <CircularProgress size={24}\r\n                                style={{\r\n                                    color: 'primary',\r\n                                    position: 'absolute',\r\n                                    top: '50%',\r\n                                    left: '50%',\r\n                                    marginTop: -8,\r\n                                    marginLeft: -12,\r\n                                }}\r\n                            />\r\n                        }\r\n                    </div>\r\n\r\n                    <Button size=\"small\" color=\"primary\" style={{\r\n                        marginBottom: 20\r\n                    }}\r\n                    onClick={()=> setSnackBars.openSnack('info', 'rootSnackBar', 'Por favor comuniquese con soporte', 2000)}\r\n                    >\r\n                        No recuerdo mi contraseña\r\n                    </Button>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\nimport ClippedDrawer from '../ClippedDrawer';\r\nimport LoginUsuarios from './LoginUsuarios'\r\n\r\n//firebase\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../../utils/funtions';\r\n\r\nclass LoginContenedor extends Component {\r\n    state = {\r\n        idUser: null,\r\n        userSelected: null,\r\n        users: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            stateUsers: 'cargando',\r\n        })\r\n\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/usuarios');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        let array = funtions.snapshotToArray(snapshot)\r\n                        let arraytem=[]\r\n                        array.forEach((item)=>{\r\n                            if(item.estado){\r\n                                \r\n                                arraytem.push(item)\r\n                                \r\n                            }\r\n                        })                    \r\n                        this.setState({\r\n                            stateUsers: 'llena',\r\n                            users: arraytem\r\n                        })                      \r\n                        this.checkStatusSession(arraytem)        \r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    checkStatusSession = (array) => {\r\n        const idSessionUser = sessionStorage.getItem(\"code-status-ser-section\");\r\n        if (idSessionUser) {\r\n            const itemUser = array.filter(item => {\r\n                return item.code === idSessionUser\r\n            })\r\n            itemUser[0] ?\r\n                this.changueStatusSesionUserLocal(idSessionUser, itemUser)\r\n                :\r\n                this.setState({\r\n                    idUser: null,\r\n                    userSelected: null\r\n                })\r\n        } else {\r\n            this.setState({\r\n                idUser: null,\r\n                userSelected: null\r\n            })\r\n        }\r\n    }\r\n\r\n    changueStatusSesionUserLocal = (idSessionUser, itemUser) => {\r\n        this.setState({\r\n            idUser: idSessionUser,\r\n            userSelected: itemUser[0]\r\n        })\r\n        this.props.onChangueUserState(this.state.users.filter(user => user.code === idSessionUser)[0])\r\n    }\r\n\r\n    changueStatusSesionUser = (id) => {\r\n        this.setState({\r\n            idUser: id,\r\n            userSelected: this.state.users.filter(user => user.code === id)[0]\r\n        })\r\n        this.props.onChangueUserState(this.state.users.filter(user => user.code === id)[0])\r\n    }\r\n\r\n    closeStatusSesionUser = () => {\r\n        this.setState({\r\n            idUser: null,\r\n            userSelected: null\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { title, children } = this.props\r\n        const { idUser, stateUsers, users } = this.state\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    idUser ?\r\n                        <ClippedDrawer\r\n                            title={title}\r\n                            user={this.state.userSelected}\r\n                            closeSesion={this.closeStatusSesionUser}\r\n                        >\r\n                            {\r\n                                children\r\n                            }\r\n                        </ClippedDrawer>\r\n                        :\r\n                        <LoginUsuarios\r\n                            stateUsers={stateUsers}\r\n                            users={users}\r\n                            onChangueStatusSession={this.changueStatusSesionUser}\r\n                        />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginContenedor;","import React, { Component } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ItemUser from './ItemUser'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Input from '@material-ui/core/Input';\r\nimport setSnackBars from '../../plugins/setSnackBars';\r\n\r\n// firebase\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport funtions from '../../../utils/funtions';\r\n\r\n\r\nclass LoginUsuarios extends Component {\r\n    state = {\r\n        stateUsers: 'vacia',\r\n        users: [],\r\n\r\n        opendialog: false,\r\n        userSelecionado: {},\r\n        userSelecionadoPassword: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            stateUsers: this.props.stateUsers,\r\n            users: this.props.users\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({\r\n            stateUsers: props.stateUsers,\r\n            users: props.users\r\n        })\r\n    }\r\n\r\n    handleClickOpen = (item) => {\r\n        this.setState({ opendialog: true, userSelecionado: item, userSelecionadoPassword: '' });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ opendialog: false });\r\n    };\r\n\r\n    handleLoginUser = () => {\r\n        if (this.state.userSelecionado.password === this.state.userSelecionadoPassword) {\r\n            sessionStorage.setItem(\"code-status-ser-section\", this.state.userSelecionado.code);\r\n            setSnackBars.openSnack('success', 'rootSnackBar', `Bienvenido ${this.state.userSelecionado.nombre}`, 2000)\r\n            this.handleClose()\r\n            funtions.setTime(500, () => {\r\n                this.props.onChangueStatusSession(this.state.userSelecionado.code)\r\n            })\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Contraseña incorrecta', 2000)\r\n        }\r\n    }\r\n\r\n    enter=(event)=>{\r\n       if(event.keyCode===13){\r\n        this.handleLoginUser()\r\n       }\r\n        //this.handleLoginUser()\r\n    }\r\n\r\n\r\n       \r\n    \r\n    \r\n\r\n    render() {\r\n        const { opendialog, stateUsers, users } = this.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Dialog\r\n                    open={opendialog}\r\n                    onClose={this.handleClose}\r\n                    aria-labelledby=\"alert-dialog-title\"\r\n                    aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                    <DialogTitle id=\"alert-dialog-title\">{this.state.userSelecionado.nombre}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-description\">\r\n                            <Input\r\n                                placeholder=\"Contraseña\"\r\n                                type='password'\r\n                                inputProps={{\r\n                                    'aria-label': 'password user',\r\n                                }}\r\n                                value={this.state.userSelecionadoPassword}\r\n                                onChange={(text) => this.setState({ userSelecionadoPassword: text.target.value })}\r\n                                onKeyUp={(event)=> {this.enter(event)  }}\r\n                            />\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"secondary\">\r\n                            Cancelar\r\n                        </Button>\r\n                        <Button onClick={this.handleLoginUser} color=\"primary\" autoFocus>\r\n                            Aceptar\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <div style={{ display: 'flex', width: '100%' }}>\r\n                    <div style={{flex:1}}></div>\r\n                    <Button onClick={() => firebase.auth().signOut()} color=\"primary\" autoFocus>\r\n                        Cerrar Sesion\r\n                    </Button>\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>\r\n                    <div>\r\n                        <Typography component=\"h1\" variant=\"display2\" gutterBottom>\r\n                            Usuarios del sistema\r\n                        </Typography>\r\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                            {\r\n                                stateUsers === 'cargando' &&\r\n                                <CircularProgress />\r\n                            }\r\n                            {\r\n                                stateUsers === 'vacia' &&\r\n                                <Typography component=\"title\" variant=\"headline\" gutterBottom>\r\n                                    Lista de usuarios vacía\r\n                                </Typography>\r\n                            }\r\n                            {\r\n                                stateUsers === 'llena' &&\r\n                                <div>\r\n                                    {\r\n                                        users.map((item) =>\r\n                                         <ItemUser key={item.id} onClick={() => this.handleClickOpen(item)} title={item.nombre} letra={(nombre)=>this.MaysPrimera(nombre)} />)\r\n                                    }\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <style jsx global>{`\r\n                    .paperstyle { \r\n                        cursor: pointer;\r\n                    }\r\n                    .paperstyle:hover { \r\n                        border: 4px solid #334;\r\n                    }\r\n                `}</style>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginUsuarios;","import React, { Component } from 'react';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nclass ReturnTextTable extends Component {\r\n\r\n    state = {\r\n        texto: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({ usuarioUID: user.uid })\r\n                if (typeof  this.props.codigo === 'object') {\r\n                }else{\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/' + this.props.referencia + '/' + this.props.codigo + '/' + this.props.datoTraido);\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({ texto: snapshot.val() })\r\n                        } else {\r\n                            this.setState({ texto: '' })\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.estado === false ?\r\n                        <div style={{ color: 'rgba(0,0,0,0.5)', width: 'max-content' }}>{this.state.texto}</div>\r\n                        :\r\n                        <div style={{ width: 'max-content' }}>{this.state.texto}</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReturnTextTable;","import React from 'react';\r\n\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Add from '@material-ui/icons/Add';\r\n\r\nlet TableNormalToolbar = props => {\r\n    const {\r\n        numSelected,\r\n        textoTitleP,\r\n        textoTitleS,\r\n        handleClickOpen,\r\n        selected,\r\n        handleDeleteItems,\r\n        deleteSelectedItems,\r\n        handleEditItem,\r\n        selectedItems\r\n    } = props;\r\n\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                backgroundColor: '#E1F5FE'\r\n            }}>\r\n                <Toolbar>\r\n                    <Typography variant=\"title\" style={{ width: '70%' }} id=\"tableTitle\" >\r\n                        {numSelected === 0 ? `Lista de ${textoTitleP}` : numSelected > 1 ? `${numSelected}  ${textoTitleP} Seleccionados ` : `${numSelected}  ${textoTitleS} Seleccionado`}\r\n                    </Typography>\r\n\r\n                    {/* <div style={{\r\n                        flex: '1 1 100%',\r\n                    }} />\r\n\r\n                    {\r\n                        !selectedItems &&\r\n                        <div style={\r\n                            {\r\n                                color: 'white',\r\n                                display: 'flex',\r\n                                flexDirection: 'row'\r\n                            }\r\n                        }>\r\n\r\n                            <Tooltip title={`Nuevo ${textoTitleS}`}>\r\n                                <IconButton\r\n                                    disabled={numSelected === 0 ? false : true}\r\n                                    aria-label=\"Nuevo\"\r\n                                    color=\"secondary\"\r\n                                    onClick={handleClickOpen}\r\n                                >\r\n                                    <Add />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"Editar  Producto\">\r\n                                <IconButton\r\n                                    disabled={numSelected === 1 ? false : true}\r\n                                    color=\"secondary\"\r\n                                    aria-label=\"Editar\"\r\n                                    onClick={() => {\r\n                                        handleEditItem(selected[0])\r\n                                    }}>\r\n                                    <EditIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                            <Tooltip title=\"Eliminar Producto\">\r\n                                <IconButton\r\n                                    disabled={numSelected > 0 ? false : true}\r\n                                    aria-label=\"Eliminar\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {\r\n                                        deleteSelectedItems()\r\n                                        handleDeleteItems(selected)\r\n                                    }}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n\r\n                        </div>\r\n                    } */}\r\n                </Toolbar>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default TableNormalToolbar","import React from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Add from '@material-ui/icons/Add';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TablaVacia from '../../plugins/table-vacia';\r\n\r\nimport TableNormalToolbar from './TableNomalToolbar'\r\nimport TableNormalHead from './TableNormalHead'\r\n\r\nfunction desc(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction stableSort(array, cmp) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = cmp(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nfunction getSorting(order, orderBy) {\r\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\r\n}\r\n\r\nclass TablaNormal extends React.Component {\r\n    state = {\r\n        order: 'asc',\r\n        orderBy: 'nombre',\r\n        selected: [],\r\n        data: [],\r\n        page: 0,\r\n        rowsPerPage: 15\r\n    };\r\n\r\n    handleRequestSort = (event, property) => {\r\n        const orderBy = property;\r\n        let order = 'desc';\r\n\r\n        if (this.state.orderBy === property && this.state.order === 'desc') {\r\n            order = 'asc';\r\n        }\r\n\r\n        this.setState({ order, orderBy });\r\n    };\r\n\r\n    handleSelectAllClick = event => {\r\n        if (event.target.checked) {\r\n            this.setState(state => ({ selected: state.data.map(n => n.id) }));\r\n            this.props.itemsSeleccionados(this.getElementosData(this.state.data, this.state.data.map(n => n.id)))        \r\n            return;\r\n        }\r\n        this.props.itemsSeleccionados([])\r\n        this.setState({ selected: [] });\r\n    };\r\n\r\n    handleClick = (event, id) => {\r\n        const { selected } = this.state;\r\n        const selectedIndex = selected.indexOf(id);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n        this.props.itemsSeleccionados(this.getElementosData(this.state.data, newSelected))        \r\n        this.setState({ selected: newSelected });\r\n    };\r\n\r\n    getElementosData=(data, newSelected)=>{\r\n        var array=[]\r\n        newSelected.forEach(element => {\r\n            array.push(...data.filter(item=>item.codigo===element))\r\n        });\r\n        return array\r\n    }\r\n\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = event => {\r\n        this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n    isSelected = id => this.state.selected.indexOf(id) !== -1;\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            data: this.props.data,\r\n            estadoTabla: this.props.estadoTabla\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({\r\n            data: props.data,\r\n            estadoTabla: props.estadoTabla\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\r\n        const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\r\n        //variables de props\r\n        const {\r\n            selectedItems,\r\n            textoTitleP,\r\n            textoTitleS,\r\n            handleGetData,\r\n            rows,\r\n            toolbar,\r\n            notTab\r\n        } = this.props\r\n        //variables comprovadas de props con valor por defecto\r\n        this.selectedItems = this.selectedItems != null ? this.selectedItems : true\r\n        this.toolbar = this.toolbar != null ? this.toolbar : true\r\n        this.textoTitleP = this.textoTitleP != null ? this.textoTitleP : 'Plural'\r\n        this.textoTitleS = this.textoTitleS != null ? this.textoTitleS : 'Singular'\r\n        this.notTab = this.notTab != null ? this.notTab : false\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    toolbar &&\r\n                    <TableNormalToolbar\r\n                        numSelected={selected.length}\r\n                        textoTitleP={textoTitleP}\r\n                        textoTitleS={textoTitleS}\r\n                        selected={this.state.selected}\r\n                        selectedItems={selectedItems}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    this.state.estadoTabla === 'vacio' &&\r\n                    <TablaVacia\r\n                        title={`${textoTitleP}: 0`}\r\n                        titleButton={`AGREGAR ${textoTitleS}`}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    this.state.estadoTabla === 'llena' &&\r\n                    <div style={{ width: '100%' }}>\r\n                        <div style={{\r\n                            overflowX: 'auto',\r\n                            overflowY: 'auto',\r\n                            height: notTab===true? '73vh':'66vh'\r\n                        }}>\r\n                            <Table aria-labelledby=\"tableTitle\" style={{ minWidth: 300 }}>\r\n                                <TableNormalHead\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={this.handleSelectAllClick}\r\n                                    onRequestSort={this.handleRequestSort}\r\n                                    rowCount={data.length}\r\n                                    rows={rows}\r\n                                    selectedItems={selectedItems}\r\n                                />\r\n                                <TableBody>\r\n                                    {stableSort(data, getSorting(order, orderBy))\r\n                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                        .map(n => {\r\n                                            const isSelected = this.isSelected(n.id);\r\n                                            return (\r\n                                                <TableRow\r\n                                                    hover\r\n                                                    onClick={event => {\r\n                                                        !selectedItems &&\r\n                                                            this.handleClick(event, n.id)\r\n                                                    }}\r\n                                                    role=\"checkbox\"\r\n                                                    aria-checked={isSelected}\r\n                                                    tabIndex={-1}\r\n                                                    key={n.id}\r\n                                                    selected={isSelected}\r\n                                                >\r\n                                                    {\r\n                                                        !selectedItems &&\r\n                                                        <TableCell padding=\"checkbox\">\r\n                                                            <Tooltip title=\"Seleccionar\">\r\n                                                                <Checkbox checked={isSelected} />\r\n                                                            </Tooltip>\r\n                                                        </TableCell>\r\n                                                    }\r\n\r\n                                                    {\r\n                                                        rows.map((item) => {\r\n                                                            return <TableCell key={item.id} body>{handleGetData(n, item)}</TableCell>\r\n                                                        })\r\n                                                    }\r\n                                                </TableRow>\r\n                                            );\r\n                                        })}\r\n                                    {emptyRows > 0 && (\r\n                                        <TableRow style={{ height: 49 * emptyRows }}>\r\n                                            <TableCell colSpan={6} />\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </div>\r\n                        <TablePagination\r\n                            component=\"div\"\r\n                            count={data.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            labelRowsPerPage=\"Número de filas\"\r\n                            labelDisplayedRows={({ from, to, count }) => `${from}-${to} de ${count}`}\r\n                            page={page}\r\n                            backIconButtonProps={{\r\n                                'aria-label': 'Previous Page',\r\n                            }}\r\n                            nextIconButtonProps={{\r\n                                'aria-label': 'Next Page',\r\n                            }}\r\n                            onChangePage={this.handleChangePage}\r\n                            onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n\r\n                            style={{\r\n                                position: 'fixed',\r\n                                bottom: 0,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoTabla === 'cargando' &&\r\n                    <div style={{\r\n                        width: '100%',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        padding: 30,\r\n                        flexGrow: 1,\r\n                    }}>\r\n                        <CircularProgress size={40} />\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoTabla === 'sin_resultados' &&\r\n                    <div style={{\r\n                        width: '100%',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        padding: 30,\r\n                        flexGrow: 1,\r\n                    }}>\r\n                        <Typography variant=\"subheading\" >\r\n                            No existen Resultados\r\n                            </Typography>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TablaNormal\r\n","import React from 'react';\r\n\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport colors from '../../../utils/colors';\r\n\r\nclass TableNormalHead extends React.Component {\r\n\r\n    createSortHandler = property => event => {\r\n        this.props.onRequestSort(event, property);\r\n    };\r\n\r\n    render() {\r\n        const { onSelectAllClick, order, orderBy, numSelected, rowCount, rows, selectedItems } = this.props;\r\n\r\n        return (\r\n            <TableHead  color='primary'>\r\n                <TableRow\r\n               \r\n                >\r\n                    {\r\n                        !selectedItems &&\r\n                        <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                                indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                                checked={numSelected === rowCount}\r\n                                onChange={onSelectAllClick}\r\n                            />\r\n                        </TableCell>\r\n                    }\r\n\r\n                    {rows.map(row => {\r\n                        return (\r\n                            <TableCell\r\n                                key={row.id}\r\n                                sortDirection={orderBy === row.id ? order : false}\r\n                               \r\n                            >\r\n                                <Tooltip\r\n                                    title=\"Ordenar Por\"\r\n                                    placement={row.numeric ? 'bottom-end' : 'bottom-start'}\r\n                                    enterDelay={300}\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={orderBy === row.id}\r\n                                        direction={order}\r\n                                        onClick={this.createSortHandler(row.id)}\r\n                                    >\r\n                                        <div style={{width:'max-content', fontSize:15,fontWeight:800}}>{row.label}</div>\r\n                                    </TableSortLabel>\r\n                                </Tooltip>\r\n                            </TableCell>\r\n                        );\r\n                    }, this)}\r\n                </TableRow>\r\n            </TableHead>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TableNormalHead","// This file is shared across the demos.\r\n\r\nimport React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Home from '@material-ui/icons/Home';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport MonetizationOn from '@material-ui/icons/MonetizationOn';\r\nimport History from '@material-ui/icons/History';\r\nimport Usuarios from '@material-ui/icons/Group';\r\nimport DriveEta from '@material-ui/icons/DriveEta';\r\nimport ShoppingBasket from '@material-ui/icons/ShoppingBasket';\r\nimport SupervisedUserCircle from '@material-ui/icons/SupervisedUserCircle';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ReportIcon from '@material-ui/icons/Report';\r\nimport DonutSmall from '@material-ui/icons/DonutSmall';\r\nimport ShoppingCart from '@material-ui/icons/ShoppingCart';\r\nimport Trending from '@material-ui/icons/TrendingUp';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Style from '@material-ui/icons/Style';\r\nimport MarkunreadMailbox from '@material-ui/icons/MarkunreadMailbox';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nimport Link from 'next/link'\r\nimport setSnackBars from '../plugins/setSnackBars';\r\n\r\n\r\nexport const mailFolderListItems = (\r\n    <div>\r\n        <Link prefetch href=\"/\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Inicio\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <Trending />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Inicio\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/productos\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Productos\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <ShoppingBasket />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Productos\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/stock\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Stock\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <History />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Stock\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/proveedores\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Proveedores\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <DriveEta />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Proveedores\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/clientes\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Clientes\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <SupervisedUserCircle />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Contactos\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/ventasFac\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Ventas\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <ShoppingCart />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Ventas\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/retencion\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Retenciones\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <DonutSmall />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Retenciones\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/caja\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Caja\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <MonetizationOn />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Caja\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/cuentas_cobrar\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Cuentas Cobrar\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <Style />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Cuentas Cobrar\" />\r\n            </ListItem>\r\n        </Link>\r\n        <Link prefetch href=\"/usuarios\">\r\n            <ListItem button>\r\n                <Tooltip title=\"Usuarios\" placement=\"right\">\r\n                    <ListItemIcon>\r\n                        <Usuarios />\r\n                    </ListItemIcon>\r\n                </Tooltip>\r\n                <ListItemText primary=\"Usuarios\" />\r\n            </ListItem>\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport const otherMailFolderListItems = (\r\n    <div>\r\n\r\n    </div>\r\n);","import React, { Component } from 'react';\r\nimport MenuHerramientas from '../menus/MenuHerramientas'\r\nimport ItemMenuHerramienta from '../menus/ItemMenuHerramienta'\r\nimport TablaNormal from '../tables/TableNormal'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport LocalPrintshopIcon from '@material-ui/icons/LocalPrintshop';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../../utils/funtions';\r\n\r\n//dialogs\r\nimport setSnackBars from '../../plugins/setSnackBars';\r\nimport ReturnTextTable from '../tables/ReturnTextTable';\r\nimport Search from '../Search';\r\n\r\nimport { CircularProgress, Chip, Avatar } from '@material-ui/core';\r\n\r\nimport ReactToPrint from \"react-to-print\";\r\nimport colors from '../../../utils/colors';\r\nimport ErrorEstado from '../../plugins/plugins/ErrorEstado';\r\n\r\nimport ModalContainerNormal from '../../modals_container/ModalContainerNormal';\r\nimport EmitirFacturaModal from '../../plugins/EmitirFacturaModal';\r\n\r\nclass HistorialVentas_01 extends Component {\r\n\r\n    state = {\r\n        listaVentas: [],\r\n        estadoTabla: 'cargando',\r\n        rowslistaVentas: [\r\n            { id: 'accions', numeric: false, disablePadding: true, label: '' },\r\n            { id: 'factura_emitida', numeric: false, disablePadding: true, label: 'Estado' },\r\n            { id: 'cliente', numeric: true, disablePadding: false, label: 'Cliente' },\r\n            { id: 'productos', numeric: true, disablePadding: false, label: 'Productos' },\r\n            { id: 'tipo_pago', numeric: true, disablePadding: false, label: 'Tipo de pago' },\r\n            { id: 'subtotal', numeric: true, disablePadding: false, label: 'SubTotal' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Precio Iva' },\r\n            { id: 'descuento', numeric: true, disablePadding: false, label: 'Descuento' },\r\n            { id: 'dinero_resibido', numeric: true, disablePadding: false, label: 'Dinero recibido' },\r\n            { id: 'cambio', numeric: true, disablePadding: false, label: 'Cambio/Vuelto' },\r\n            { id: 'acreditado', numeric: true, disablePadding: false, label: 'Dinero acreditado' },\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'observacion', numeric: true, disablePadding: false, label: 'Observación' },\r\n            { id: 'empleado', numeric: true, disablePadding: false, label: 'Empleado' },\r\n            { id: 'fecha_venta', numeric: true, disablePadding: false, label: 'Fecha de venta' },\r\n            { id: 'hora_venta', numeric: true, disablePadding: false, label: 'Hora de venta' },\r\n        ],\r\n        estadoTabla: 'llena',\r\n\r\n        //modals\r\n        openModalFullScreen: false,\r\n        estadoModalSimple: false,\r\n        estadoModalDeleteActivarDesactivar: 'eliminar',\r\n        //item Selecionado\r\n        itemsSeleccionados: [],\r\n        //uid de usuario\r\n        usuarioUID: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        var fehca = funtions.obtenerFechaActual().toString().split('-')\r\n        var fechaNueva = `${fehca[2]}-${fehca[1]}-${fehca[0]}`\r\n        this.setState({\r\n            fechaActual: funtions.obtenerFechaActual()\r\n        })\r\n        this.obteberCajaSeleccionada()\r\n    }\r\n\r\n    obtenerDataBaseDatos = (fecha) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var ventasRef = db.ref('users/' + user.uid + '/ventas').orderByChild('fecha_venta').equalTo(fecha)\r\n                var vetasReDevueltas = db.ref('users/' + user.uid + '/lista_ventas/ventas_devueltas').orderByChild('fecha_venta').equalTo(fecha)\r\n                ventasRef.on('value', (snapshot) => {\r\n                    vetasReDevueltas.on('value', (snap) => {\r\n                        if (snapshot.val() || snap.val()) {\r\n                            this.setState({\r\n                                listaVentas: [],\r\n                                listaVentasTemporal: [],\r\n                                estadoTabla: 'cargando'\r\n                            })\r\n                            var listaVentas = funtions.snapshotToArray(snapshot)\r\n                            var listaVentasDevueltas = funtions.snapshotToArray(snap)\r\n                            var listaFinal = listaVentas.concat(listaVentasDevueltas)\r\n                            var filterList = listaFinal.sort((a, b) => {\r\n                                a = new Date(a.order);\r\n                                b = new Date(b.order);\r\n                                return a > b ? -1 : a < b ? 1 : 0;\r\n                            })\r\n                            this.setState({\r\n                                listaVentas: filterList,\r\n                                listaVentasTemporal: filterList,\r\n                                estadoTabla: 'llena'\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                listaVentas: [],\r\n                                listaVentasTemporal: [],\r\n                                estadoTabla: 'vacio'\r\n                            })\r\n                        }\r\n                    })\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    obteberCajaSeleccionada = () => {\r\n        var db = firebase.database();\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n                operacionVentaRefCaja.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                        if (caja != null) {\r\n                            this.setState({\r\n                                cajaSeleccionada: caja,\r\n                                estadoCaja: caja.estado,\r\n                            })\r\n                            this.obtenerDataBaseDatos(this.state.fechaActual)\r\n                        } else {\r\n                            this.setState({\r\n                                cajaSeleccionada: null,\r\n                                estadoCaja: false,\r\n                                estadoTabla: 'vacio'\r\n                            })\r\n                        }\r\n                    } else {\r\n                        this.setState({\r\n                            cajaSeleccionada: null,\r\n                            estadoCaja: false,\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    cambiarListaPorFecha = fecha => {\r\n        this.setState({\r\n            fechaActual: fecha,\r\n            estadoTabla: 'cargando'\r\n        })\r\n        setTimeout(() => {\r\n            this.obtenerDataBaseDatos(fecha)\r\n        }, 200)\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n\r\n        if (item.id === 'accions') {\r\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                {\r\n                    n.urlpdf != 'genererando' &&\r\n                    <Tooltip title=\"Descargar pdf\">\r\n                        <IconButton onClick={() => {\r\n                            window.open(\r\n                                n.urlpdf,\r\n                                '_blank'\r\n                            );\r\n                        }}\r\n                        >\r\n                            <PictureAsPdfIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                {\r\n                    n.urlpdf === 'genererando' &&\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        <div style={{ color: '#42A5F5', display: 'flex', alignItems: 'center' }}>Pdf</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'cliente') {\r\n            return n.cliente === 'Consumidor Final' ? n.cliente : <>\r\n                <ReturnTextTable\r\n                    referencia=\"clientes\"\r\n                    codigo={n.cliente.codigo}\r\n                    datoTraido=\"nombre\"\r\n                    estado={true}\r\n                />\r\n            </>\r\n        }\r\n\r\n        if (item.id === 'productos') {\r\n            return n.productos.map(item => {\r\n                return <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                width: 'max-content',\r\n                                paddingLeft: 10,\r\n                                paddingRight: 10,\r\n                                paddingTop: 0,\r\n                                paddingBottom: 0,\r\n                                height: 25\r\n                            }}>\r\n                                {item.cantidad}\r\n                            </Avatar>\r\n                        }\r\n                        label={\r\n                            <ReturnTextTable\r\n                                referencia=\"productos\"\r\n                                codigo={item.codigo}\r\n                                datoTraido=\"descripcion_producto\"\r\n                                estado={true}\r\n                            />\r\n                        }\r\n                        clickable\r\n                        color=\"inherit\"\r\n                        style={{ margin: 1, height: 25, background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                </div>\r\n            })\r\n        }\r\n\r\n        if (item.id === 'subtotal') {\r\n            return <div style={{ width: 'max-content' }}>{n.subtotal}</div>\r\n        }\r\n\r\n        if (item.id === 'tipo_pago') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {\r\n                    n.tipo_pago === 'cheque' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkRed300()\r\n                            }}>\r\n                                <SubtitlesIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con cheque'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'transferencia' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkDeepPurple300()\r\n                            }}>\r\n                                <SwapHorizIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Por transferencia bancaria'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'efectivo' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDark()\r\n                            }}>\r\n                                <AttachMoneyIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'En efectivo'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkAmber300()\r\n                            }}>\r\n                                <LocalAtmIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'A crédito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkGreen300()\r\n                            }}>\r\n                                <CreditCardIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de crédito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-debito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkBlue300()\r\n                            }}>\r\n                                <PaymentIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de débito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'factura_emitida') {\r\n            return n.cliente === 'Consumidor Final' ?\r\n                <div style={{ display: 'flex', flexDirection: 'row', width: 'max-content' }}>\r\n                    <div style={{ display: 'flex', alignItems: 'center' }}>Consumidor Final</div>\r\n                </div>\r\n                :\r\n                <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                    {\r\n                        n.factura_emitida === 'emitida' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <DoneAllIcon style={{ color: '#00c853' }} fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <div style={{ color: '#00c853', display: 'flex', alignItems: 'center' }}>Emitida</div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'devuelta' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <div style={{ color: colors.getColorPrymaryRed300(), display: 'flex', alignItems: 'center' }}>cancelada</div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'no_emitida' &&\r\n                        <Tooltip title=\"Emitir Factura\">\r\n                            <IconButton onClick={() => {\r\n                                this.setState({\r\n                                    estadoacciones: 'emitir_factura'\r\n                                })\r\n                                setTimeout(() => {\r\n                                    this.comprobarUsuario(n)\r\n                                }, 100)\r\n                            }}>\r\n                                <InputIcon color='primary' fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'reenviar' &&\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>Reenviar</div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'pendiente' &&\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>Pendiente</div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'error' &&\r\n                        <div style={{ display: 'flex', alignItems: 'center' }}>Error al emitir</div>\r\n                    }\r\n                </div >\r\n        }\r\n\r\n        if (item.id === 'total') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                <Chip\r\n                    label={<div style={{ color: colors.getColorWhite() }}>{n.total}</div>}\r\n                    clickable\r\n                    style={{ background: colors.getColorPrymary() }}\r\n                />\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'iva') {\r\n            return <div style={{ width: 'max-content' }}>{n.iva}</div>\r\n        }\r\n\r\n        if (item.id === 'observacion') {\r\n            return <div style={{ width: 'max-content' }}>{n.observacion}</div>\r\n        }\r\n\r\n        if (item.id === 'dinero_resibido') {\r\n            return <div style={{ width: 'max-content' }}>{n.dinero_resibido}</div>\r\n        }\r\n\r\n        if (item.id === 'cambio') {\r\n            return <div style={{ width: 'max-content' }}>{n.cambio}</div>\r\n        }\r\n\r\n        if (item.id === 'acreditado') {\r\n            return <div style={{ width: 'max-content' }}>{n.valor_acreditado}</div>\r\n        }\r\n\r\n        if (item.id === 'fecha_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.fecha_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'hora_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.hora_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'descuento') {\r\n            return <div style={{ width: 'max-content' }}>{n.descuento}</div>\r\n        }\r\n\r\n        if (item.id === 'empleado') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.empleado}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getColorActivadoDesactivado = (estado, texto) =>\r\n        estado === false ?\r\n            <div style={{ color: 'rgba(0,0,0,0.5)' }}>\r\n                {texto}\r\n            </div>\r\n            : texto\r\n\r\n    comprobarUsuario = (item) => {\r\n        this.setState({\r\n            codigoEmitirFactura: item.codigo,\r\n            estadoModalEmitirFactura: true,\r\n        })\r\n    }\r\n\r\n    recuperarJsonFactura = codigo => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/facturas_ventas/' + codigo);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.postSet(user.uid, snapshot.val(), codigo)\r\n                        var venteRef = db.ref('users/' + user.uid + '/ventas/' + codigo);\r\n                        venteRef.update({\r\n                            factura_emitida: 'pendiente'\r\n                        })\r\n                        //setSnackBars.openSnack('success', 'rootSnackBar', 'Factura emitida con exito', 2000)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    postSet = async (uidUser, jsonData, codigo) => {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigo,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n    }\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaVentas: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaVentasTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaVentas: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MenuHerramientas>\r\n\r\n                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            type=\"date\"\r\n                            defaultValue={funtions.obtenerFechaActual()}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={e => this.cambiarListaPorFecha(e.target.value)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div style={{ flex: 0.95 }}></div>\r\n\r\n                    <Search\r\n                        id='buscar-cliente-clientes'\r\n                        textoSearch=\"Buscar...\"\r\n                        textoTooltip=\"Buscar venta\"\r\n                        handleSearch={this.handleSearch}\r\n                    />\r\n                </MenuHerramientas>\r\n\r\n                <Divider />\r\n\r\n                <TablaNormal\r\n                    textoTitleP=\"Ventas Canceladas\"\r\n                    textoTitleS=\"Venta\"\r\n                    selectedItems={true}\r\n                    toolbar={false}\r\n                    notTab={false}\r\n                    data={this.state.listaVentas}\r\n                    rows={this.state.rowslistaVentas}\r\n                    handleGetData={this.handleGetData}\r\n                    estadoTabla={this.state.estadoTabla}\r\n                    itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                />\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalEmitirFactura}\r\n                    handleClose={() => this.setState({ estadoModalEmitirFactura: false })}\r\n                >\r\n                    <EmitirFacturaModal\r\n                        handleClose={() => this.setState({ estadoModalEmitirFactura: false })}\r\n                        handleEmitir={() => {\r\n                            this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                            this.setState({ estadoModalEmitirFactura: false })\r\n                        }}\r\n                    />\r\n                </ModalContainerNormal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HistorialVentas_01;","import React, { Component } from 'react';\r\nimport MenuHerramientas from '../menus/MenuHerramientas'\r\nimport ItemMenuHerramienta from '../menus/ItemMenuHerramienta'\r\nimport TablaNormal from '../tables/TableNormal'\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport LocalPrintshopIcon from '@material-ui/icons/LocalPrintshop';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../../utils/funtions';\r\n\r\n//dialogs\r\nimport setSnackBars from '../../plugins/setSnackBars';\r\nimport ReturnTextTable from '../tables/ReturnTextTable';\r\nimport Search from '../Search';\r\n\r\nimport { CircularProgress, Chip, Avatar } from '@material-ui/core';\r\n\r\nimport ReactToPrint from \"react-to-print\";\r\nimport colors from '../../../utils/colors';\r\nimport ErrorEstado from '../../plugins/plugins/ErrorEstado';\r\n\r\nclass VentasDevueltas_01 extends Component {\r\n\r\n    state = {\r\n        listaVentas: [],\r\n        rowslistaVentas: [\r\n            { id: 'accions', numeric: false, disablePadding: true, label: '' },\r\n            { id: 'factura_emitida', numeric: false, disablePadding: true, label: 'Estado' },\r\n            { id: 'cliente', numeric: true, disablePadding: false, label: 'Cliente' },\r\n            { id: 'productos', numeric: true, disablePadding: false, label: 'Productos' },\r\n            { id: 'tipo_pago', numeric: true, disablePadding: false, label: 'Tipo de pago' },\r\n            { id: 'subtotal', numeric: true, disablePadding: false, label: 'SubTotal' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Precio Iva' },\r\n            { id: 'descuento', numeric: true, disablePadding: false, label: 'Descuento' },\r\n            { id: 'dinero_resibido', numeric: true, disablePadding: false, label: 'Dinero recibido' },\r\n            { id: 'cambio', numeric: true, disablePadding: false, label: 'Cambio/Vuelto' },\r\n            { id: 'acreditado', numeric: true, disablePadding: false, label: 'Dinero acreditado' },\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'observacion', numeric: true, disablePadding: false, label: 'Observación' },\r\n            { id: 'empleado', numeric: true, disablePadding: false, label: 'Empleado' },\r\n            { id: 'fecha_venta', numeric: true, disablePadding: false, label: 'Fecha de venta' },\r\n            { id: 'hora_venta', numeric: true, disablePadding: false, label: 'Hora de venta' },\r\n        ],\r\n        estadoTabla: 'llena',\r\n\r\n        //modals\r\n        openModalFullScreen: false,\r\n        estadoModalSimple: false,\r\n        estadoModalDeleteActivarDesactivar: 'eliminar',\r\n        //item Selecionado\r\n        itemsSeleccionados: [],\r\n        //uid de usuario\r\n        usuarioUID: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            fechaActual: funtions.obtenerFechaActual()\r\n        })\r\n        //setTimeout(() => { this.obtenerDataBaseDatos() }, 100)\r\n        this.obteberCajaSeleccionada()\r\n        this.obtenerPermisosusuarios()\r\n        this.comprobarUsuario()\r\n\r\n    }\r\n\r\n    obtenerDataBaseDatos = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/lista_ventas/ventas_devueltas').orderByChild('caja').equalTo(this.state.cajaSeleccionada.codigo)\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaVentas: [],\r\n                            listaVentasTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var filterList = lista.sort((a, b) => {\r\n                            a = new Date(a.order);\r\n                            b = new Date(b.order);\r\n                            return a > b ? -1 : a < b ? 1 : 0;\r\n                        })\r\n                        this.setState({\r\n                            listaVentas: filterList,\r\n                            listaVentasTemporal: filterList,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaVentas: [],\r\n                            listaVentasTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    obteberCajaSeleccionada = () => {\r\n        var db = firebase.database();\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n                operacionVentaRefCaja.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                        if (caja != null) {\r\n                            this.setState({\r\n                                cajaSeleccionada: caja,\r\n                                estadoCaja: caja.estado,\r\n                            })\r\n                            this.obtenerDataBaseDatos()\r\n                        } else {\r\n                            this.setState({\r\n                                cajaSeleccionada: null,\r\n                                estadoCaja: false,\r\n                                estadoTabla: 'vacio'\r\n                            })\r\n                        }\r\n                    } else {\r\n                        this.setState({\r\n                            cajaSeleccionada: null,\r\n                            estadoCaja: false,\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    obtenerPermisosusuarios = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var usuariosRef = db.ref(`users/${user.uid}/usuarios/${this.props.usuario.code}`)\r\n                usuariosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        if (snapshot.val().privilegios.ventas === true) {\r\n                            this.setState({\r\n                                estadoPermisos: true\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                estadoPermisos: false\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    comprobarUsuario = (item) => {\r\n        if (this.props.usuario.tipo_usuario === 'administrador') {\r\n            if (this.state.estadoacciones === 'devolver_venta') {\r\n                this.setState({\r\n                    codigoEmitirFactura: item.codigo,\r\n                    estadoModalCancelarVenta: true,\r\n                })\r\n            } else if (this.state.estadoacciones === 'emitir_factura') {\r\n                this.setState({\r\n                    codigoEmitirFactura: item.codigo,\r\n                    estadoModalEmitirFactura: true,\r\n                })\r\n            } else {\r\n                this.setState({ itemSeleccionado: item })\r\n                this.setState({ openModalNewCliente: true })\r\n            }\r\n        } else {\r\n            if (this.state.estadoacciones === 'devolver_venta') {\r\n                if (item.empleado === this.props.usuario.code) {\r\n                    this.setState({\r\n                        codigoEmitirFactura: item.codigo,\r\n                        estadoModalCancelarVenta: true,\r\n                    })\r\n                } else {\r\n                    setSnackBars.openSnack('warning', 'rootSnackBar', `Usted ${this.props.usuario.nombre} no registro esta Venta`, 2000)\r\n                }\r\n            } else if (this.state.estadoacciones === 'emitir_factura') {\r\n                if (item.empleado === this.props.usuario.code) {\r\n                    this.setState({\r\n                        codigoEmitirFactura: item.codigo,\r\n                        estadoModalEmitirFactura: true,\r\n                    })\r\n                } else {\r\n                    setSnackBars.openSnack('warning', 'rootSnackBar', `Usted ${this.props.usuario.nombre} no registro esta Venta`, 2000)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n\r\n        if (item.id === 'accions') {\r\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                {\r\n                    n.urlpdf != 'genererando' &&\r\n                    <Tooltip title=\"Descargar pdf\">\r\n                        <IconButton onClick={() => {\r\n                            window.open(\r\n                                n.urlpdf,\r\n                                '_blank'\r\n                            );\r\n                        }}\r\n                        >\r\n                            <PictureAsPdfIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                {\r\n                    n.urlpdf === 'genererando' &&\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        <div style={{ color: '#42A5F5', display: 'flex', alignItems: 'center' }}>Pdf</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'cliente') {\r\n            return n.cliente === 'Consumidor Final' ? n.cliente : <>\r\n                <ReturnTextTable\r\n                    referencia=\"clientes\"\r\n                    codigo={n.cliente.codigo}\r\n                    datoTraido=\"nombre\"\r\n                    estado={true}\r\n                />\r\n            </>\r\n        }\r\n\r\n        if (item.id === 'productos') {\r\n            return n.productos.map(item => {\r\n                return <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                width: 'max-content',\r\n                                paddingLeft: 10,\r\n                                paddingRight: 10,\r\n                                paddingTop: 0,\r\n                                paddingBottom: 0,\r\n                                height: 25\r\n                            }}>\r\n                                {item.cantidad}\r\n                            </Avatar>\r\n                        }\r\n                        label={\r\n                            <ReturnTextTable\r\n                                referencia=\"productos\"\r\n                                codigo={item.codigo}\r\n                                datoTraido=\"descripcion_producto\"\r\n                                estado={true}\r\n                            />\r\n                        }\r\n                        clickable\r\n                        color=\"inherit\"\r\n                        style={{ margin: 1, height: 25, background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                </div>\r\n            })\r\n        }\r\n\r\n        if (item.id === 'subtotal') {\r\n            return <div style={{ width: 'max-content' }}>{n.subtotal}</div>\r\n        }\r\n\r\n        if (item.id === 'tipo_pago') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {\r\n                    n.tipo_pago === 'cheque' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkRed300()\r\n                            }}>\r\n                                <SubtitlesIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con cheque'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'transferencia' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkDeepPurple300()\r\n                            }}>\r\n                                <SwapHorizIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Por transferencia bancaria'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'efectivo' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDark()\r\n                            }}>\r\n                                <AttachMoneyIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'En efectivo'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkAmber300()\r\n                            }}>\r\n                                <LocalAtmIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'A crédito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkGreen300()\r\n                            }}>\r\n                                <CreditCardIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de crédito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-debito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkBlue300()\r\n                            }}>\r\n                                <PaymentIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de débito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'factura_emitida') {\r\n            return n.cliente === 'Consumidor Final' ?\r\n                <div style={{ display: 'flex', flexDirection: 'row', width: 'max-content' }}>\r\n                    <Tooltip title=\"Devolver Venta\">\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    estadoacciones: 'devolver_venta'\r\n                                })\r\n                                setTimeout(() => {\r\n                                    this.comprobarUsuario(n)\r\n                                }, 100)\r\n                            }}>\r\n                            <CloseIcon style={{ color: '#EF5350' }} fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <IconButton disabled>\r\n                        <DoneIcon />\r\n                    </IconButton>\r\n                    <div style={{ display: 'flex', alignItems: 'center' }}>Consumidor Final</div>\r\n                </div>\r\n                :\r\n                <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                    {\r\n                        n.factura_emitida === 'devuelta' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <div style={{ color: colors.getColorPrymaryRed300(), display: 'flex', alignItems: 'center' }}>cancelada</div>\r\n                        </div>\r\n                    }\r\n                </div >\r\n        }\r\n\r\n        if (item.id === 'total') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                <Chip\r\n                    label={<div style={{ color: colors.getColorWhite() }}>{n.total}</div>}\r\n                    clickable\r\n                    style={{ background: colors.getColorPrymary() }}\r\n                />\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'iva') {\r\n            return <div style={{ width: 'max-content' }}>{n.iva}</div>\r\n        }\r\n\r\n        if (item.id === 'observacion') {\r\n            return <div style={{ width: 'max-content' }}>{n.observacion}</div>\r\n        }\r\n\r\n        if (item.id === 'dinero_resibido') {\r\n            return <div style={{ width: 'max-content' }}>{n.dinero_resibido}</div>\r\n        }\r\n\r\n        if (item.id === 'cambio') {\r\n            return <div style={{ width: 'max-content' }}>{n.cambio}</div>\r\n        }\r\n\r\n        if (item.id === 'acreditado') {\r\n            return <div style={{ width: 'max-content' }}>{n.valor_acreditado}</div>\r\n        }\r\n\r\n        if (item.id === 'fecha_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.fecha_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'hora_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.hora_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'descuento') {\r\n            return <div style={{ width: 'max-content' }}>{n.descuento}</div>\r\n        }\r\n\r\n        if (item.id === 'empleado') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.empleado}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getColorActivadoDesactivado = (estado, texto) =>\r\n        estado === false ?\r\n            <div style={{ color: 'rgba(0,0,0,0.5)' }}>\r\n                {texto}\r\n            </div>\r\n            : texto\r\n\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaVentas: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaVentasTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaVentas: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TablaNormal\r\n                    textoTitleP=\"Ventas Canceladas\"\r\n                    textoTitleS=\"Venta\"\r\n                    selectedItems={true}\r\n                    toolbar={false}\r\n                    notTab={true}\r\n                    data={this.state.listaVentas}\r\n                    rows={this.state.rowslistaVentas}\r\n                    handleGetData={this.handleGetData}\r\n                    estadoTabla={this.state.estadoTabla}\r\n                    itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VentasDevueltas_01;","import React, { Component } from 'react';\r\nimport Layout from '../../containers/Layout';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SectionFactura from '../SectionFactura';\r\nimport SectionContentFactura from '../SectionContentFactura';\r\nimport MenuHerramientas from '../menus/MenuHerramientas';\r\nimport Search from '../Search';\r\nimport TablaNormal from '../tables/TableNormal';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ItemMenuHerramienta from '../menus/ItemMenuHerramienta';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MonetizationOn from '@material-ui/icons/MonetizationOn';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport LocalPrintshopIcon from '@material-ui/icons/LocalPrintshop';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport ReturnTextTable from '../tables/ReturnTextTable';\r\nimport FullScreenDialog from '../FullScreenDialog';\r\nimport NuevaVenta from '../../plugins/nueva_venta';\r\nimport funtions from '../../../utils/funtions';\r\nimport ModalCompraProductos from '../../modals_container/ModalCompraProductos';\r\nimport setSnackBars from '../../plugins/setSnackBars';\r\nimport ModalContainerNormal from '../../modals_container/ModalContainerNormal';\r\nimport EmitirFacturaModal from '../../plugins/EmitirFacturaModal';\r\nimport ModalCancelarVenta from '../../modals_container/ventas/ModalCancelarVenta';\r\nimport ModalEditarVenta from '../../modals_container/ventas/ModalEditarVenta';\r\nimport { CircularProgress, Chip, Avatar } from '@material-ui/core';\r\n\r\nimport ReactToPrint from \"react-to-print\";\r\nimport ResivoVenta from '../../plugins/plantillas/resivo_venta';\r\nimport ContainerPlantillas from '../../plugins/plantillas/container_plantillas';\r\nimport ModalNewVenta from '../../plugins/ModalNewVenta';\r\nimport colors from '../../../utils/colors';\r\nimport ErrorEstado from '../../plugins/plugins/ErrorEstado';\r\n\r\nimport ViewPDF from '../../plugins/plugins/ViewPDF'\r\n\r\n\r\nclass Ventas_01 extends Component {\r\n\r\n    state = {\r\n\r\n        itemsSeleccionados: [],\r\n        listaVentas: [],\r\n        estadoTabla: 'cargando',\r\n        listaVentasTemporal: [],\r\n\r\n        rowslistaVentas: [\r\n            { id: 'accions', numeric: false, disablePadding: true, label: '' },\r\n            { id: 'factura_emitida', numeric: false, disablePadding: true, label: 'Estado' },\r\n            { id: 'cliente', numeric: true, disablePadding: false, label: 'Cliente' },\r\n            { id: 'productos', numeric: true, disablePadding: false, label: 'Productos' },\r\n            { id: 'tipo_pago', numeric: true, disablePadding: false, label: 'Tipo de pago' },\r\n            { id: 'subtotal', numeric: true, disablePadding: false, label: 'SubTotal' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Precio Iva' },\r\n            { id: 'descuento', numeric: true, disablePadding: false, label: 'Descuento' },\r\n            { id: 'dinero_resibido', numeric: true, disablePadding: false, label: 'Dinero recibido' },\r\n            { id: 'cambio', numeric: true, disablePadding: false, label: 'Cambio/Vuelto' },\r\n            { id: 'acreditado', numeric: true, disablePadding: false, label: 'Dinero acreditado' },\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'observacion', numeric: true, disablePadding: false, label: 'Observación' },\r\n            { id: 'empleado', numeric: true, disablePadding: false, label: 'Empleado' },\r\n            { id: 'fecha_venta', numeric: true, disablePadding: false, label: 'Fecha de venta' },\r\n            { id: 'hora_venta', numeric: true, disablePadding: false, label: 'Hora de venta' },\r\n        ],\r\n        //usuario\r\n        usuario: null,\r\n        // modals\r\n        openModalNewVenta: false,\r\n        estadoModalSimpleCompraProductos: false,\r\n        estadoModalEmitirFactura: false,\r\n        estadoModalCancelarVenta: false,\r\n        estadoModalEditarVenta: false,\r\n        openModalNewVentaFinal: false,\r\n\r\n        //item para editar\r\n        itemEditar: null,\r\n        //fecha actual\r\n\r\n        //permisosUsuarios\r\n\r\n        estadoPermisos: null,\r\n        estadoacciones: '',\r\n        permisoUsuario: null,\r\n        fechaActual: '',\r\n        //estado decaja,\r\n        estadoCaja: false,\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            fechaActual: funtions.obtenerFechaActual()\r\n        })\r\n        //setTimeout(() => { this.obtenerDataBaseDatos() }, 100)\r\n        this.obteberCajaSeleccionada()\r\n        this.obtenerPermisosusuarios()\r\n        this.comprobarUsuario()\r\n\r\n    }\r\n\r\n    obtenerDataBaseDatos = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/ventas').orderByChild('caja').equalTo(this.state.cajaSeleccionada.codigo)\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaVentas: [],\r\n                            listaVentasTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var filterList = lista.sort((a, b) => {\r\n                            a = new Date(a.order);\r\n                            b = new Date(b.order);\r\n                            return a > b ? -1 : a < b ? 1 : 0;\r\n                        })\r\n                        this.setState({\r\n                            listaVentas: filterList,\r\n                            listaVentasTemporal: filterList,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaVentas: [],\r\n                            listaVentasTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    obteberCajaSeleccionada = () => {\r\n        var db = firebase.database();\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n                operacionVentaRefCaja.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                        if (caja != null) {\r\n                            this.setState({\r\n                                cajaSeleccionada: caja,\r\n                                estadoCaja: caja.estado,\r\n                            })\r\n                            this.obtenerDataBaseDatos()\r\n                        } else {\r\n                            this.setState({\r\n                                cajaSeleccionada: null,\r\n                                estadoCaja: false,\r\n                                estadoTabla: 'vacio'\r\n                            })\r\n                        }\r\n                    } else {\r\n                        this.setState({\r\n                            cajaSeleccionada: null,\r\n                            estadoCaja: false,\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n\r\n        if (item.id === 'accions') {\r\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                <ReactToPrint\r\n                    ref={el => (this.refEventoImprimir = el)}\r\n                    trigger={() => <></>}\r\n                    content={() => this.refImprimirResivo}\r\n                />\r\n                <Tooltip title=\"Imprimir resivo\">\r\n                    <IconButton onClick={() => {\r\n                        this.enviarToPlantillaData(n)\r\n                    }}\r\n                    >\r\n                        <LocalPrintshopIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                {\r\n                    n.urlpdf != 'genererando' &&\r\n                    <Tooltip title=\"Descargar pdf\">\r\n                        <IconButton onClick={() => {\r\n                            window.open(\r\n                                n.urlpdf,\r\n                                '_blank'\r\n                            );\r\n                        }}\r\n                        >\r\n                            <PictureAsPdfIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                {\r\n                    n.urlpdf === 'genererando' &&\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        <IconButton disabled>\r\n                            <CircularProgress size={20} thickness={5} style={{ color: colors.getColorPrymaryBlue300() }} />\r\n                        </IconButton>\r\n                        <div style={{ color: '#42A5F5', display: 'flex', alignItems: 'center' }}>Pdf...</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'cliente') {\r\n            return n.cliente === 'Consumidor Final' ? n.cliente : <>\r\n                <ReturnTextTable\r\n                    referencia=\"clientes\"\r\n                    codigo={n.cliente.codigo}\r\n                    datoTraido=\"nombre\"\r\n                    estado={true}\r\n                />\r\n            </>\r\n        }\r\n\r\n        if (item.id === 'productos') {\r\n            return n.productos.map(item => {\r\n                return <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                width: 'max-content',\r\n                                paddingLeft: 10,\r\n                                paddingRight: 10,\r\n                                paddingTop: 0,\r\n                                paddingBottom: 0,\r\n                                height: 25\r\n                            }}>\r\n                                {item.cantidad}\r\n                            </Avatar>\r\n                        }\r\n                        label={\r\n                            <ReturnTextTable\r\n                                referencia=\"productos\"\r\n                                codigo={item.codigo}\r\n                                datoTraido=\"descripcion_producto\"\r\n                                estado={true}\r\n                            />\r\n                        }\r\n                        clickable\r\n                        color=\"inherit\"\r\n                        style={{ margin: 1, height: 25, background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                </div>\r\n            })\r\n        }\r\n\r\n        if (item.id === 'subtotal') {\r\n            return <div style={{ width: 'max-content' }}>{n.subtotal}</div>\r\n        }\r\n\r\n        if (item.id === 'tipo_pago') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {\r\n                    n.tipo_pago === 'cheque' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkRed300()\r\n                            }}>\r\n                                <SubtitlesIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con cheque'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'transferencia' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkDeepPurple300()\r\n                            }}>\r\n                                <SwapHorizIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Por transferencia bancaria'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'efectivo' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDark()\r\n                            }}>\r\n                                <AttachMoneyIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'En efectivo'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkAmber300()\r\n                            }}>\r\n                                <LocalAtmIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'A crédito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkGreen300()\r\n                            }}>\r\n                                <CreditCardIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de crédito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-debito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkBlue300()\r\n                            }}>\r\n                                <PaymentIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de débito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'factura_emitida') {\r\n            return n.cliente === 'Consumidor Final' ?\r\n                <div style={{ display: 'flex', flexDirection: 'row', width: 'max-content' }}>\r\n                    <Tooltip title=\"Devolver Venta\">\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    estadoacciones: 'devolver_venta'\r\n                                })\r\n                                setTimeout(() => {\r\n                                    this.comprobarUsuario(n)\r\n                                }, 100)\r\n                            }}>\r\n                            <CloseIcon style={{ color: '#EF5350' }} fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <IconButton disabled>\r\n                        <DoneIcon />\r\n                    </IconButton>\r\n                    <div style={{ display: 'flex', alignItems: 'center' }}>Consumidor Final</div>\r\n                </div>\r\n                :\r\n                <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                    {\r\n                        n.factura_emitida === 'emitida' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <DoneAllIcon style={{ color: '#00c853' }} fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <div style={{ color: '#00c853', display: 'flex', alignItems: 'center' }}>Emitida</div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'no_emitida' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <Tooltip title=\"Devolver Venta\">\r\n                                <IconButton onClick={() => {\r\n                                    this.setState({\r\n                                        estadoacciones: 'devolver_venta'\r\n                                    })\r\n                                    setTimeout(() => {\r\n                                        this.comprobarUsuario(n)\r\n                                    }, 100)\r\n                                }}>\r\n                                    <CloseIcon style={{ color: '#EF5350' }} fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Emitir Factura\">\r\n                                <IconButton onClick={() => {\r\n                                    this.setState({\r\n                                        estadoacciones: 'emitir_factura'\r\n                                    })\r\n                                    setTimeout(() => {\r\n                                        this.comprobarUsuario(n)\r\n                                    }, 100)\r\n                                    /*  this.setState({\r\n                                         codigoEmitirFactura: n.codigo,\r\n                                         estadoModalEmitirFactura: true,\r\n                                     }) */\r\n                                }}>\r\n                                    <InputIcon color='primary' fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'reenviar' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <Tooltip title=\"Emitir Factura\">\r\n                                <IconButton onClick={() => {\r\n                                    this.setState({\r\n                                        estadoacciones: 'emitir_factura'\r\n                                    })\r\n                                    setTimeout(() => {\r\n                                        this.comprobarUsuario(n)\r\n                                    }, 100)\r\n                                }}>\r\n                                    <InputIcon color='primary' fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'pendiente' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <CircularProgress size={20} thickness={5} style={{ color: '#42A5F5' }} />\r\n                            </IconButton>\r\n                            <div style={{ color: '#42A5F5', display: 'flex', alignItems: 'center' }}>Emitiendo...</div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'error' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <CloseIcon style={{ color: 'red' }} fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <div style={{ color: 'red', display: 'flex', alignItems: 'center' }}>Error de emisión</div>\r\n                        </div>\r\n                    }\r\n                    <ErrorEstado>{n.error_factura_emitida}</ErrorEstado>\r\n                </div >\r\n        }\r\n\r\n        if (item.id === 'total') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                <Chip\r\n                    label={<div style={{ color: colors.getColorWhite() }}>{n.total}</div>}\r\n                    clickable\r\n                    style={{ background: colors.getColorPrymary() }}\r\n                />\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'iva') {\r\n            return <div style={{ width: 'max-content' }}>{n.iva}</div>\r\n        }\r\n\r\n        if (item.id === 'observacion') {\r\n            return <div style={{ width: 'max-content' }}>{n.observacion}</div>\r\n        }\r\n\r\n        if (item.id === 'dinero_resibido') {\r\n            return <div style={{ width: 'max-content' }}>{n.dinero_resibido}</div>\r\n        }\r\n\r\n        if (item.id === 'cambio') {\r\n            return <div style={{ width: 'max-content' }}>{n.cambio}</div>\r\n        }\r\n\r\n        if (item.id === 'acreditado') {\r\n            return <div style={{ width: 'max-content' }}>{n.valor_acreditado}</div>\r\n        }\r\n\r\n        if (item.id === 'fecha_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.fecha_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'hora_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.hora_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'descuento') {\r\n            return <div style={{ width: 'max-content' }}>{n.descuento}</div>\r\n        }\r\n\r\n        if (item.id === 'empleado') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.empleado}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n        }\r\n\r\n    }\r\n\r\n    recuperarJsonFactura = codigo => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/facturas_ventas/' + codigo);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.postSet(user.uid, snapshot.val(), codigo)\r\n                        var venteRef = db.ref('users/' + user.uid + '/ventas/' + codigo);\r\n                        venteRef.update({\r\n                            factura_emitida: 'pendiente'\r\n                        })\r\n                        //setSnackBars.openSnack('success', 'rootSnackBar', 'Factura emitida con exito', 2000)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    postSet = async (uidUser, jsonData, codigo) => {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigo,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n\r\n        /* const content = await rawResponse.json();\r\n        console.log(content) */\r\n    }\r\n\r\n    // actualizar el stock de los productos\r\n    updateDataProductos = codigoVenta => {\r\n        var db = firebase.database();\r\n        var ventaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n\r\n        ventaRef.on('value', (snapshot) => {\r\n            if (snapshot.val()) {\r\n\r\n                operacionVentaRefCaja.once('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n\r\n                        var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n\r\n                        cajaRefValorActual.once('value', (snap) => {\r\n                            if (snap.val()) {\r\n                                if (Number(snap.val().valor_caja) < Number(snapshot.val().total)) {\r\n                                    setSnackBars.openSnack('error', 'rootSnackBar', 'Dinero insuficiente en caja', 2000)\r\n                                } else {\r\n                                    snapshot.val().productos.forEach(element => {\r\n                                        var productoRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + element.codigo)\r\n                                        productoRef.once('value', (snapshot) => {\r\n                                            if (snapshot.val()) {\r\n                                                productoRef.update({\r\n                                                    stock_actual: Number(snapshot.val().stock_actual) + Number(element.cantidad)\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    })\r\n                                    this.setOperacionStock(\r\n                                        snapshot.val().productos,\r\n                                        snapshot.val().cliente,\r\n                                        snapshot.val().dinero_resibido,\r\n                                        snapshot.val().total,\r\n                                        snapshot.val().subtotal,\r\n                                        snapshot.val().descuento,\r\n                                        snapshot.val().cambio,\r\n                                        snapshot.val().tipo_pago,\r\n                                    )\r\n                                    this.setVentaDevuelta(snapshot.val(), snapshot.val().tipo_pago)\r\n                                    this.setVentaCaja(snapshot.val(), snapshot.val().tipo_pago)\r\n                                    setTimeout(() => { this.deleteVenta(snapshot.val().codigo) }, 300)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // venta caja devolver\r\n    setVentaCaja(itemVenta, tipo_pago) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n\r\n                    if(itemVenta.tipo_pago==='efectivo'){\r\n                        var operacionVentaCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/ventas_devueltas/' + itemVenta.codigo)\r\n                        operacionVentaCaja.set(itemVenta)\r\n                    }\r\n\r\n                    var operacionVentaCajaEliminar = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/ventas/' + itemVenta.codigo)\r\n                    operacionVentaCajaEliminar.remove()\r\n\r\n                    var cajaRefValorAcreditado = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n                    cajaRefValorAcreditado.remove()\r\n\r\n                    var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n\r\n                    var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/').orderByChild('cliente/codigo').equalTo(itemVenta.cliente.codigo)\r\n                    cuentaCobrarDeudaQuitarRef.once('value', (snap2) => {\r\n                        if (snap2.val()) {\r\n                            var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + funtions.snapshotToArray(snap2)[0].cliente.codigo + '/lista_deudas/' + itemVenta.codigo)\r\n                            cuentaCobrarDeudaQuitarRef.remove()\r\n\r\n                        }\r\n                    })\r\n\r\n                    if (Number(itemVenta.valor_acreditado) > 0) {\r\n                        var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/').orderByChild('cliente/codigo').equalTo(itemVenta.cliente.codigo)\r\n                        cuentaCobrarDeudaQuitarRef.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + funtions.snapshotToArray(snap2)[0].cliente.codigo + '/lista_acreditados/' + itemVenta.codigo)\r\n                                cuentaCobrarDeudaQuitarRef.remove()\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (itemVenta.tipo_pago === 'efectivo') {\r\n                        cajaRefValorActual.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: Number(Number(snap2.val().valor_caja) - Number(itemVenta.total)).toFixed(2)\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // venta ventas devueltas\r\n    setVentaDevuelta(itemVenta, tipo_pago) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n                    var operacionVentaDevuelta = db.ref('users/' + firebase.auth().currentUser.uid + '/lista_ventas/ventas_devueltas/' + itemVenta.codigo)\r\n                    itemVenta.caja = caja.codigo\r\n                    itemVenta.factura_emitida = 'devuelta'\r\n                    operacionVentaDevuelta.set(itemVenta)\r\n                    if (Number(itemVenta.valor_acreditado) > 0) {\r\n                        var operacionAcreditadoDevueltoCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/ventas_devueltas/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n                        operacionAcreditadoDevueltoCaja.remove()\r\n\r\n                        var operacionValorTotalCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                        operacionValorTotalCaja.once('value', (snap) => {\r\n                            if (snap.val()) {\r\n                                operacionValorTotalCaja.update({\r\n                                    valor_caja: Number(snap.val().valor_caja) - Number(itemVenta.valor_acreditado)\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    //opercacion stock\r\n    setOperacionStock = (listaProductos, cliente, dinero_resibido, total, subtotal, descuento, cambio, tipo_pago) => {\r\n        var codigoStock = funtions.guidGenerator()\r\n        var arrayProductos = []\r\n        listaProductos.forEach(item => {\r\n            arrayProductos.push({\r\n                codigo: item.codigo,\r\n                cantidad: item.cantidad,\r\n                precio_venta_a: item.precio_venta_a\r\n            })\r\n        })\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'devolucion_cliente',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: cliente,\r\n            productos: arrayProductos,\r\n            total_final: `${Number(total).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: '',\r\n            subtotal: `${Number(subtotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: dinero_resibido,\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: cambio,\r\n            acreditado: '0.00',\r\n            order: order + \"\"\r\n        });\r\n    }\r\n\r\n    deleteVenta = codigo => {\r\n        var db = firebase.database();\r\n        var ventRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigo);\r\n        var ventRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigo);\r\n        ventRef.remove()\r\n        setSnackBars.openSnack('success', 'rootSnackBar', 'Venta eliminada con exito', 2000)\r\n    }\r\n\r\n    enviarToPlantillaData = item => {\r\n        const itemFormat = {\r\n            numero_venta: item.codigo,\r\n            tipo_venta: item.tipo_venta,\r\n            productos: item.productos,\r\n            subtotal: item.subtotal,\r\n            iva: item.iva,\r\n            total: item.total,\r\n            descuento: item.descuento,\r\n            fecha_venta: item.fecha_venta,\r\n            hora_venta: item.hora_venta,\r\n            tipo_pago: item.tipo_pago,\r\n            valor_acreditado: item.valor_acreditado,\r\n            fecha_a_pagar: item.fecha_a_pagar,\r\n            numero_tarjeta: item.numero_tarjeta,\r\n            nombre_banco: item.nombre_banco,\r\n        }\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                if (item.tipo_venta === 'factura') {\r\n                    var clienteRef = db.ref('users/' + user.uid + '/clientes/' + item.cliente.codigo);\r\n                    var empresaRef = db.ref('auth_admins/' + user.uid + \"/nombre_comercial\")\r\n                    clienteRef.once('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            itemFormat.nombreCliente = snapshot.val().nombre\r\n                            itemFormat.emailCliente = snapshot.val().email\r\n                            itemFormat.identificacionCliente = snapshot.val().numero_identificacion\r\n                            itemFormat.direccionCliente = snapshot.val().direccion\r\n\r\n                            empresaRef.once('value', (snap) => {\r\n                                if (snap.val()) {\r\n                                    itemFormat.nombreEmpresa = snap.val()\r\n                                    this.setState({\r\n                                        itemFormateadoImprimir: itemFormat\r\n                                    })\r\n                                    this.refEventoImprimir.handlePrint()\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                } else {\r\n                    var empresaRef = db.ref('auth_admins/' + user.uid + \"/nombre_comercial\")\r\n                    empresaRef.once('value', (snap) => {\r\n                        if (snap.val()) {\r\n                            itemFormat.nombreEmpresa = snap.val()\r\n                            this.setState({\r\n                                itemFormateadoImprimir: itemFormat\r\n                            })\r\n                            this.refEventoImprimir.handlePrint()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaVentas: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaVentasTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaVentas: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    obtenerPermisosusuarios = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var usuariosRef = db.ref(`users/${user.uid}/usuarios/${this.props.usuario.code}`)\r\n                usuariosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        if (snapshot.val().privilegios.ventas === true) {\r\n                            this.setState({\r\n                                estadoPermisos: true\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                estadoPermisos: false\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    comprobarUsuario = (item) => {\r\n        if (this.props.usuario.tipo_usuario === 'administrador') {\r\n            if (this.state.estadoacciones === 'devolver_venta') {\r\n                this.setState({\r\n                    codigoEmitirFactura: item.codigo,\r\n                    estadoModalCancelarVenta: true,\r\n                })\r\n            } else if (this.state.estadoacciones === 'emitir_factura') {\r\n                this.setState({\r\n                    codigoEmitirFactura: item.codigo,\r\n                    estadoModalEmitirFactura: true,\r\n                })\r\n            } else {\r\n                this.setState({ itemSeleccionado: item })\r\n                this.setState({ openModalNewCliente: true })\r\n            }\r\n        } else {\r\n            if (this.state.estadoacciones === 'devolver_venta') {\r\n                if (item.empleado === this.props.usuario.code) {\r\n                    this.setState({\r\n                        codigoEmitirFactura: item.codigo,\r\n                        estadoModalCancelarVenta: true,\r\n                    })\r\n                } else {\r\n                    setSnackBars.openSnack('warning', 'rootSnackBar', `Usted ${this.props.usuario.nombre} no registro esta Venta`, 2000)\r\n                }\r\n            } else if (this.state.estadoacciones === 'emitir_factura') {\r\n                if (item.empleado === this.props.usuario.code) {\r\n                    this.setState({\r\n                        codigoEmitirFactura: item.codigo,\r\n                        estadoModalEmitirFactura: true,\r\n                    })\r\n                } else {\r\n                    setSnackBars.openSnack('warning', 'rootSnackBar', `Usted ${this.props.usuario.nombre} no registro esta Venta`, 2000)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                {/*  <ViewPDF\r\n            /> */}\r\n                {\r\n                    this.state.estadoPermisos &&\r\n                    <div>\r\n                        <MenuHerramientas>\r\n                            {\r\n                                Boolean(this.state.estadoCaja) === true ?\r\n\r\n                                    <>\r\n                                        <Tooltip title=\"Estado de caja\">\r\n                                            <IconButton >\r\n                                                <MonetizationOn style={{ color: '#00c853' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <Tooltip title=\"Estado de caja\">\r\n                                            <IconButton >\r\n                                                <MonetizationOn style={{ color: '#EF5350' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                            }\r\n\r\n                            <ItemMenuHerramienta\r\n                                titleButton=\"Nueva Venta\"\r\n                                color=\"primary\"\r\n                                visible={true}\r\n                                onClick={() => {\r\n                                    if (this.state.estadoCaja) {\r\n                                        this.setState({ itemEditar: null })\r\n                                        this.setState({ openModalNewVentaFinal: true })\r\n                                    } else {\r\n                                        setSnackBars.openSnack('error', 'rootSnackBar', 'Abrir caja!', 2000)\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <AddIcon />\r\n                            </ItemMenuHerramienta>\r\n\r\n                            <div style={{ flex: 0.95 }}></div>\r\n\r\n                            <Search\r\n                                id='buscar-cliente-clientes'\r\n                                textoSearch=\"Buscar...\"\r\n                                textoTooltip=\"Buscar venta\"\r\n                                handleSearch={this.handleSearch}\r\n                            />\r\n                        </MenuHerramientas>\r\n\r\n                        <Divider />\r\n\r\n                        <TablaNormal\r\n                            textoTitleP=\"Ventas\"\r\n                            textoTitleS=\"Venta\"\r\n                            selectedItems={true}\r\n                            toolbar={false}\r\n                            notTab={false}\r\n                            data={this.state.listaVentas}\r\n                            rows={this.state.rowslistaVentas}\r\n                            handleGetData={this.handleGetData}\r\n                            estadoTabla={this.state.estadoTabla}\r\n                            itemsSeleccionados={items => {\r\n                                this.setState({ itemsSeleccionados: items })\r\n                            }}\r\n                        />\r\n\r\n                        <FullScreenDialog openModal={this.state.openModalNewVentaFinal}>\r\n                            <ModalNewVenta\r\n                                usuario={this.props.usuario}\r\n                                handleClose={() => this.setState({ openModalNewVentaFinal: false })}\r\n                                item={this.state.itemEditar}\r\n                                cajaSeleccionada={this.state.cajaSeleccionada}\r\n                            >\r\n                            </ModalNewVenta>\r\n                        </FullScreenDialog>\r\n\r\n                        <FullScreenDialog openModal={this.state.estadoModalSimpleCompraProductos}>\r\n                            <ModalCompraProductos\r\n                                handleClose={() => this.setState({\r\n                                    estadoModalSimpleCompraProductos: false,\r\n                                })}\r\n                                usuario={this.props.usuario}\r\n                                tipoAjuste='devolucion_cliente'\r\n                            />\r\n                        </FullScreenDialog>\r\n\r\n                        <ModalContainerNormal\r\n                            open={this.state.estadoModalEmitirFactura}\r\n                            handleClose={() => this.setState({ estadoModalEmitirFactura: false })}\r\n                        >\r\n                            <EmitirFacturaModal\r\n                                handleClose={() => this.setState({ estadoModalEmitirFactura: false })}\r\n                                handleEmitir={() => {\r\n                                    this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                                    this.setState({ estadoModalEmitirFactura: false })\r\n                                }}\r\n                            />\r\n                        </ModalContainerNormal>\r\n\r\n                        <ModalContainerNormal\r\n                            open={this.state.estadoModalCancelarVenta}\r\n                            handleClose={() => this.setState({ estadoModalCancelarVenta: false })}\r\n                        >\r\n                            <ModalCancelarVenta\r\n                                handleClose={() => this.setState({ estadoModalCancelarVenta: false })}\r\n                                handleCancelarVenta={() => {\r\n                                    // this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                                    this.updateDataProductos(this.state.codigoEmitirFactura)\r\n                                    this.setState({ estadoModalCancelarVenta: false })\r\n                                }}\r\n                            />\r\n                        </ModalContainerNormal>\r\n\r\n                        <ModalContainerNormal\r\n                            open={this.state.estadoModalEditarVenta}\r\n                            handleClose={() => this.setState({ estadoModalEditarVenta: false })}\r\n                        >\r\n                            <ModalEditarVenta\r\n                                handleClose={() => this.setState({ estadoModalEditarVenta: false })}\r\n                                handleEditarVenta={() => {\r\n                                    // this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                                    this.setState({ openModalNewVenta: true })\r\n                                    this.setState({ estadoModalEditarVenta: false })\r\n                                }}\r\n                            />\r\n                        </ModalContainerNormal>\r\n\r\n                        <ContainerPlantillas>\r\n                            <ResivoVenta\r\n                                item={this.state.itemFormateadoImprimir}\r\n                                ref={el => (this.refImprimirResivo = el)}\r\n                            />\r\n                        </ContainerPlantillas>\r\n\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoPermisos === false &&\r\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center', height: '80vh' }}>\r\n                        <h3><strong>Usted no tiene permisos para <br />\r\n                            esta seccion comuniquese con el administrador</strong></h3>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoPermisos === null &&\r\n                    <CircularProgress />\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ventas_01","import React, { Component } from 'react';\r\nimport Head from 'next/head'\r\n\r\n//theme\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport theme from '../../components/theme/theme'\r\n\r\n// firebase\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n\r\n//Login\r\nimport Login from '../components/session/Login';\r\nimport LoginContenedor from '../components/session/LoginContenedor';\r\n\r\nconst themeCont = createMuiTheme({ ...theme });\r\n\r\n// Initialize Firebase\r\nif (!firebase.apps.length) {\r\n    var config = {\r\n        apiKey: \"AIzaSyDRr4xJB6BxM5Uu-xHEe7lo_6hVZ_hC8DU\",\r\n        authDomain: \"facbtaapps-2bd69.firebaseapp.com\",\r\n        databaseURL: \"https://facbtaapps-2bd69.firebaseio.com\",\r\n        projectId: \"facbtaapps-2bd69\",\r\n        storageBucket: \"facbtaapps-2bd69.appspot.com\",\r\n        messagingSenderId: \"182776326473\"\r\n    };\r\n\r\n    const firebaseApp = firebase.initializeApp(config, {\r\n        timestampsInSnapshots: true\r\n    });\r\n\r\n    const api = firebaseApp.firestore()\r\n\r\n    const settings = { timestampsInSnapshots: true };\r\n    api.settings(settings)\r\n    /* api.enablePersistence().then(function() {\r\n        // Initialize Cloud Firestore through firebase\r\n        var db = firebase.firestore();\r\n    })\r\n    .catch(function(err) {\r\n        if (err.code == 'failed-precondition') {\r\n            // Multiple tabs open, persistence can only be enabled\r\n            // in one tab at a a time.\r\n            // ...\r\n        } else if (err.code == 'unimplemented') {\r\n            // The current browser does not support all of the\r\n            // features required to enable persistence\r\n            // ...\r\n        }\r\n    }); */\r\n\r\n}\r\n\r\n\r\nclass Layout extends Component {\r\n\r\n    state = {\r\n        sesionState: 'cargando',\r\n        online: true,\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                this.setState({\r\n                    sesionState: 'iniciada'\r\n                })\r\n\r\n            } else {\r\n                this.setState({ sesionState: 'cerrada' })\r\n            }\r\n        });\r\n        if (navigator.onLine) {\r\n            this.setState({\r\n                online: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                online: false\r\n            })\r\n        }\r\n        window.addEventListener('offline', () => this.setState({\r\n            online: false\r\n        }));\r\n        window.addEventListener('online', () => this.setState({\r\n            online: true\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { children, title } = this.props\r\n        return (\r\n            <div>\r\n                <Head>\r\n                    <title>{title}</title>\r\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n                    <html lang=\"es\" />\r\n\r\n                    {/* Material Ui */}\r\n                    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" />\r\n                    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\r\n                </Head>\r\n                {\r\n                    this.state.online === true ?\r\n                        <MuiThemeProvider theme={themeCont}>\r\n                            <div id='rootSnackBar'></div>\r\n\r\n                            {\r\n                                this.state.sesionState === 'iniciada' &&\r\n                                <LoginContenedor title={title} onChangueUserState={usuario => this.props.onChangueUserState(usuario)}>\r\n                                    {\r\n                                        children\r\n                                    }\r\n                                </LoginContenedor>\r\n                            }\r\n\r\n                            {\r\n                                this.state.sesionState === 'cerrada' &&\r\n                                <Login />\r\n                            }\r\n                        </MuiThemeProvider>\r\n                        :\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            width: '100vw',\r\n                            height: '100vh',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                        }}>\r\n                            <div style={{\r\n                                background: 'red',\r\n                                padding: 20,\r\n                                color: 'white',\r\n                                borderRadius: 50\r\n                            }}>\r\n                                Por favor revise su conexión a internet!\r\n                            </div>\r\n                        </div>\r\n                }\r\n                <style jsx global>{`\r\n                    body { \r\n                        margin:0\r\n                    }\r\n                `}</style>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport setSnackBars from '../plugins/setSnackBars';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport AutoCompleteSelectedProducto from '../plugins/AutoCompleteSelectedProducto';\r\nimport TablaNormal from '../components/tables/TableNormal';\r\nimport funtions from '../../utils/funtions';\r\nimport AutoCompleteProveedor from '../plugins/AutoCompleteProveedores';\r\nimport AutoCompleteClientes from '../plugins/AutoCompleteClientes';\r\nimport AutoCompleteCliente from '../plugins/AutoCompleteClientes-New';\r\nimport AutoCompleteProveedores from '../plugins/AutoCompleteRetenciones';\r\nimport ModalPreguntarCaja from './compra_productos/ModalPreguntarCaja';\r\nimport ModalContainerNormal from './ModalContainerNormal';\r\nimport { Chip, Avatar } from '@material-ui/core';\r\nimport colors from '../../utils/colors';\r\nimport ModalPreguntarCajaSalida from './compra_productos/ModalPreguntarCajaSalida';\r\n\r\n\r\nclass ModalCompraProductos extends Component {\r\n\r\n    state = {\r\n        listaSeleccionados: [],\r\n        listaSeleccionadosValoresEditados: [],\r\n        rowslistaProductos: [\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'descripcion_producto', numeric: true, disablePadding: false, label: 'Descripción' },\r\n            { id: 'precio_costo', numeric: true, disablePadding: false, label: 'Precio costo' },\r\n            { id: 'stock_actual', numeric: true, disablePadding: false, label: 'Cantidad' },\r\n            { id: 'accions', numeric: true, disablePadding: false, label: 'Acciones' },\r\n        ],\r\n        //proveedor compra general\r\n        proveedorCompra: '',\r\n        //cliente devolucion\r\n        clienteDevolucion: '',\r\n        //total final de compra\r\n        total_final: 0,\r\n        observacionCompra: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        this.dineroEnCaja()\r\n    }\r\n\r\n    dineroEnCaja = () => {\r\n        var db = firebase.database();\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n                operacionVentaRefCaja.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                        var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                        cajaRefValorActual.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                this.setState({\r\n                                    dinero_en_caja: Number(snap2.val().valor_caja)\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    getNumeroStockActual = (item) => {\r\n        var sumaStock = Number(this.state.listaSeleccionadosValoresEditados.filter(item2 => item2.codigo === item.codigo)[0].stock_nuevo) + Number(item.stock_actual)\r\n        var restaStock = Number(item.stock_actual) - Number(this.state.listaSeleccionadosValoresEditados.filter(item2 => item2.codigo === item.codigo)[0].stock_nuevo)\r\n\r\n        if (this.props.tipoAjuste === 'compra_producto') {\r\n            return sumaStock\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'devolucion_cliente') {\r\n            return sumaStock\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'ajuste_stock_entrada') {\r\n            return sumaStock\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'ajuste_stock_salida') {\r\n            return restaStock\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'devolucion_proveedor') {\r\n            return restaStock\r\n        }\r\n    }\r\n\r\n    updateDataProductos = () => {\r\n        this.state.listaSeleccionados.forEach(item => {\r\n            var db = firebase.database();\r\n            var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + item.codigo);\r\n            productosRef.update({\r\n                stock_actual: this.getNumeroStockActual(item),\r\n                precio_costo: Number(this.state.listaSeleccionadosValoresEditados.filter(item2 => item2.codigo === item.codigo)[0].precio_costo_nuevo)\r\n            });\r\n        })\r\n        this.setOperacionStock(this.state.listaSeleccionadosValoresEditados)\r\n        setSnackBars.openSnack('info', 'rootSnackBar', 'Compra relizada con éxito', 2000)\r\n        this.props.handleClose()\r\n    }\r\n    //recuperar referencias\r\n    obtenerReferenciaTipo = () => {\r\n        if (this.props.tipoAjuste === 'compra_producto') {\r\n            return 'compras_productos'\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'devolucion_cliente') {\r\n            return 'devoluciones_clientes'\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'ajuste_stock_entrada') {\r\n            return 'ajustes_stock_entradas'\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'ajuste_stock_salida') {\r\n            return 'ajustes_stock_salidas'\r\n        }\r\n\r\n        if (this.props.tipoAjuste === 'devolucion_proveedor') {\r\n            return 'devoluciones_proveedores'\r\n        }\r\n    }\r\n    // guardar venta caja\r\n    setOperacionCaja(itemVenta) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n                    var operacionVentaCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/' + this.obtenerReferenciaTipo() + '/' + codigoVentaCaja)\r\n                    operacionVentaCaja.set(itemVenta)\r\n\r\n                    var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                    cajaRefValorActual.once('value', (snap2) => {\r\n                        if (snap2.val()) {\r\n                            var resta = Number(Number(snap2.val().valor_caja) - Number(itemVenta.total_final)).toFixed(2)\r\n                            var suma = Number(Number(itemVenta.total_final) + Number(snap2.val().valor_caja)).toFixed(2)\r\n\r\n                            if (this.props.tipoAjuste === 'compra_producto') {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: `${resta}`\r\n                                })\r\n                            }\r\n                            if (this.props.tipoAjuste === 'devolucion_cliente') {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: `${resta}`\r\n                                })\r\n                            }\r\n                            if (this.props.tipoAjuste === 'ajuste_stock_entrada') {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: `${resta}`\r\n                                })\r\n                            }\r\n                            if (this.props.tipoAjuste === 'ajuste_stock_salida') {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: `${suma}`\r\n                                })\r\n                            }\r\n                            if (this.props.tipoAjuste === 'devolucion_proveedor') {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: `${suma}`\r\n                                })\r\n                            }\r\n\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    finalizarCompra = () => {\r\n        if (this.comprovarFinalizarCompraYDevolucionProveedor()) {\r\n            this.setState({\r\n                estadoModalEnviarCajaEntrada: true\r\n            })\r\n            //this.updateDataProductos()\r\n        }\r\n    }\r\n\r\n    finalizarDevolucionCliente = () => {\r\n        if (this.comprovarDevolucionCliente()) {\r\n            this.setState({\r\n                estadoModalEnviarCajaEntrada: true\r\n            })\r\n            //this.updateDataProductos()\r\n        }\r\n    }\r\n\r\n    finalizarDevolucionProveedor = () => {\r\n        if (this.comprovarFinalizarCompraYDevolucionProveedor()) {\r\n            this.setState({\r\n                estadoModalEnviarCajaSalida: true\r\n            })\r\n            //this.updateDataProductos()\r\n        }\r\n    }\r\n\r\n    finalizarAjusteEntrada = () => {\r\n        if (this.comprovarAjusteEntradaSalida()) {\r\n            this.setState({\r\n                estadoModalEnviarCajaEntrada: true\r\n            })\r\n            //this.updateDataProductos()\r\n        }\r\n    }\r\n\r\n    finalizarAjusteSalida = () => {\r\n        if (this.comprovarAjusteEntradaSalida()) {\r\n            this.setState({\r\n                estadoModalEnviarCajaSalida: true\r\n            })\r\n            //this.updateDataProductos()\r\n        }\r\n    }\r\n\r\n    comprovarAjusteEntradaSalida = () => {\r\n        if (\r\n            this.state.observacionCompra.length > 0 &&\r\n            this.state.listaSeleccionados.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Complete todos los campos', 2000)\r\n            return false\r\n        }\r\n    }\r\n\r\n    comprovarFinalizarCompraYDevolucionProveedor = () => {\r\n        if (\r\n            this.state.proveedorCompra.length > 0 &&\r\n            this.state.listaSeleccionados.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Complete todos los campos', 2000)\r\n            return false\r\n        }\r\n    }\r\n\r\n    comprovarDevolucionCliente = () => {\r\n        if (\r\n            this.state.clienteDevolucion.length > 0 &&\r\n            this.state.listaSeleccionados.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Complete todos los campos', 2000)\r\n            return false\r\n        }\r\n    }\r\n\r\n    setOperacionStock = (listaProductos) => {\r\n        var codigoStock = funtions.guidGenerator()\r\n        var arrayProductos = []\r\n        listaProductos.forEach(item => {\r\n            arrayProductos.push({\r\n                codigo: item.codigo,\r\n                cantidad: item.stock_nuevo,\r\n                precio_costo: item.precio_costo_nuevo\r\n            })\r\n        })\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n\r\n        var itemOperacion = {\r\n            codigo: codigoStock,\r\n            tipo_operacion: this.props.tipoAjuste,\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: this.state.proveedorCompra.length > 0 ? this.state.proveedorCompra : this.state.clienteDevolucion,\r\n            productos: arrayProductos,\r\n            total_final: `${Number(this.state.total_final).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: this.state.observacionCompra,\r\n            subtotal: '0.00',\r\n            descuento: '0.00',\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: '0.00',\r\n            medio_pago: '',\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: '0.00',\r\n            acreditado: '0.00',\r\n            order: order + \"\"\r\n        }\r\n\r\n        operacionStockRef.set(itemOperacion)\r\n\r\n        if (this.props.tipoAjuste === 'compra_producto') {\r\n            if (Boolean(this.state.operarEnCaja)) {\r\n                this.setOperacionCaja(itemOperacion)\r\n            }\r\n        }\r\n        if (this.props.tipoAjuste === 'devolucion_cliente') {\r\n            if (Boolean(this.state.operarEnCaja)) {\r\n                this.setOperacionCaja(itemOperacion)\r\n            }\r\n        }\r\n        if (this.props.tipoAjuste === 'ajuste_stock_entrada') {\r\n            if (Boolean(this.state.operarEnCaja)) {\r\n                this.setOperacionCaja(itemOperacion)\r\n            }\r\n        }\r\n        if (this.props.tipoAjuste === 'ajuste_stock_salida') {\r\n            if (Boolean(this.state.operarEnCaja)) {\r\n                this.setOperacionCaja(itemOperacion)\r\n            }\r\n        }\r\n        if (this.props.tipoAjuste === 'devolucion_proveedor') {\r\n            if (Boolean(this.state.operarEnCaja)) {\r\n                this.setOperacionCaja(itemOperacion)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onChangue = item => {\r\n        var array = this.state.listaSeleccionados\r\n        var arrayValoresSelecionados = this.state.listaSeleccionadosValoresEditados\r\n        var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n        if (array2.length === 0) {\r\n            array.push(item)\r\n            arrayValoresSelecionados.push({\r\n                codigo: item.codigo,\r\n                stock_nuevo: '1',\r\n                precio_costo_nuevo: item.precio_costo\r\n            })\r\n\r\n            this.setState({\r\n                listaSeleccionados: array,\r\n                listaSeleccionadosValoresEditados: arrayValoresSelecionados,\r\n            })\r\n\r\n            this.calcularValorTotal()\r\n        }\r\n    }\r\n\r\n    calcularValorTotal = () => {\r\n        var sumatotal = 0\r\n        this.state.listaSeleccionadosValoresEditados.forEach(item => {\r\n            var stock = this.state.listaSeleccionadosValoresEditados.filter(it => it.codigo === item.codigo)[0].stock_nuevo\r\n            var precio = this.state.listaSeleccionadosValoresEditados.filter(it => it.codigo === item.codigo)[0].precio_costo_nuevo\r\n            sumatotal = sumatotal + (Number(stock) * Number(precio))\r\n        })\r\n        this.setState({\r\n            total_final: sumatotal.toFixed(2)\r\n        })\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n\r\n        if (item.id === 'descripcion_producto') {\r\n            return <div style={{ width: 'max-content' }}>{n.descripcion_producto}</div>\r\n        }\r\n\r\n        if (item.id === 'precio_costo') {\r\n            if (this.props.tipoAjuste === 'compra_producto') {\r\n                return <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row' }}>\r\n                    <div style={{ width: 50, display: 'flex', alignItems: 'center', justifyContent: 'center', paddingRight: 20 }}>\r\n                        {`${Number(n.precio_costo).toFixed(2)}`}\r\n                    </div>\r\n                    <TextField\r\n                        id=\"handle-precio-edit\"\r\n                        margin=\"dense\"\r\n                        type=\"number\"\r\n                        value={Number(this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].precio_costo_nuevo).toFixed(2)}\r\n                        onChange={event => {\r\n                            var array = this.state.listaSeleccionadosValoresEditados\r\n                            array.filter(item => n.codigo === item.codigo)[0].precio_costo_nuevo = event.target.value\r\n                            this.setState({\r\n                                listaSeleccionadosValoresEditados: array\r\n                            })\r\n                            this.calcularValorTotal()\r\n                        }}\r\n                        placeholder='00.00'\r\n                        style={{ width: 80 }}\r\n                    />\r\n                    <div style={{ width: 150, display: 'flex', alignItems: 'center', justifyContent: 'start', paddingLeft: 20 }}>\r\n                        {`Nuevo precio costo ${Number(this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].precio_costo_nuevo).toFixed(2)}`}\r\n                    </div>\r\n                </div >\r\n            } else {\r\n                return n.precio_costo\r\n            }\r\n\r\n        }\r\n\r\n        if (item.id === 'stock_actual') {\r\n            var sumaRetorno = <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row' }}>\r\n                <div style={{ width: 50, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                    {`${n.stock_actual} +`}\r\n                </div>\r\n                <TextField\r\n                    id=\"handle-precio-edit-cantidad\"\r\n                    margin=\"dense\"\r\n                    type=\"number\"\r\n                    value={this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].stock_nuevo}\r\n                    onChange={event => {\r\n                        var array = this.state.listaSeleccionadosValoresEditados\r\n                        array.filter(item => n.codigo === item.codigo)[0].stock_nuevo = event.target.value\r\n                        this.setState({\r\n                            listaSeleccionadosValoresEditados: array\r\n                        })\r\n                        this.calcularValorTotal()\r\n                    }}\r\n                    placeholder='00'\r\n                    style={{ width: 50 }}\r\n                />\r\n                <div style={{ width: 150, display: 'flex', alignItems: 'center', justifyContent: 'start', paddingLeft: 20 }}>\r\n                    {`Nuevo Stock ${Number(this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].stock_nuevo) + Number(n.stock_actual)}`}\r\n                </div>\r\n            </div>\r\n\r\n            var restaRetorno = <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row' }}>\r\n                <div style={{ width: 50, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                    {`${n.stock_actual} -`}\r\n                </div>\r\n                <TextField\r\n                    id=\"handle-precio-edit-cantidad\"\r\n                    margin=\"dense\"\r\n                    type=\"number\"\r\n                    value={this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].stock_nuevo}\r\n                    onChange={event => {\r\n                        var array = this.state.listaSeleccionadosValoresEditados\r\n                        array.filter(item => n.codigo === item.codigo)[0].stock_nuevo = event.target.value\r\n                        this.setState({\r\n                            listaSeleccionadosValoresEditados: array\r\n                        })\r\n                        this.calcularValorTotal()\r\n                    }}\r\n                    placeholder='00'\r\n                    style={{ width: 50 }}\r\n                />\r\n                <div style={{ width: 150, display: 'flex', alignItems: 'center', justifyContent: 'start', paddingLeft: 20 }}>\r\n                    {`Nuevo Stock ${Number(n.stock_actual) - Number(this.state.listaSeleccionadosValoresEditados.filter(item => n.codigo === item.codigo)[0].stock_nuevo)}`}\r\n                </div>\r\n            </div>\r\n\r\n            if (this.props.tipoAjuste === 'compra_producto') {\r\n                return sumaRetorno\r\n            }\r\n\r\n            if (this.props.tipoAjuste === 'devolucion_cliente') {\r\n                return sumaRetorno\r\n            }\r\n\r\n            if (this.props.tipoAjuste === 'ajuste_stock_entrada') {\r\n                return sumaRetorno\r\n            }\r\n\r\n            if (this.props.tipoAjuste === 'ajuste_stock_salida') {\r\n                return restaRetorno\r\n            }\r\n\r\n            if (this.props.tipoAjuste === 'devolucion_proveedor') {\r\n                return restaRetorno\r\n            }\r\n        }\r\n\r\n        if (item.id === 'accions') {\r\n            return <Button variant=\"fab\" mini color=\"secondary\" aria-label=\"quit\" onClick={() => {\r\n                const arraySeleccionados = this.state.listaSeleccionados\r\n                const arraySeleccionadosEditados = this.state.listaSeleccionadosValoresEditados\r\n                var contador1 = 0\r\n                var contador2 = 0\r\n                arraySeleccionados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionados.splice(contador1, 1);\r\n                        this.setState({ listaSeleccionados: arraySeleccionados })\r\n                    }\r\n                    contador1++\r\n                })\r\n                arraySeleccionadosEditados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionadosEditados.splice(contador2, 1);\r\n                        this.setState({ listaSeleccionadosValoresEditados: arraySeleccionadosEditados })\r\n                    }\r\n                    contador2++\r\n                })\r\n                this.calcularValorTotal()\r\n            }}>\r\n                <CloseIcon />\r\n            </Button>\r\n        }\r\n    }\r\n\r\n    handleDescontarCaja = () => {\r\n        var db = firebase.database();\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n                operacionVentaRefCaja.once('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                        var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                        cajaRefValorActual.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: Number(Number(snap2.val().valor_caja) - Number(this.state.total_final)).toFixed(2)\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    handleEvitarCaja = () => {\r\n        this.updateDataProductos()\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleSearch: {\r\n                width: '100%'\r\n            }\r\n        }\r\n\r\n        const { tipoAjuste } = this.props\r\n\r\n        const observacionSinError = <TextField\r\n            id=\"outlined-simple-start-observacion\"\r\n            variant=\"outlined\"\r\n            label=\"Observación\"\r\n            value={this.state.observacionCompra}\r\n            onChange={event => this.setState({ observacionCompra: event.target.value })}\r\n            style={{ marginBottom: 8, marginTop: 16, width: '100%' }}\r\n        />\r\n\r\n        const observacionConError = <TextField\r\n            id=\"outlined-simple-start-observacion\"\r\n            variant=\"outlined\"\r\n            error={this.state.observacionCompra.length > 0 ? false : true}\r\n            label=\"Observación\"\r\n            value={this.state.observacionCompra}\r\n            onChange={event => this.setState({ observacionCompra: event.target.value })}\r\n            style={{ marginBottom: 8, marginTop: 16, width: '100%' }}\r\n        />\r\n\r\n        return (\r\n            <div>\r\n                <div id='rootSnackBarERROR'></div>\r\n                <AppBar style={{\r\n                    position: 'relative',\r\n                }}>\r\n                    <Toolbar>\r\n                        <IconButton color=\"inherit\" onClick={this.props.handleClose} aria-label=\"Close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"title\" color=\"inherit\" style={{ flex: 1, marginLeft: 30 }}>\r\n                            {\r\n                                tipoAjuste === 'compra_producto' &&\r\n                                <div>Compra de Productos</div>\r\n                            }\r\n                            {\r\n                                tipoAjuste === 'devolucion_cliente' &&\r\n                                <div>Devolución del cliente</div>\r\n                            }\r\n                            {\r\n                                tipoAjuste === 'ajuste_stock_entrada' &&\r\n                                <div>Ajuste de stock - Entrada</div>\r\n                            }\r\n                            {\r\n                                tipoAjuste === 'ajuste_stock_salida' &&\r\n                                <div>Ajuste de stock - Salida</div>\r\n                            }\r\n                            {\r\n                                tipoAjuste === 'devolucion_proveedor' &&\r\n                                <div>Devolución al proveedor</div>\r\n                            }\r\n                        </Typography>\r\n                        <div>\r\n                            <Chip\r\n                                avatar={\r\n                                    <Avatar style={{ width: 'max-content', paddingLeft: 16, paddingRight: 16, paddingTop: 5, paddingBottom: 5, background: colors.getColorWhite() }}>\r\n                                        {\r\n                                            this.state.dinero_en_caja != null &&\r\n                                            <>\r\n                                                {\r\n                                                    Number(this.state.dinero_en_caja).toFixed(2)\r\n                                                }\r\n                                            </>\r\n                                        }\r\n                                    </Avatar>\r\n                                }\r\n                                style={{\r\n                                    background: colors.getColorWhite()\r\n                                }}\r\n                                label=\"Dinero en caja\"\r\n                            />\r\n                        </div>\r\n                        {\r\n                            tipoAjuste === 'compra_producto' &&\r\n                            <Button color=\"inherit\" onClick={() => this.finalizarCompra()} >\r\n                                Finalizar Compra\r\n                            </Button>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'devolucion_cliente' &&\r\n                            <Button color=\"inherit\" onClick={() => this.finalizarDevolucionCliente()} >\r\n                                Finalizar Devolución\r\n                            </Button>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'ajuste_stock_entrada' &&\r\n                            <Button color=\"inherit\" onClick={() => this.finalizarAjusteEntrada()} >\r\n                                Finalizar Ajuste\r\n                            </Button>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'ajuste_stock_salida' &&\r\n                            <Button color=\"inherit\" onClick={() => this.finalizarAjusteSalida()} >\r\n                                Finalizar Ajuste\r\n                            </Button>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'devolucion_proveedor' &&\r\n                            <Button color=\"inherit\" onClick={() => this.finalizarDevolucionProveedor()} >\r\n                                Finalizar Devolución\r\n                            </Button>\r\n                        }\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n\r\n                <Grid container spacing={24} style={{ paddingLeft: 24, paddingRight: 24, width: '100vw' }}>\r\n                    <Grid item xs={3}>\r\n                        <AutoCompleteSelectedProducto\r\n                            styleText={styles.styleSearch}\r\n                            onChangue={this.onChangue}\r\n                        >\r\n                        </AutoCompleteSelectedProducto>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        {\r\n                            tipoAjuste === 'compra_producto' &&\r\n                            <AutoCompleteProveedores\r\n                                styleText={styles.styleSearch}\r\n                                dataRef=\"proveedores\"\r\n                                dataRefObject=\"proveedor\"\r\n                                error={this.state.proveedorCompra.length > 0 ? false : true}\r\n                                onChangue={(item) => this.setState({ proveedorCompra: item.codigo })}\r\n                                usuario={this.props.usuario}\r\n                                codigoProveedor=''\r\n                            />\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'devolucion_cliente' &&\r\n                            <AutoCompleteCliente\r\n                                styleText={styles.styleSearch}\r\n                                dataRef=\"clientes\"\r\n                                dataRefObject=\"cliente\"\r\n                                error={this.state.clienteDevolucion.length > 0 ? false : true}\r\n                                onChangue={(item) => this.setState({ clienteDevolucion: item.codigo })}\r\n                                usuario={this.props.usuario}\r\n                            />\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'devolucion_proveedor' &&\r\n                            <AutoCompleteProveedores\r\n                                styleText={styles.styleSearch}\r\n                                dataRef=\"proveedores\"\r\n                                dataRefObject=\"proveedor\"\r\n                                error={this.state.proveedorCompra.length > 0 ? false : true}\r\n                                onChangue={(item) => this.setState({ proveedorCompra: item.codigo })}\r\n                                usuario={this.props.usuario}\r\n                                codigoProveedor=''\r\n                            />\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        {\r\n                            tipoAjuste === 'compra_producto' &&\r\n                            <div>{observacionSinError}</div>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'devolucion_cliente' &&\r\n                            <div>{observacionSinError}</div>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'ajuste_stock_entrada' &&\r\n                            <div>{observacionConError}</div>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'ajuste_stock_salida' &&\r\n                            <div>{observacionConError}</div>\r\n                        }\r\n                        {\r\n                            tipoAjuste === 'devolucion_proveedor' &&\r\n                            <div>{observacionSinError}</div>\r\n                        }\r\n\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <TextField\r\n                            id=\"outlined-simple-start-adornment\"\r\n                            variant=\"filled\"\r\n                            label=\"Total\"\r\n                            value={this.state.total_final}\r\n                            style={{ marginBottom: 8, marginTop: 16, width: '100%' }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Divider />\r\n\r\n                {\r\n                    this.state.listaSeleccionados &&\r\n                    <TablaNormal\r\n                        textoTitleP=\"Productos\"\r\n                        textoTitleS=\"Producto\"\r\n                        selectedItems={true}\r\n                        toolbar={false}\r\n                        data={this.state.listaSeleccionados}\r\n                        rows={this.state.rowslistaProductos}\r\n                        handleGetData={this.handleGetData}\r\n                        estadoTabla={this.state.listaSeleccionados.length > 0 ? 'llena' : 'vacio'}\r\n                        itemsSeleccionados={items => this.setState({ itemsSeleccionados: items })}\r\n                    />\r\n                }\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalEnviarCajaEntrada}\r\n                    handleClose={() => this.setState({ estadoModalEnviarCajaEntrada: false })}\r\n                >\r\n                    <ModalPreguntarCaja\r\n                        handleClose={() => this.setState({ estadoModalEnviarCajaEntrada: false })}\r\n                        handleDescontarCaja={() => {\r\n                            if (this.state.total_final <= this.state.dinero_en_caja) {\r\n                                this.setState({ operarEnCaja: true })\r\n                                setTimeout(() => {\r\n                                    this.updateDataProductos()\r\n                                    this.handleDescontarCaja()\r\n                                }, 100)\r\n                            } else {\r\n                                setSnackBars.openSnack('error', 'rootSnackBar', 'Dinero insuficiente en caja', 2000)\r\n                            }\r\n                        }}\r\n                        handleEvitarCaja={() => {\r\n                                this.setState({ operarEnCaja: false })\r\n                                setTimeout(() => {\r\n                                    this.handleEvitarCaja()\r\n                                }, 100)\r\n                        }}\r\n\r\n                    />\r\n                </ModalContainerNormal>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalEnviarCajaSalida}\r\n                    handleClose={() => this.setState({ estadoModalEnviarCajaSalida: false })}\r\n                >\r\n                    <ModalPreguntarCajaSalida\r\n                        handleClose={() => this.setState({ estadoModalEnviarCajaSalida: false })}\r\n                        handleDescontarCaja={() => {\r\n                            this.setState({ operarEnCaja: true })\r\n                            setTimeout(() => {\r\n                                this.updateDataProductos()\r\n                                this.handleDescontarCaja()\r\n                            }, 100)\r\n                        }}\r\n                        handleEvitarCaja={() => {\r\n                            this.setState({ operarEnCaja: false })\r\n                            setTimeout(() => {\r\n                                this.handleEvitarCaja()\r\n                            }, 100)\r\n                        }}\r\n\r\n                    />\r\n                </ModalContainerNormal>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalCompraProductos;","import React, { Component } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\n\r\nconst ModalContainerNormal = (props) => {\r\n    return (\r\n        <Dialog\r\n            onClose={props.handleClose}\r\n            aria-labelledby=\"simple-dialog\"\r\n            open={props.open}\r\n            style={{ zIndex: 99980 }}\r\n        >\r\n            <div >{props.children}</div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default ModalContainerNormal;","import React, { Component } from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass ModalNewCategoria extends Component {\r\n    render() {\r\n\r\n        const { \r\n            item, \r\n            estadoModal, \r\n            title, \r\n            handleClose, \r\n            valorTexto, \r\n            handleSetValorTexto, \r\n            handleNuevoItem,\r\n            handleActualizarItem,\r\n            handleEliminarItem\r\n        } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    {\r\n                        estadoModal === 'nuevo' &&\r\n                        `Nueva ${title}`\r\n                    }\r\n                    {\r\n                        estadoModal === 'editar' &&\r\n                        `Editar ${item.nombre}`\r\n                    }\r\n                    {\r\n                        estadoModal === 'eliminar' &&\r\n                        `Esta seguro de eliminar \"${item.nombre}\"?`\r\n                    }\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {/* <DialogContentText>\r\n                        To subscribe to this website, please enter your email address here. We will send\r\n                        updates occasionally.\r\n                    </DialogContentText> */}\r\n                    {\r\n                        estadoModal === 'nuevo' || estadoModal === 'editar' ?\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"new-category\"\r\n                                label={title}\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                value={valorTexto}\r\n                                onChange={event => handleSetValorTexto(event.target.value)}\r\n                            />\r\n                            :\r\n                            <div></div>\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancelar\r\n                    </Button>\r\n\r\n                    {\r\n                        estadoModal === 'nuevo' &&\r\n                        <Button onClick={()=>{\r\n                            handleNuevoItem(valorTexto)\r\n                            handleClose()\r\n                        }} color=\"primary\">\r\n                            Guardar\r\n                        </Button>\r\n                    }\r\n                    {\r\n                        estadoModal === 'editar' &&\r\n                        <Button onClick={()=>{\r\n                            handleActualizarItem(valorTexto,item.id)\r\n                            handleClose()\r\n                        }} color=\"primary\">\r\n                            Actualizar\r\n                        </Button>\r\n                    }\r\n                    {\r\n                        estadoModal === 'eliminar' &&\r\n                        <Button onClick={()=>{\r\n                            handleEliminarItem(item.id)\r\n                            handleClose()\r\n                        }} color=\"primary\">\r\n                            Eliminar\r\n                        </Button>\r\n                    }\r\n\r\n                </DialogActions>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalNewCategoria;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\n\r\nimport NumberFormat from 'react-number-format';\r\nimport setSnackBars from '../plugins/setSnackBars';\r\nimport funtions from '../../utils/funtions';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\n\r\nclass ModalNewCliente extends Component {\r\n\r\n    state = {\r\n        codigo: '',\r\n        empresa: '',\r\n        nombre: '',\r\n        fecha_nacimiento: '',\r\n        sexo: '',\r\n        telefono: '',\r\n        celular: '',\r\n        numero_identificacion: '',\r\n        tipo_identificacion: 0,\r\n        direccion: '',\r\n        email: '',\r\n        observacion: '',\r\n        barrio: '',\r\n        ciudad: '',\r\n        limite_deuda: '',\r\n        credito: '',\r\n        estado: '',\r\n        fecha_registro: '',\r\n        hora_registro: '',\r\n        usuario: '',\r\n        order: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        if (this.props.item) {\r\n            this.setState({\r\n                codigo: this.props.item.codigo,\r\n                empresa: this.props.item.empresa,\r\n                nombre: this.props.item.nombre,\r\n                fecha_nacimiento: this.props.item.fecha_nacimiento,\r\n                sexo: this.props.item.sexo,\r\n                telefono: this.props.item.telefono,\r\n                celular: this.props.item.celular,\r\n                numero_identificacion: this.props.item.numero_identificacion,\r\n                tipo_identificacion: this.props.item.tipo_identificacion,\r\n                direccion: this.props.item.direccion,\r\n                email: this.props.item.email,\r\n                observacion: this.props.item.observacion,\r\n                barrio: this.props.item.barrio,\r\n                ciudad: this.props.item.ciudad,\r\n                limite_deuda: this.props.item.limite_deuda,\r\n                credito: this.props.item.credito,\r\n                estado: this.props.item.estado,\r\n                fecha_registro: this.props.item.fecha_registro,\r\n                hora_registro: this.props.item.hora_registro,\r\n                usuario: this.props.item.usuario,\r\n                order: this.props.item.order,\r\n            })\r\n            setTimeout(() => {\r\n                this.comprobarCedula(this.props.item.numero_identificacion)\r\n                if (!this.props.item) {\r\n                    this.comprobarCedulaRegistrada(this.state.numero_identificacion)\r\n                }\r\n                this.comprobarEmail(this.props.item.email)\r\n            }, 100)\r\n        } else {\r\n            this.setState({\r\n                usuario: this.props.usuario.code,\r\n                empresa: false,\r\n                codigo: funtions.guidGenerator(),\r\n                tipo_identificacion: '05',\r\n            })\r\n        }\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    getCheckFormEmpresa = valor => {\r\n        if (valor === true) {\r\n            var ce1 = this.state.celular.length > 0\r\n            var ce2 = this.state.telefono.length > 0\r\n            return ce1 && ce2 ? true : false\r\n        } else {\r\n            var ce1 = this.state.celular.length > 0\r\n            return ce1 ? true : false\r\n        }\r\n    }\r\n\r\n    comprobarEmail = email => {\r\n        if (this.validar_email(email)) {\r\n            this.setState({ comprobacion_texto_email: 'El email es correcto' })\r\n            this.setState({ comprobacion_email: true })\r\n        } else {\r\n            this.setState({ comprobacion_texto_email: 'El email es incorrecto' })\r\n            this.setState({ comprobacion_email: false })\r\n        }\r\n    }\r\n\r\n    validar_email = (email) => {\r\n        var regex = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\n        return regex.test(email) ? true : false;\r\n    }\r\n\r\n    comprobarCedula = (cedula) => {\r\n        if (this.state.tipo_identificacion === '05') {\r\n            //Preguntamos si la cedula consta de 10 digitos\r\n            if (cedula.length == 10) {\r\n\r\n                //Obtenemos el digito de la region que sonlos dos primeros digitos\r\n                var digito_region = cedula.substring(0, 2);\r\n\r\n                //Pregunto si la region existe ecuador se divide en 24 regiones\r\n                if (digito_region >= 1 && digito_region <= 24) {\r\n\r\n                    // Extraigo el ultimo digito\r\n                    var ultimo_digito = cedula.substring(9, 10);\r\n\r\n                    //Agrupo todos los pares y los sumo\r\n                    var pares = parseInt(cedula.substring(1, 2)) + parseInt(cedula.substring(3, 4)) + parseInt(cedula.substring(5, 6)) + parseInt(cedula.substring(7, 8));\r\n\r\n                    //Agrupo los impares, los multiplico por un factor de 2, si la resultante es > que 9 le restamos el 9 a la resultante\r\n                    var numero1 = cedula.substring(0, 1);\r\n                    var numero1 = (numero1 * 2);\r\n                    if (numero1 > 9) { var numero1 = (numero1 - 9); }\r\n\r\n                    var numero3 = cedula.substring(2, 3);\r\n                    var numero3 = (numero3 * 2);\r\n                    if (numero3 > 9) { var numero3 = (numero3 - 9); }\r\n\r\n                    var numero5 = cedula.substring(4, 5);\r\n                    var numero5 = (numero5 * 2);\r\n                    if (numero5 > 9) { var numero5 = (numero5 - 9); }\r\n\r\n                    var numero7 = cedula.substring(6, 7);\r\n                    var numero7 = (numero7 * 2);\r\n                    if (numero7 > 9) { var numero7 = (numero7 - 9); }\r\n\r\n                    var numero9 = cedula.substring(8, 9);\r\n                    var numero9 = (numero9 * 2);\r\n                    if (numero9 > 9) { var numero9 = (numero9 - 9); }\r\n\r\n                    var impares = numero1 + numero3 + numero5 + numero7 + numero9;\r\n\r\n                    //Suma total\r\n                    var suma_total = (pares + impares);\r\n\r\n                    //extraemos el primero digito\r\n                    var primer_digito_suma = String(suma_total).substring(0, 1);\r\n\r\n                    //Obtenemos la decena inmediata\r\n                    var decena = (parseInt(primer_digito_suma) + 1) * 10;\r\n\r\n                    //Obtenemos la resta de la decena inmediata - la suma_total esto nos da el digito validador\r\n                    var digito_validador = decena - suma_total;\r\n\r\n                    //Si el digito validador es = a 10 toma el valor de 0\r\n                    if (digito_validador == 10)\r\n                        var digito_validador = 0;\r\n\r\n                    //Validamos que el digito validador sea igual al de la cedula\r\n                    if (digito_validador == ultimo_digito) {\r\n                        this.setState({ texto_numero_cedula: 'la cedula:' + cedula + ' es correcta' })\r\n                        this.setState({ comprobacion_numero_cedula: true })\r\n                    } else {\r\n                        this.setState({ texto_numero_cedula: 'la cedula:' + cedula + ' es incorrecta' })\r\n                        this.setState({ comprobacion_numero_cedula: false })\r\n                    }\r\n\r\n                } else {\r\n                    // imprimimos en consola si la region no pertenece\r\n                    this.setState({ texto_numero_cedula: 'Esta cedula no pertenece a ninguna region' })\r\n                    this.setState({ comprobacion_numero_cedula: false })\r\n                }\r\n            } else {\r\n                //imprimimos en consola si la cedula tiene mas o menos de 10 digitos\r\n                this.setState({ texto_numero_cedula: 'Esta cedula tiene menos de 10 Digitos' })\r\n                this.setState({ comprobacion_numero_cedula: false })\r\n            }\r\n        }\r\n\r\n        if (this.state.tipo_identificacion === '04') {\r\n            //Preguntamos si la ruc consta de 13 digitos\r\n            if (cedula.length == 13) {\r\n\r\n                //Obtenemos el digito de la region que sonlos dos primeros digitos\r\n                var digito_region = cedula.substring(0, 2);\r\n\r\n                //Pregunto si la region existe ecuador se divide en 24 regiones\r\n                if (digito_region >= 1 && digito_region <= 24) {\r\n\r\n                    // Extraigo el ultimo digito\r\n                    var ultimo_digito = cedula.substring(9, 10);\r\n\r\n                    var tres_ultimos_digitos = cedula.substring(10, 13)\r\n\r\n                    //Agrupo todos los pares y los sumo\r\n                    var pares = parseInt(cedula.substring(1, 2)) + parseInt(cedula.substring(3, 4)) + parseInt(cedula.substring(5, 6)) + parseInt(cedula.substring(7, 8));\r\n\r\n                    //Agrupo los impares, los multiplico por un factor de 2, si la resultante es > que 9 le restamos el 9 a la resultante\r\n                    var numero1 = cedula.substring(0, 1);\r\n                    var numero1 = (numero1 * 2);\r\n                    if (numero1 > 9) { var numero1 = (numero1 - 9); }\r\n\r\n                    var numero3 = cedula.substring(2, 3);\r\n                    var numero3 = (numero3 * 2);\r\n                    if (numero3 > 9) { var numero3 = (numero3 - 9); }\r\n\r\n                    var numero5 = cedula.substring(4, 5);\r\n                    var numero5 = (numero5 * 2);\r\n                    if (numero5 > 9) { var numero5 = (numero5 - 9); }\r\n\r\n                    var numero7 = cedula.substring(6, 7);\r\n                    var numero7 = (numero7 * 2);\r\n                    if (numero7 > 9) { var numero7 = (numero7 - 9); }\r\n\r\n                    var numero9 = cedula.substring(8, 9);\r\n                    var numero9 = (numero9 * 2);\r\n                    if (numero9 > 9) { var numero9 = (numero9 - 9); }\r\n\r\n                    var impares = numero1 + numero3 + numero5 + numero7 + numero9;\r\n\r\n                    //Suma total\r\n                    var suma_total = (pares + impares);\r\n\r\n                    //extraemos el primero digito\r\n                    var primer_digito_suma = String(suma_total).substring(0, 1);\r\n\r\n                    //Obtenemos la decena inmediata\r\n                    var decena = (parseInt(primer_digito_suma) + 1) * 10;\r\n\r\n                    //Obtenemos la resta de la decena inmediata - la suma_total esto nos da el digito validador\r\n                    var digito_validador = decena - suma_total;\r\n\r\n                    //Si el digito validador es = a 10 toma el valor de 0\r\n                    if (digito_validador == 10)\r\n                        var digito_validador = 0;\r\n\r\n                    //Validamos que el digito validador sea igual al de la cedula\r\n                    if (digito_validador == ultimo_digito) {\r\n                        if (tres_ultimos_digitos === '001') {\r\n                            this.setState({ texto_numero_cedula: 'El ruc:' + cedula + ' es correcto' })\r\n                            this.setState({ comprobacion_numero_cedula: true })\r\n                        } else {\r\n                            this.setState({ texto_numero_cedula: 'El ruc:' + cedula + ' es incorrecto' })\r\n                            this.setState({ comprobacion_numero_cedula: false })\r\n                        }\r\n                    } else {\r\n                        this.setState({ texto_numero_cedula: 'El ruc:' + cedula + ' es incorrecto' })\r\n                        this.setState({ comprobacion_numero_cedula: false })\r\n                    }\r\n\r\n                } else {\r\n                    // imprimimos en consola si la region no pertenece\r\n                    this.setState({ texto_numero_cedula: 'Este ruc no pertenece a ninguna region' })\r\n                    this.setState({ comprobacion_numero_cedula: false })\r\n                }\r\n            } else {\r\n                //imprimimos en consola si la cedula tiene mas o menos de 13 digitos\r\n                this.setState({ texto_numero_cedula: 'Esta ruc tiene menos de 13 Digitos' })\r\n                this.setState({ comprobacion_numero_cedula: false })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    checkFormProduc = () => {\r\n\r\n        if (\r\n            this.state.codigo.length > 0 &&\r\n            this.state.nombre.length > 0 &&\r\n            this.state.email.length > 0 &&\r\n            this.state.numero_identificacion.length > 0 &&\r\n            this.state.direccion.length > 0 &&\r\n            this.getCheckFormEmpresa(this.state.empresa) &&\r\n            this.state.comprobacion_numero_cedula &&\r\n            !this.state.identificacionRegistrada\r\n        ) {\r\n            var order = new Date()\r\n            const item = {\r\n                codigo: this.state.codigo,\r\n                empresa: this.state.empresa,\r\n                nombre: this.state.nombre,\r\n                fecha_nacimiento: this.state.fecha_nacimiento,\r\n                sexo: this.state.sexo,\r\n                telefono: this.state.telefono,\r\n                celular: this.state.celular,\r\n                numero_identificacion: this.state.numero_identificacion,\r\n                tipo_identificacion: this.state.tipo_identificacion,\r\n                direccion: this.state.direccion,\r\n                email: this.state.email,\r\n                observacion: this.state.observacion,\r\n                barrio: this.state.barrio,\r\n                ciudad: this.state.ciudad,\r\n                limite_deuda: this.state.limite_deuda,\r\n                credito: this.state.credito,\r\n                estado: this.props.item ? this.state.estado : true,\r\n                fecha_registro: this.props.item ? this.state.fecha_registro : funtions.obtenerFechaActual(),\r\n                hora_registro: this.props.item ? this.state.hora_registro : `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n                usuario: this.props.item ? this.state.usuario : this.props.usuario.code,\r\n                order: this.props.item ? this.state.order : order + \"\",\r\n            }\r\n            if (this.props.item) {\r\n                this.setUpdateProducto(item)\r\n                setSnackBars.openSnack('success', 'rootSnackBar', 'Cliente actualizado correctamente', 2000)\r\n                this.props.handleClose()\r\n\r\n            } else {\r\n                this.setNewProducto(item)\r\n                setSnackBars.openSnack('success', 'rootSnackBar', 'Cliente creado correctamente', 2000)\r\n                this.props.handleClose()\r\n\r\n            }\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBarERROR', 'Ingrese el cliente correctamente', 2000)\r\n        }\r\n    }\r\n\r\n    setNewProducto = (producto) => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/clientes/' + producto.codigo);\r\n        productosRef.set({\r\n            ...producto\r\n        });\r\n    }\r\n\r\n    setUpdateProducto = (producto) => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/clientes/' + producto.codigo);\r\n        productosRef.update({\r\n            ...producto\r\n        });\r\n    }\r\n\r\n    comprobarCedulaRegistrada = cedula => {\r\n        if (cedula.length === 10) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula)\r\n                    var productosRefRuc = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula + '001')\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                        } else {\r\n                            productosRefRuc.on('value', (snapshot) => {\r\n                                if (snapshot.val()) {\r\n                                    this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                                } else {\r\n                                    this.setState({ identificacionRegistrada: false })\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                }\r\n            })\r\n        }\r\n        if (cedula.length === 13) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula)\r\n                    var productosRefRuc = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula.slice(0, -3))\r\n                    productosRefRuc.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                        } else {\r\n                            productosRef.on('value', (snapshot) => {\r\n                                if (snapshot.val()) {\r\n                                    this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                                } else {\r\n                                    this.setState({ identificacionRegistrada: false })\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleText: {\r\n                width: '100%'\r\n            },\r\n            styleAutoComplete: {\r\n                margin: 10,\r\n                width: '96%'\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div id='rootSnackBarERROR'></div>\r\n                <AppBar style={{\r\n                    position: 'relative',\r\n                }}>\r\n                    <Toolbar>\r\n                        <IconButton color=\"inherit\" onClick={this.props.handleClose} aria-label=\"Close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"title\" color=\"inherit\" style={{ flex: 1, marginLeft: 30 }}>\r\n                            {this.props.item ? 'Editar cliente' : 'Nuevo cliente'}\r\n                        </Typography>\r\n                        <Button color=\"inherit\"\r\n                            onClick={this.checkFormProduc}\r\n                        >\r\n                            Guardar\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <div>\r\n                    <div >\r\n                        <form autoComplete=\"off\">\r\n\r\n                            <Grid container spacing={24} style={{ width: '100vw' }}>\r\n                                <Grid container xs={6} spacing={24} style={{ padding: 24 }}>\r\n                                    <Grid item xs={6}>\r\n\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-codigo-automatico\"\r\n                                            label=\"Codigo automático\"\r\n                                            required\r\n                                            disabled\r\n                                            value={this.state.codigo}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n\r\n                                        {\r\n                                            this.state.empresa === false &&\r\n                                            <>\r\n                                                <TextField\r\n                                                    id=\"filled-sexo-cliente\"\r\n                                                    select\r\n                                                    label=\"Sexo\"\r\n                                                    value={this.state.sexo}\r\n                                                    onChange={event => this.setState({ sexo: event.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    variant=\"outlined\"\r\n                                                    style={styles.styleText}\r\n                                                >\r\n                                                    <MenuItem value={'masculino'}>Masculino</MenuItem>\r\n                                                    <MenuItem value={'femenino'}>Femenino</MenuItem>\r\n                                                    <MenuItem value={'otro'}>Otro</MenuItem>\r\n                                                </TextField>\r\n\r\n                                                <TextField\r\n                                                    id=\"date-fecha-nacimiento-cliente\"\r\n                                                    label=\"Fecha Nacimiento\"\r\n                                                    type=\"date\"\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }}\r\n                                                    onChange={(event) => this.setState({ fecha_nacimiento: event.target.value })}\r\n                                                    value={this.state.fecha_nacimiento}\r\n                                                    margin=\"normal\"\r\n                                                    variant=\"filled\"\r\n                                                    style={styles.styleText}\r\n                                                />\r\n                                            </>\r\n                                        }\r\n\r\n\r\n\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n\r\n\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-nombre-cliente\"\r\n                                            label=\"Nombre\"\r\n                                            error={this.state.nombre.length === 0}\r\n                                            required\r\n                                            onChange={(event) => this.setState({ nombre: event.target.value })}\r\n                                            value={this.state.nombre}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            id=\"filled-email-cliente\"\r\n                                            label=\"Email\"\r\n                                            required\r\n                                            error={this.state.email.length === 0 ? true : !Boolean(this.state.comprobacion_email)}\r\n                                            value={this.state.email}\r\n                                            helperText={this.state.comprobacion_texto_email}\r\n                                            onChange={event => {\r\n                                                this.setState({ email: event.target.value })\r\n                                                setTimeout(() => { this.comprobarEmail(this.state.email) }, 100)\r\n                                            }}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                        </TextField>\r\n\r\n                                        <TextField\r\n                                            id=\"filled-tipo-identificacion\"\r\n                                            select\r\n                                            label=\"Tipo de indentificación\"\r\n                                            value={this.state.tipo_identificacion}\r\n                                            disabled={this.props.item}\r\n                                            onChange={event => {\r\n                                                this.setState({ tipo_identificacion: event.target.value })\r\n                                                setTimeout(() => {\r\n                                                    if (this.state.tipo_identificacion === '05') {\r\n                                                        if (this.state.numero_identificacion.length === 13) {\r\n                                                            this.setState({ numero_identificacion: this.state.numero_identificacion.slice(0, -3) })\r\n                                                        }\r\n                                                    }\r\n                                                    this.comprobarCedula(this.state.numero_identificacion)\r\n                                                    if (!this.props.item) {\r\n                                                        this.comprobarCedulaRegistrada(this.state.numero_identificacion)\r\n                                                    }\r\n                                                }, 100)\r\n                                            }}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                            <MenuItem value={'04'}>RUC</MenuItem>\r\n                                            <MenuItem value={'05'}>Cedula</MenuItem>\r\n                                        </TextField>\r\n\r\n                                        <TextField\r\n                                            id=\"filled-numero-identificacion-cliente\"\r\n                                            label=\"Número de identificación\"\r\n                                            required\r\n                                            helperText={this.state.texto_numero_cedula}\r\n                                            error={this.state.numero_identificacion.length === 0 ? true : !Boolean(this.state.comprobacion_numero_cedula) ? true : this.state.identificacionRegistrada}\r\n                                            value={this.state.numero_identificacion}\r\n                                            disabled={this.props.item}\r\n                                            onChange={event => {\r\n                                                if (this.state.tipo_identificacion === '04') {\r\n                                                    if (event.target.value.length <= 13) {\r\n                                                        this.setState({ numero_identificacion: event.target.value })\r\n                                                    }\r\n                                                }\r\n                                                if (this.state.tipo_identificacion === '05') {\r\n                                                    if (event.target.value.length <= 10) {\r\n                                                        this.setState({ numero_identificacion: event.target.value })\r\n                                                    }\r\n                                                }\r\n                                                setTimeout(() => {\r\n                                                    this.comprobarCedula(this.state.numero_identificacion)\r\n                                                    if (!this.props.item) {\r\n                                                        this.comprobarCedulaRegistrada(this.state.numero_identificacion)\r\n                                                    }\r\n                                                }, 100)\r\n\r\n                                            }}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                        </TextField>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container xs={6} spacing={24} style={{ padding: 24 }}>\r\n                                    <Grid item xs={6}>\r\n                                        <FormControlLabel\r\n                                            style={{\r\n                                                height: 56,\r\n                                                marginBottom: 8,\r\n                                                marginTop: 16\r\n                                            }}\r\n                                            control={\r\n                                                <Switch\r\n                                                    checked={this.state.empresa}\r\n                                                    onChange={() => this.setState({ empresa: !this.state.empresa })}\r\n                                                />}\r\n                                            label=\"Empresa\"\r\n                                        />\r\n\r\n                                        <TextField\r\n                                            id=\"filled-tipo-direccion-cliente\"\r\n                                            label=\"Dirección\"\r\n                                            required\r\n                                            error={this.state.direccion.length === 0}\r\n                                            value={this.state.direccion}\r\n                                            onChange={event => this.setState({ direccion: event.target.value })}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                        </TextField>\r\n\r\n                                        <Grid container spacing={24}>\r\n                                            <Grid item xs={6}>\r\n                                                <TextField\r\n                                                    id=\"filled-barrio-cliente\"\r\n                                                    label=\"Barrio\"\r\n                                                    value={this.state.barrio}\r\n                                                    onChange={event => this.setState({ barrio: event.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    variant=\"filled\"\r\n                                                    style={styles.styleText}\r\n                                                >\r\n                                                </TextField>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <TextField\r\n                                                    id=\"filled-ciudad-cliente\"\r\n                                                    label=\"Ciudad\"\r\n                                                    value={this.state.ciudad}\r\n                                                    onChange={event => this.setState({ ciudad: event.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    variant=\"filled\"\r\n                                                    style={styles.styleText}\r\n                                                >\r\n                                                </TextField>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-celular-cliente\"\r\n                                            label=\"Celular\"\r\n                                            error={this.state.celular.length === 0}\r\n                                            required\r\n                                            onChange={(event) => {\r\n                                                if (event.target.value.length <= 10) {\r\n                                                    this.setState({ celular: event.target.value })\r\n                                                }\r\n                                            }}\r\n                                            value={this.state.celular}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n\r\n\r\n                                        {\r\n                                            this.state.empresa === true &&\r\n                                            <>\r\n                                                <TextField\r\n                                                    id=\"filled-telefono-cliente\"\r\n                                                    label=\"Telefono\"\r\n                                                    required\r\n                                                    error={this.state.telefono.length === 0}\r\n                                                    value={this.state.telefono}\r\n                                                    onChange={event => this.setState({ telefono: event.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    variant=\"filled\"\r\n                                                    style={styles.styleText}\r\n                                                >\r\n                                                </TextField>\r\n                                            </>\r\n                                        }\r\n\r\n                                        {\r\n                                            this.state.empresa === false &&\r\n                                            <>\r\n                                                <TextField\r\n                                                    id=\"filled-telefono-cliente\"\r\n                                                    label=\"Telefono\"\r\n                                                    required\r\n                                                    value={this.state.telefono}\r\n                                                    onChange={event => this.setState({ telefono: event.target.value })}\r\n                                                    margin=\"normal\"\r\n                                                    variant=\"filled\"\r\n                                                    style={styles.styleText}\r\n                                                >\r\n                                                </TextField>\r\n                                            </>\r\n                                        }\r\n\r\n\r\n\r\n                                        <TextField\r\n                                            id=\"filled-observacion-cliente\"\r\n                                            label=\"Observación\"\r\n                                            value={this.state.observacion}\r\n                                            onChange={event => this.setState({ observacion: event.target.value })}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                        </TextField>\r\n\r\n                                        <TextField\r\n                                            id=\"filled-limite-cliente\"\r\n                                            label=\"Límite de deuda\"\r\n                                            value={this.state.limite_deuda}\r\n                                            onChange={event => this.setState({ limite_deuda: event.target.value })}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                        </TextField>\r\n\r\n                                        <TextField\r\n                                            id=\"filled-credito-cliente\"\r\n                                            label=\"Crédito\"\r\n                                            value={this.state.credito}\r\n                                            onChange={event => this.setState({ credito: event.target.value })}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                        </TextField>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction NumberFormatCustom(props) {\r\n    const { onChange } = props;\r\n\r\n    return (\r\n        <NumberFormat\r\n            {...props}\r\n            decimalSeparator={','}\r\n            thousandSeparator={'.'}\r\n            prefix=\"$ \"\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                })\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nfunction NumberFormatCedula(props) {\r\n    const { onChange } = props;\r\n    return (\r\n        <NumberFormat\r\n            {...props}\r\n            mask=\"_\"\r\n            format=\"CI: ##########\"\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                })\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nfunction NumberFormatTelefono(props) {\r\n    const { onChange } = props;\r\n    return (\r\n        <NumberFormat\r\n            {...props}\r\n            mask=\"_\"\r\n            format=\"TEL: ##########\"\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                })\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ModalNewCliente;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport funtions from '../../utils/funtions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\nimport NumberFormat from 'react-number-format';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport { FormControlLabel, Switch } from '@material-ui/core';\r\nimport setSnackBars from '../plugins/setSnackBars';\r\n\r\n\r\nclass ModalNewEditProveedor extends Component {\r\n\r\n    state = {\r\n        codigo: '',\r\n        nombre: '',\r\n        tipo_proveedor: '',\r\n        telefono: '',\r\n        celular: '',\r\n        direccion: '',\r\n        ciudad: '',\r\n        barrio: '',\r\n        email: '',\r\n        observacion: '',\r\n        fecha_registro: '',\r\n        hora_registro: '',\r\n        usuario: '',\r\n        estado: true,\r\n        order: '',\r\n        identificacion: '',\r\n        tipo_identificacion: '',\r\n        tipo_persona: false,\r\n        //estado de identificacion en la base de datos si esta o no registrada\r\n        identificacionRegistrada: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        if (this.props.item) {\r\n            this.setState({\r\n                codigo: this.props.item.codigo,\r\n                nombre: this.props.item.nombre,\r\n                tipo_proveedor: this.props.item.tipo,\r\n                telefono: this.props.item.telefono,\r\n                celular: this.props.item.celular,\r\n                direccion: this.props.item.direccion,\r\n                ciudad: this.props.item.ciudad,\r\n                barrio: this.props.item.barrio,\r\n                email: this.props.item.email,\r\n                observacion: this.props.item.observacion,\r\n                fecha_registro: this.props.item.fecha,\r\n                hora_registro: this.props.item.hora,\r\n                estado: this.props.item.estado,\r\n                usuario: this.props.item.usuario,\r\n                order: this.props.item.order,\r\n                identificacion: this.props.item.identificacion,\r\n                tipo_identificacion: this.props.item.tipo_identificacion,\r\n                tipo_persona: this.props.item.tipo_persona\r\n            })\r\n            setTimeout(() => {\r\n                this.comprobarCedula(this.props.item.identificacion)\r\n                if (!this.props.item) {\r\n                    this.comprobarCedulaRegistrada(this.props.item.identificacion)\r\n                }\r\n                this.comprobarEmail(this.props.item.email)\r\n            }, 100)\r\n        } else {\r\n            this.setState({\r\n                codigo: funtions.guidGenerator(),\r\n                usuario: this.props.usuario.code,\r\n                tipo_identificacion: '05',\r\n                tipo_proveedor: 'persona',\r\n            })\r\n        }\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    setNewProveedor = (proveedor) => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/proveedores/' + proveedor.codigo);\r\n        productosRef.set({\r\n            ...proveedor\r\n        });\r\n    }\r\n\r\n    setUpdateProducto = (proveedor) => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/proveedores/' + proveedor.codigo);\r\n        productosRef.update({\r\n            ...proveedor\r\n        });\r\n    }\r\n\r\n    comprobarEmail = email => {\r\n        if (this.validar_email(email)) {\r\n            this.setState({ comprobacion_texto_email: 'El email es correcto' })\r\n            this.setState({ comprobacion_email: true })\r\n        } else {\r\n            this.setState({ comprobacion_texto_email: 'El email es incorrecto' })\r\n            this.setState({ comprobacion_email: false })\r\n        }\r\n    }\r\n    validar_email = (email) => {\r\n        var regex = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\n        return regex.test(email) ? true : false;\r\n    }\r\n\r\n    comprobarCedulaRegistrada = cedula => {\r\n        if (cedula.length === 10) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula)\r\n                    var productosRefRuc = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula + '001')\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                        } else {\r\n                            productosRefRuc.on('value', (snapshot) => {\r\n                                if (snapshot.val()) {\r\n                                    this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                                } else {\r\n                                    this.setState({ identificacionRegistrada: false })\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                }\r\n            })\r\n        }\r\n        if (cedula.length === 13) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula)\r\n                    var productosRefRuc = db.ref('users/' + user.uid + '/clientes').orderByChild('numero_identificacion').equalTo(cedula.slice(0, -3))\r\n                    productosRefRuc.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                        } else {\r\n                            productosRef.on('value', (snapshot) => {\r\n                                if (snapshot.val()) {\r\n                                    this.setState({ identificacionRegistrada: true, texto_numero_cedula: 'Numero de idetificación registrado' })\r\n                                } else {\r\n                                    this.setState({ identificacionRegistrada: false })\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    comprobarCedula = (cedula) => {\r\n        if (this.state.tipo_identificacion === '05') {\r\n            //Preguntamos si la cedula consta de 10 digitos\r\n            if (cedula.length == 10) {\r\n\r\n                //Obtenemos el digito de la region que sonlos dos primeros digitos\r\n                var digito_region = cedula.substring(0, 2);\r\n\r\n                //Pregunto si la region existe ecuador se divide en 24 regiones\r\n                if (digito_region >= 1 && digito_region <= 24) {\r\n\r\n                    // Extraigo el ultimo digito\r\n                    var ultimo_digito = cedula.substring(9, 10);\r\n\r\n                    //Agrupo todos los pares y los sumo\r\n                    var pares = parseInt(cedula.substring(1, 2)) + parseInt(cedula.substring(3, 4)) + parseInt(cedula.substring(5, 6)) + parseInt(cedula.substring(7, 8));\r\n\r\n                    //Agrupo los impares, los multiplico por un factor de 2, si la resultante es > que 9 le restamos el 9 a la resultante\r\n                    var numero1 = cedula.substring(0, 1);\r\n                    var numero1 = (numero1 * 2);\r\n                    if (numero1 > 9) { var numero1 = (numero1 - 9); }\r\n\r\n                    var numero3 = cedula.substring(2, 3);\r\n                    var numero3 = (numero3 * 2);\r\n                    if (numero3 > 9) { var numero3 = (numero3 - 9); }\r\n\r\n                    var numero5 = cedula.substring(4, 5);\r\n                    var numero5 = (numero5 * 2);\r\n                    if (numero5 > 9) { var numero5 = (numero5 - 9); }\r\n\r\n                    var numero7 = cedula.substring(6, 7);\r\n                    var numero7 = (numero7 * 2);\r\n                    if (numero7 > 9) { var numero7 = (numero7 - 9); }\r\n\r\n                    var numero9 = cedula.substring(8, 9);\r\n                    var numero9 = (numero9 * 2);\r\n                    if (numero9 > 9) { var numero9 = (numero9 - 9); }\r\n\r\n                    var impares = numero1 + numero3 + numero5 + numero7 + numero9;\r\n\r\n                    //Suma total\r\n                    var suma_total = (pares + impares);\r\n\r\n                    //extraemos el primero digito\r\n                    var primer_digito_suma = String(suma_total).substring(0, 1);\r\n\r\n                    //Obtenemos la decena inmediata\r\n                    var decena = (parseInt(primer_digito_suma) + 1) * 10;\r\n\r\n                    //Obtenemos la resta de la decena inmediata - la suma_total esto nos da el digito validador\r\n                    var digito_validador = decena - suma_total;\r\n\r\n                    //Si el digito validador es = a 10 toma el valor de 0\r\n                    if (digito_validador == 10)\r\n                        var digito_validador = 0;\r\n\r\n                    //Validamos que el digito validador sea igual al de la cedula\r\n                    if (digito_validador == ultimo_digito) {\r\n                        this.setState({ texto_numero_cedula: 'la cedula:' + cedula + ' es correcta' })\r\n                        this.setState({ comprobacion_numero_cedula: true })\r\n                    } else {\r\n                        this.setState({ texto_numero_cedula: 'la cedula:' + cedula + ' es incorrecta' })\r\n                        this.setState({ comprobacion_numero_cedula: false })\r\n                    }\r\n\r\n                } else {\r\n                    // imprimimos en consola si la region no pertenece\r\n                    this.setState({ texto_numero_cedula: 'Esta cedula no pertenece a ninguna region' })\r\n                    this.setState({ comprobacion_numero_cedula: false })\r\n                }\r\n            } else {\r\n                //imprimimos en consola si la cedula tiene mas o menos de 10 digitos\r\n                this.setState({ texto_numero_cedula: 'Esta cedula tiene menos de 10 Digitos' })\r\n                this.setState({ comprobacion_numero_cedula: false })\r\n            }\r\n        }\r\n\r\n        if (this.state.tipo_identificacion === '04') {\r\n            //Preguntamos si la ruc consta de 13 digitos\r\n            if (cedula.length == 13) {\r\n                this.setState({ texto_numero_cedula: 'El ruc:' + cedula + ' es correcto' })\r\n                this.setState({ comprobacion_numero_cedula: true })\r\n            } else {\r\n                //imprimimos en consola si la cedula tiene mas o menos de 13 digitos\r\n                this.setState({ texto_numero_cedula: 'Esta ruc tiene menos de 13 Digitos' })\r\n                this.setState({ comprobacion_numero_cedula: false })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    checkFormProduc = () => {\r\n        if (\r\n            this.state.codigo.length > 0 &&\r\n            this.state.nombre.length > 0 &&\r\n            this.state.celular.length > 0 &&\r\n            this.state.direccion.length > 0 &&\r\n            this.state.identificacion.length > 0 &&\r\n            this.state.email.length > 0 &&\r\n            this.state.tipo_proveedor.length > 0 &&\r\n            this.state.comprobacion_numero_cedula &&\r\n            !this.state.identificacionRegistrada\r\n        ) {\r\n            var order = new Date()\r\n            const item = {\r\n                codigo: this.state.codigo,\r\n                nombre: this.state.nombre,\r\n                tipo: this.state.tipo_proveedor,\r\n                telefono: this.state.telefono,\r\n                celular: this.state.celular,\r\n                direccion: this.state.direccion,\r\n                ciudad: this.state.ciudad,\r\n                barrio: this.state.barrio,\r\n                email: this.state.email,\r\n                observacion: this.state.observacion,\r\n                fecha: this.props.item ? this.state.fecha_registro : funtions.obtenerFechaActual(),\r\n                hora: this.props.item ? this.state.hora_registro : `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n                usuario: this.state.usuario,\r\n                estado: this.state.estado,\r\n                order: this.props.item ? this.state.order : order + \"\",\r\n                identificacion: this.state.identificacion,\r\n                tipo_identificacion: this.state.tipo_identificacion,\r\n                tipo_persona: this.state.tipo_persona,\r\n            }\r\n            if (this.props.item) {\r\n                this.setUpdateProducto(item)\r\n                setSnackBars.openSnack('success', 'rootSnackBar', 'Proveedor actualizado correctamente', 2000)\r\n                this.props.handleClose()\r\n\r\n            } else {\r\n                this.setNewProveedor(item)\r\n                setSnackBars.openSnack('success', 'rootSnackBar', 'Proveedor creado correctamente', 2000)\r\n                this.props.handleClose()\r\n\r\n            }\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBarERROR', 'Ingrese el proveedor correctamente', 2000)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleText: {\r\n                margin: 10,\r\n                width: '100%'\r\n            },\r\n            styleAutoComplete: {\r\n                margin: 10,\r\n                width: '96%'\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div id='rootSnackBarERROR'></div>\r\n                <AppBar style={{\r\n                    position: 'relative',\r\n                }}>\r\n                    <Toolbar>\r\n                        <IconButton color=\"inherit\" onClick={this.props.handleClose} aria-label=\"Close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"title\" color=\"inherit\" style={{ flex: 1, marginLeft: 30 }}>\r\n                            {this.props.item ? 'Editar Proveedor' : 'Nuevo Proveedor'}\r\n                        </Typography>\r\n                        {\r\n                            this.props.item ?\r\n                                <Button color=\"inherit\"\r\n                                    onClick={this.checkFormProduc}\r\n                                >\r\n                                    Actualizar\r\n                                </Button>\r\n                                :\r\n                                <Button color=\"inherit\"\r\n                                    onClick={this.checkFormProduc}\r\n                                >\r\n                                    Guardar\r\n                                </Button>\r\n                        }\r\n\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n\r\n                <form autoComplete=\"off\">\r\n                    <Grid container spacing={24} style={{ width: '100vw' }}>\r\n                        <Grid container xs={6} spacing={24} style={{ padding: 24 }}>\r\n                            <Grid item xs={6}>\r\n\r\n\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-codigo-automatico\"\r\n                                    label=\"Codigo automático\"\r\n                                    required\r\n                                    disabled\r\n                                    value={this.state.codigo}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-nombre\"\r\n                                    label=\"Nombre\"\r\n                                    error={this.state.nombre.length === 0}\r\n                                    required\r\n                                    onChange={(event) => this.setState({ nombre: event.target.value })}\r\n                                    value={this.state.nombre}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-email\"\r\n                                    label=\"Correo electrónico\"\r\n                                    error={this.state.email.length === 0 ? true : !Boolean(this.state.comprobacion_email)}\r\n                                    required\r\n                                    helperText={this.state.comprobacion_texto_email}\r\n                                    onChange={(event) => {\r\n                                        this.setState({ email: event.target.value })\r\n                                        setTimeout(() => { this.comprobarEmail(this.state.email) }, 100)\r\n                                    }}\r\n                                    value={this.state.email}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-observacion\"\r\n                                    label=\"Observación\"\r\n                                    required\r\n                                    onChange={(event) => this.setState({ observacion: event.target.value })}\r\n                                    value={this.state.observacion}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    id=\"filled-tipo-proveedor\"\r\n                                    select\r\n                                    label=\"Tipo de proveedor\"\r\n                                    error={this.state.tipo_proveedor.length === 0}\r\n                                    value={this.state.tipo_proveedor}\r\n                                    onChange={event => this.setState({ tipo_proveedor: event.target.value })}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    style={styles.styleText}\r\n                                >\r\n                                    <MenuItem value={'persona'}>Persona</MenuItem>\r\n                                    <MenuItem value={'empresa'}>Empresa</MenuItem>\r\n                                </TextField>\r\n\r\n                                <TextField\r\n                                    id=\"filled-tipo-identificacion\"\r\n                                    select\r\n                                    label=\"Tipo de indentificación\"\r\n                                    error={this.state.tipo_identificacion.length === 0}\r\n                                    value={this.state.tipo_identificacion}\r\n                                    disabled={this.props.item}\r\n                                    onChange={event => {\r\n                                        this.setState({ tipo_identificacion: event.target.value })\r\n                                        setTimeout(() => {\r\n                                            if (this.state.tipo_identificacion === '05') {\r\n                                                if (this.state.identificacion.length === 13) {\r\n                                                    this.setState({ identificacion: this.state.identificacion.slice(0, -3) })\r\n                                                }\r\n                                            }\r\n                                            this.comprobarCedula(this.state.identificacion)\r\n                                            if (!this.props.item) {\r\n                                                this.comprobarCedulaRegistrada(this.state.identificacion)\r\n                                            }\r\n                                        }, 100)\r\n                                    }}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    style={styles.styleText}\r\n                                >\r\n                                    <MenuItem value={'04'}>RUC</MenuItem>\r\n                                    <MenuItem value={'05'}>Cedula</MenuItem>\r\n                                </TextField>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container xs={6} spacing={24} style={{ padding: 24 }}>\r\n                            <Grid item xs={6}>\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-telefono\"\r\n                                    label=\"Telefono\"\r\n                                    required\r\n                                    onChange={(event) => this.setState({ telefono: event.target.value })}\r\n                                    value={this.state.telefono}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-celular\"\r\n                                    label=\"Celular\"\r\n                                    error={this.state.celular.length === 0}\r\n                                    required\r\n                                    onChange={(event) => {\r\n                                        if (event.target.value.length <= 10) {\r\n                                            this.setState({ celular: event.target.value })\r\n                                        }\r\n                                    }}\r\n                                    value={this.state.celular}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-direccion\"\r\n                                    label=\"Dirección\"\r\n                                    error={this.state.direccion.length === 0}\r\n                                    required\r\n                                    onChange={(event) => this.setState({ direccion: event.target.value })}\r\n                                    value={this.state.direccion}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <Grid container spacing={24}>\r\n                                    <Grid item xs={6}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-ciudad\"\r\n                                            label=\"Ciudad\"\r\n                                            required\r\n                                            onChange={(event) => this.setState({ ciudad: event.target.value })}\r\n                                            value={this.state.ciudad}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-barrio\"\r\n                                            label=\"Barrio\"\r\n                                            required\r\n                                            onChange={(event) => this.setState({ barrio: event.target.value })}\r\n                                            value={this.state.barrio}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\" />\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-identificacion\"\r\n                                    label=\"Número de identificación\"\r\n                                    helperText={this.state.texto_numero_cedula}\r\n                                    error={this.state.identificacion.length === 0 ? true : !Boolean(this.state.comprobacion_numero_cedula) ? true : this.state.identificacionRegistrada}\r\n                                    required\r\n                                    disabled={this.props.item}\r\n\r\n                                    onChange={(event) => {\r\n                                        if (this.state.tipo_identificacion === '04') {\r\n                                            if (event.target.value.length <= 13) {\r\n                                                this.setState({ identificacion: event.target.value })\r\n                                            }\r\n                                        }\r\n                                        if (this.state.tipo_identificacion === '05') {\r\n                                            if (event.target.value.length <= 10) {\r\n                                                this.setState({ identificacion: event.target.value })\r\n                                            }\r\n                                        }\r\n                                        setTimeout(() => {\r\n                                            this.comprobarCedula(this.state.identificacion)\r\n                                            if (!this.props.item) {\r\n                                                this.comprobarCedulaRegistrada(this.state.identificacion)\r\n                                            }\r\n                                        }, 100)\r\n                                    }}\r\n                                    value={this.state.identificacion}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n                                <Grid container variant=\"permanent\" spacing={20} style={{ width: '95%', paddingLeft: 16 }}>\r\n                                    <div style={{ display: this.props.tipo_venta === 'final' ? 'none' : 'block' }}>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Switch\r\n                                                    checked={this.state.tipo_persona}\r\n                                                    onChange={() => {\r\n                                                        this.setState({\r\n                                                            tipo_persona: !this.state.tipo_persona\r\n                                                        })\r\n                                                    }}\r\n                                                />}\r\n                                            label=\"Persona Natural no Obligada a llevar contabilidad\"\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction NumberFormatCustom(props) {\r\n    const { onChange } = props;\r\n\r\n    return (\r\n        <NumberFormat\r\n            {...props}\r\n            decimalSeparator={','}\r\n            thousandSeparator={'.'}\r\n            prefix=\"$ \"\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                })\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nfunction NumberFormatIva(props) {\r\n    const { onChange } = props;\r\n    return (\r\n        <NumberFormat\r\n            {...props}\r\n            mask=\"_\"\r\n            format=\"% ##\"\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                })\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nfunction NumberFormatCantidad(props) {\r\n    const { onChange } = props;\r\n    return (\r\n        <NumberFormat\r\n            {...props}\r\n            format=\"###### productos\"\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                })\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ModalNewEditProveedor;","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AutoCompleteAdmin from '../plugins/AutoCompleteAdmin';\r\nimport funtions from '../../utils/funtions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\n\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport NumberFormat from 'react-number-format';\r\nimport setSnackBars from '../plugins/setSnackBars';\r\nimport AutoCompleteProveedor from '../plugins/AutoCompleteProveedores';\r\nimport AutoCompleteProveedores from '../plugins/AutoCompleteRetenciones';\r\nimport ContainerSelectPrecios from '../plugins/ContainerSelectPrecios';\r\n\r\n\r\nclass ModalNewProducto extends Component {\r\n\r\n    state = {\r\n        codigo: '',\r\n        codigo_barras: '',\r\n        codigo_referencia: '',\r\n\r\n        descripcion_producto: '',\r\n        categoria_producto: 'null',\r\n        proveedor: '',\r\n        marca_producto: 'null',\r\n        porcentaje_iva: '',\r\n        localizacion_producto: '',\r\n        numero_ventas: '',\r\n\r\n        precio_costo: '',\r\n        precio_venta_a: '',\r\n        precio_venta_b: '',\r\n        precio_venta_c: '',\r\n        precios: [],\r\n        precio_por_defecto: '',\r\n\r\n        stock_actual: '0',\r\n        stock_minimo: '10',\r\n        stock_maximo: '100',\r\n\r\n        unidad_medida: '',\r\n        producto_fraccionado: false,\r\n        cantidad_productos: '',\r\n\r\n        fecha_vencimiento: '',\r\n        fecha_registro: '',\r\n        hora_registro: '',\r\n\r\n        estado_producto: '',\r\n        usuario: '',\r\n        order: '',\r\n\r\n        //estados\r\n        tiene_iva: false,\r\n        estado: true,\r\n\r\n        //cantidad actual para actualizar\r\n        cantidad_actual_temporal: '',\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.obtenerPrecios()\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        //pregutnando si biene un item por los props para saber si esditar y crear\r\n        if (this.props.item) {\r\n            this.setState({\r\n                codigo: this.props.item.codigo,\r\n                codigo_barras: this.props.item.codigo_barras,\r\n                codigo_referencia: this.props.item.codigo_referencia,\r\n\r\n                precio_costo: this.props.item.precio_costo,\r\n                precio_venta_a: this.props.item.precio_venta_a,\r\n                precio_venta_b: this.props.item.precio_venta_b,\r\n                precio_venta_c: this.props.item.precio_venta_c,\r\n                precio_por_defecto: this.props.item.precio_por_defecto,\r\n\r\n                descripcion_producto: this.props.item.descripcion_producto,\r\n                categoria_producto: this.props.item.categoria_producto,\r\n                proveedor: this.props.item.proveedor,\r\n                marca_producto: this.props.item.marca_producto,\r\n                porcentaje_iva: this.props.item.porcentaje_iva,\r\n                localizacion_producto: this.props.item.localizacion_producto,\r\n                numero_ventas: this.props.item.numero_ventas,\r\n\r\n                unidad_medida: this.props.item.unidad_medida,\r\n                producto_fraccionado: this.props.item.producto_fraccionado,\r\n\r\n                stock_actual: `${this.props.item.stock_actual}`,\r\n                //cantidad actual para actualizar\r\n                cantidad_actual_temporal: `${this.props.item.stock_actual}`,\r\n                stock_minimo: this.props.item.stock_minimo,\r\n                stock_maximo: this.props.item.stock_maximo,\r\n\r\n                fecha_vencimiento: this.props.item.fecha_vencimiento,\r\n                fecha_registro: this.props.item.fecha_registro,\r\n                hora_registro: this.props.item.hora_registro,\r\n\r\n                tiene_iva: this.props.item.tiene_iva,\r\n                estado: this.props.item.estado,\r\n                usuario: this.props.item.usuario,\r\n                order: this.props.item.order\r\n            })\r\n        } else {\r\n            this.obtenerPreciosDefectoConfiguracion()\r\n            this.setState({\r\n                usuario: this.props.usuario.code,\r\n                porcentaje_iva: '12',\r\n                codigo: funtions.guidGenerator(),\r\n                unidad_medida: 'unidades'\r\n            })\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/configuracion/iva_activado')\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            if (snapshot.val() === true) {\r\n                                this.setState({\r\n                                    tiene_iva: true\r\n                                })\r\n                            } else {\r\n                                this.setState({\r\n                                    tiene_iva: false\r\n                                })\r\n                            }\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    obtenerPrecios = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/precios')\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            precios: funtions.snapshotToArray(snapshot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    obtenerPreciosDefectoConfiguracion = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/configuracion/precio_por_defecto')\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            precio_por_defecto: snapshot.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    setUpdateProducto = (producto) => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + producto.codigo);\r\n        productosRef.update({\r\n            ...producto\r\n        });\r\n\r\n        /* if (producto.stock_actual != this.state.cantidad_actual_temporal) {\r\n            var order = new Date()\r\n            var codigoStock = funtions.guidGenerator()\r\n            var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n            operacionStockRef.set({\r\n                codigo: codigoStock,\r\n                tipo_operacion: 'edicion-producto',\r\n                fecha: funtions.obtenerFechaActual(),\r\n                hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n                cliente_proveedor: producto.proveedor,\r\n                productos: [\r\n                    {\r\n                        codigo: producto.codigo,\r\n                        cantidad: producto.stock_actual - this.state.cantidad_actual_temporal\r\n                    }\r\n                ],\r\n                total_final: '',\r\n                empleado: producto.usuario,\r\n                precio_por_defecto: producto.precio_por_defecto,\r\n                observacion: '',\r\n                subtotal: '',\r\n                descuento: '',\r\n                otros_gastos: '',\r\n                flete: '',\r\n                valor_pagado: '',\r\n                medio_pago: '',\r\n                saldo_favor: '',\r\n                en_deuda: '',\r\n                vuelto: '',\r\n                acreditado: '',\r\n                order: order + ''\r\n            });\r\n        } */\r\n    }\r\n\r\n    setNewProducto = (producto) => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + producto.codigo);\r\n        productosRef.set({\r\n            ...producto\r\n        });\r\n        /* \r\n                var order = new Date()\r\n                var codigoStock = funtions.guidGenerator()\r\n                var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n                operacionStockRef.set({\r\n                    codigo: codigoStock,\r\n                    tipo_operacion: 'registro-producto',\r\n                    fecha: funtions.obtenerFechaActual(),\r\n                    hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n                    cliente_proveedor: producto.proveedor,\r\n                    productos: [\r\n                        {\r\n                            codigo: producto.codigo,\r\n                            cantidad: producto.stock_actual\r\n                        }\r\n                    ],\r\n                    total_final: '',\r\n                    empleado: producto.usuario,\r\n                    precio_por_defecto: producto.precio_por_defecto,\r\n                    observacion: '',\r\n                    subtotal: '',\r\n                    descuento: '',\r\n                    otros_gastos: '',\r\n                    flete: '',\r\n                    valor_pagado: '',\r\n                    medio_pago: '',\r\n                    saldo_favor: '',\r\n                    en_deuda: '',\r\n                    vuelto: '',\r\n                    acreditado: '',\r\n                    order: order + ''\r\n                }); */\r\n    }\r\n\r\n\r\n\r\n    checkFormProduc = () => {\r\n        if (\r\n            this.state.codigo.toString().length > 0 &&\r\n            this.state.proveedor.toString().length > 0 &&\r\n            this.state.precio_costo.toString().length > 0 &&\r\n            this.state.descripcion_producto.toString().length > 0 &&\r\n            this.state.categoria_producto.toString().length > 4 &&\r\n            this.state.marca_producto.toString().length > 4 &&\r\n            this.state.unidad_medida.toString().length > 0 &&\r\n            this.state.stock_actual.toString().length > 0 &&\r\n            this.state.stock_minimo.toString().length > 0 &&\r\n            this.state.stock_maximo.toString().length > 0\r\n        ) {\r\n            var order = new Date()\r\n            const item = {\r\n                //como remplazar un valor dentro de un string\r\n                //cantidad: this.state.cantidadProductos.replace(' productos', ''),\r\n                codigo: this.state.codigo,\r\n                codigo_barras: this.state.codigo_barras,\r\n                codigo_referencia: this.state.codigo_referencia,\r\n\r\n                precio_costo: this.state.precio_costo,\r\n                precio_venta_a: this.state.precio_venta_a,\r\n                precio_venta_b: this.state.precio_venta_b,\r\n                precio_venta_c: this.state.precio_venta_c,\r\n                precio_por_defecto: this.state.precio_por_defecto,\r\n\r\n                descripcion_producto: this.state.descripcion_producto,\r\n                categoria_producto: this.state.categoria_producto,\r\n                proveedor: this.state.proveedor,\r\n                marca_producto: this.state.marca_producto,\r\n                porcentaje_iva: this.state.porcentaje_iva,\r\n                localizacion_producto: this.state.localizacion_producto,\r\n                numero_ventas: this.state.numero_ventas,\r\n\r\n                unidad_medida: this.state.unidad_medida,\r\n                producto_fraccionado: this.state.producto_fraccionado,\r\n\r\n                stock_actual: `${this.state.stock_actual}`,\r\n                stock_minimo: this.state.stock_minimo,\r\n                stock_maximo: this.state.stock_maximo,\r\n\r\n                fecha_vencimiento: this.state.fecha_vencimiento,\r\n                fecha_registro: this.props.item ? this.state.fecha_registro : funtions.obtenerFechaActual(),\r\n                hora_registro: this.props.item ? this.state.hora_registro : `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n\r\n                tiene_iva: this.state.tiene_iva,\r\n                estado: this.props.item ? this.state.estado : true,\r\n                usuario: this.props.usuario.code,\r\n                order: this.props.item ? this.state.order : order + \"\",\r\n            }\r\n            if (this.props.item) {\r\n                this.setUpdateProducto(item)\r\n                setSnackBars.openSnack('success', 'rootSnackBar', 'Producto actualizado correctamente', 2000)\r\n                this.props.handleClose()\r\n\r\n            } else {\r\n                this.setNewProducto(item)\r\n                setSnackBars.openSnack('success', 'rootSnackBar', 'Producto creado correctamente', 2000)\r\n                this.props.handleClose()\r\n\r\n            }\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBarERROR', 'Ingrese el producto correctamente', 2000)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleText: {\r\n                margin: 10,\r\n                width: '100%'\r\n            },\r\n            styleAutoComplete: {\r\n                margin: 10,\r\n                width: '96%'\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div id='rootSnackBarERROR'></div>\r\n                <AppBar style={{\r\n                    position: 'relative',\r\n                }}>\r\n                    <Toolbar>\r\n                        <IconButton color=\"inherit\" onClick={this.props.handleClose} aria-label=\"Close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"title\" color=\"inherit\" style={{ flex: 1, marginLeft: 30 }}>\r\n                            {this.props.item ? 'Editar Producto' : 'Nuevo producto'}\r\n                        </Typography>\r\n                        <Button color=\"inherit\"\r\n                            onClick={this.checkFormProduc}\r\n                        >\r\n                            Guardar\r\n                        </Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n\r\n                <form autoComplete=\"off\">\r\n                    <Grid container spacing={24} style={{ width: '100vw' }}>\r\n                        <Grid container xs={6} spacing={24} style={{ padding: 24 }}>\r\n                            <Grid item xs={6}>\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-codigo-automatico\"\r\n                                    label=\"Codigo automático\"\r\n                                    error={this.state.codigo.length === 0}\r\n                                    required\r\n                                    disabled\r\n                                    onChange={(event) => this.setState({ codigo: event.target.value })}\r\n                                    value={this.state.codigo}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-codigo-barras\"\r\n                                    label=\"Codigo de barras\"\r\n                                    autoFocus\r\n                                    required\r\n                                    onChange={(event) => this.setState({ codigo_barras: event.target.value })}\r\n                                    value={this.state.codigo_barras}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                />\r\n\r\n                                <TextField\r\n                                    style={styles.styleText}\r\n                                    id=\"standard-codigo-referencia\"\r\n                                    label=\"Codigo de referencia\"\r\n                                    required\r\n                                    onChange={(event) => this.setState({ codigo_referencia: event.target.value })}\r\n                                    value={this.state.codigo_referencia}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\" />\r\n\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Switch\r\n                                            checked={this.state.tiene_iva}\r\n                                            onChange={() => this.setState({ tiene_iva: !this.state.tiene_iva })}\r\n                                        />}\r\n                                    label=\"Tiene iva\"\r\n                                />\r\n                                {\r\n                                    this.state.tiene_iva &&\r\n                                    <TextField\r\n                                        style={styles.styleText}\r\n                                        id=\"standard-porcentaje-iva\"\r\n                                        label=\"Porcentaje Iva\"\r\n                                        error={this.state.porcentaje_iva.length === 0}\r\n                                        required\r\n                                        onChange={(event) => this.setState({ porcentaje_iva: event.target.value })}\r\n                                        value={this.state.porcentaje_iva}\r\n                                        margin=\"normal\"\r\n                                        variant=\"filled\"\r\n                                    >\r\n                                    </TextField>\r\n                                }\r\n\r\n                                <TextField\r\n                                    id=\"date-fecha-vencimiento\"\r\n                                    label=\"Fecha de vencimiento\"\r\n                                    type=\"date\"\r\n                                    //defaultValue={`${new Date().getDate()+'-'+new Date().getMonth()+'-'+new Date().getFullYear()}`}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    onChange={(event) => this.setState({ fecha_vencimiento: event.target.value })}\r\n                                    value={this.state.fecha_vencimiento}\r\n                                    margin=\"normal\"\r\n                                    variant=\"filled\"\r\n                                    style={styles.styleText}\r\n                                />\r\n\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Switch\r\n                                            checked={this.state.producto_fraccionado}\r\n                                            onChange={() => this.setState({ producto_fraccionado: !this.state.producto_fraccionado })}\r\n                                        />}\r\n                                    label=\"Venta fraccionada\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <AutoCompleteProveedores\r\n                                    styleText={styles.styleText}\r\n                                    dataRef=\"proveedores\"\r\n                                    dataRefObject=\"proveedor\"\r\n                                    error={this.state.proveedor.length === 0}\r\n                                    onChangue={(item) => this.setState({ proveedor: item.codigo })}\r\n                                    usuario={this.props.usuario}\r\n                                    codigoProveedor={this.state.proveedor}\r\n                                />\r\n\r\n                                <Grid container spacing={24}>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-precio-costo-item\"\r\n                                            label=\"Precio costo\"\r\n                                            error={this.state.precio_costo.length === 0}\r\n                                            required\r\n                                            onChange={(event) => this.setState({ precio_costo: event.target.value })}\r\n                                            value={this.state.precio_costo}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n                                        <TextField\r\n                                            id=\"filled-unidad-medida\"\r\n                                            select\r\n                                            label=\"Precio por defecto\"\r\n                                            error={this.state.precio_por_defecto.length === 0}\r\n                                            value={this.state.precio_por_defecto}\r\n                                            onChange={event => this.setState({ precio_por_defecto: event.target.value })}\r\n                                            margin=\"normal\"\r\n                                            variant=\"outlined\"\r\n                                            style={styles.styleText}\r\n                                        >\r\n                                            {\r\n                                                this.state.precios.map(item => {\r\n                                                    return <MenuItem key={item.codigo} value={item.codigo}>{`${item.nombre}`}</MenuItem>\r\n                                                })\r\n                                            }\r\n                                        </TextField>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-descripcion-producto\"\r\n                                            label=\"Descripcion del producto\"\r\n                                            error={this.state.descripcion_producto.length === 0}\r\n                                            required\r\n                                            onChange={(event) => this.setState({ descripcion_producto: event.target.value })}\r\n                                            value={this.state.descripcion_producto}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n                                        <AutoCompleteAdmin\r\n                                            id=\"standard-categoria-productos\"\r\n                                            styleText={styles.styleText}\r\n                                            nameTextFiel=\"Categoria\"\r\n                                            dataRef=\"categorias\"\r\n                                            dataRefObject=\"categoria\"\r\n                                            itemCategoria={this.state.categoria_producto}\r\n                                            changueText={itemCodigo => this.setState({ categoria_producto: itemCodigo })}\r\n                                            textItemVacio='Categorias vacias'\r\n                                        />\r\n\r\n                                        <AutoCompleteAdmin\r\n                                            id=\"standard-categoria-marcas\"\r\n                                            styleText={styles.styleText}\r\n                                            nameTextFiel=\"Marca\"\r\n                                            dataRef=\"marcas\"\r\n                                            dataRefObject=\"marca\"\r\n                                            itemCategoria={this.state.marca_producto}\r\n                                            changueText={itemCodigo => this.setState({ marca_producto: itemCodigo })}\r\n                                            textItemVacio='Marcas vacias'\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container spacing={24}>\r\n                                    <Grid item xs={12}>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid container xs={6} spacing={24} style={{ padding: 24 }}>\r\n                            <Grid item xs={6}>\r\n\r\n                                <ContainerSelectPrecios\r\n                                    precio_costo={this.state.precio_costo}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n\r\n                                <TextField\r\n                                    id=\"filled-unidad-medida\"\r\n                                    select\r\n                                    label=\"Tipo de medida\"\r\n                                    error={this.state.unidad_medida.length === 0}\r\n                                    value={this.state.unidad_medida}\r\n                                    onChange={event => this.setState({ unidad_medida: event.target.value })}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                    style={styles.styleText}\r\n                                >\r\n                                    <MenuItem value={'unidades'}>Unidades</MenuItem>\r\n                                    <MenuItem value={'litros'}>Litros</MenuItem>\r\n                                    <MenuItem value={'metros'}>Metros</MenuItem>\r\n                                    <MenuItem value={'cajas'}>Cajas</MenuItem>\r\n                                    <MenuItem value={'piezas'}>Piezas</MenuItem>\r\n                                    <MenuItem value={'kilos'}>Kilos</MenuItem>\r\n                                    <MenuItem value={'libras'}>Libras</MenuItem>\r\n                                </TextField>\r\n\r\n                                <Grid container spacing={24}>\r\n                                    <Grid item xs={6}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-stock-actual-item\"\r\n                                            label=\"Stock actual\"\r\n                                            error={this.state.stock_actual.length === 0}\r\n                                            required\r\n                                            disabled\r\n                                            onChange={(event) => this.setState({ stock_actual: event.target.value })}\r\n                                            value={this.state.stock_actual}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-localizacion-producto\"\r\n                                            label=\"Localización\"\r\n                                            required\r\n                                            onChange={(event) => this.setState({ localizacion_producto: event.target.value })}\r\n                                            value={this.state.localizacion_producto}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                                <Grid container spacing={24}>\r\n                                    <Grid item xs={6}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-stock-minimo\"\r\n                                            label=\"Stock minimo\"\r\n                                            error={this.state.stock_minimo.length === 0}\r\n                                            required\r\n                                            onChange={(event) => this.setState({ stock_minimo: event.target.value })}\r\n                                            value={this.state.stock_minimo}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <TextField\r\n                                            style={styles.styleText}\r\n                                            id=\"standard-stock-maximo\"\r\n                                            label=\"Stock máximo\"\r\n                                            error={this.state.stock_maximo.length === 0}\r\n                                            required\r\n                                            onChange={(event) => this.setState({ stock_maximo: event.target.value })}\r\n                                            value={this.state.stock_maximo}\r\n                                            margin=\"normal\"\r\n                                            variant=\"filled\"\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalNewProducto;","import React, { Component } from 'react';\r\nimport { AppBar, Toolbar, IconButton, Typography, Button, TextField, InputAdornment } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport funtions from '../../utils/funtions';\r\nimport setSnackBars from '../plugins/setSnackBars';\r\nclass ModalSettingsPrices extends Component {\r\n\r\n    state = {\r\n        precios: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/precios')\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            precios: funtions.snapshotToArray(snapshot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    agregarNuevoPrecio = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var codigo = funtions.guidGenerator()\r\n                var productosRef = db.ref('users/' + user.uid + '/precios/' + codigo)\r\n                productosRef.set({\r\n                    codigo,\r\n                    nombre: 'Precio nuevo',\r\n                    porcentaje: '0.10',\r\n                    estado: true\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    guardarListaPrecios = lista => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                lista.forEach(item => {\r\n                    var productosRef = db.ref('users/' + user.uid + '/precios/' + item.codigo)\r\n                    productosRef.update({ ...item }).then(() => {\r\n                        this.props.handleClose()\r\n                        setSnackBars.openSnack('success', 'rootSnackBar', 'Precios actualizados', 2000)\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    activar = codigo => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/precios/' + codigo)\r\n                productosRef.update({\r\n                    estado: true\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    desactivar = codigo => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/precios/' + codigo)\r\n                productosRef.update({\r\n                    estado: false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: 600, maxHeight: 650 }}>\r\n                <AppBar style={{\r\n                    position: 'relative',\r\n                }}>\r\n                    <Toolbar>\r\n                        <IconButton color=\"inherit\" onClick={this.props.handleClose} aria-label=\"Close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"title\" color=\"inherit\" style={{ flex: 1, marginLeft: 30 }}>\r\n                            Configurar precios\r\n                        </Typography>\r\n                        <IconButton color=\"inherit\" onClick={() => this.agregarNuevoPrecio()} aria-label=\"Add\">\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                        <IconButton color=\"inherit\" onClick={() => this.guardarListaPrecios(this.state.precios)} aria-label=\"Add\">\r\n                            <SaveIcon />\r\n                        </IconButton>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <List style={{padding:0}}>\r\n                    {\r\n                        this.state.precios.map((item, i) => {\r\n                            return (\r\n                                <ListItem >\r\n                                    <div style={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'row',\r\n                                        alignItems: 'center'\r\n                                    }}>\r\n                                        <Grid container spacing={16}>\r\n                                            <Grid item xs={3}>\r\n                                                <TextField\r\n                                                    id={`${item.codigo}_porcentaje`}\r\n                                                    value={item.porcentaje}\r\n                                                    label='Porcentaje'\r\n                                                    variant='filled' \r\n                                                    style={{ width: '100%' }}\r\n                                                    onChange={(event => {\r\n                                                        var array = this.state.precios\r\n                                                        array.forEach((it, i) => {\r\n                                                            if (it.codigo === item.codigo) {\r\n                                                                array[i].porcentaje = event.target.value\r\n                                                            }\r\n                                                        })\r\n                                                        this.setState({\r\n                                                            precios: array\r\n                                                        })\r\n                                                    })}\r\n                                                    InputProps={{\r\n                                                        startAdornment: (\r\n                                                            <InputAdornment position=\"start\">\r\n                                                                <div style={{ marginTop: 17, width: 'max-content' }}> {`%`} </div>\r\n                                                            </InputAdornment>\r\n                                                        ),\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={8}>\r\n                                                <TextField\r\n                                                    id={`${item.codigo}_nombre`}\r\n                                                    value={item.nombre}\r\n                                                    label='Nombre del precio'\r\n                                                    variant='filled'\r\n                                                    style={{ width: '100%' }}\r\n                                                    onChange={(event => {\r\n                                                        var array = this.state.precios\r\n                                                        array.forEach((it, i) => {\r\n                                                            if (it.codigo === item.codigo) {\r\n                                                                array[i].nombre = event.target.value\r\n                                                            }\r\n                                                        })\r\n                                                        this.setState({\r\n                                                            precios: array\r\n                                                        })\r\n                                                    })}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={1}>\r\n                                                {\r\n                                                    item.estado === true ?\r\n                                                        <IconButton\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => this.desactivar(item.codigo)}\r\n                                                            disabled={Number(i) === 0  ? true : false}\r\n                                                            aria-label=\"Add\">\r\n                                                            <Visibility style={{color:Number(i) === 0 ?'gray':'#f44336'}}/>\r\n                                                        </IconButton>\r\n                                                        :\r\n                                                        <IconButton\r\n                                                            color=\"primary\"\r\n                                                            disabled={Number(i) === 0  ? true : false}\r\n                                                            onClick={() => this.activar(item.codigo)}\r\n                                                            aria-label=\"Add\">\r\n                                                            <VisibilityOff />\r\n                                                        </IconButton>\r\n                                                }\r\n\r\n\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </div>\r\n                                </ListItem>\r\n                            )\r\n                        })\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalSettingsPrices;","import React, { Component } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst ModalPreguntarCaja = (props) => {\r\n\r\n    return (\r\n        <div style={{ width: 500 }}>\r\n            <Typography variant=\"title\" gutterBottom style={{ textAlign: 'center', margin: 16 }}>\r\n                ¿Desea descontar en caja?\r\n            </Typography>\r\n            <Divider />\r\n            <div style={{ display: 'flex', flexDirection: 'row', margin: 16, justifyContent: 'center' }}>\r\n                <Button color=\"primary\" style={{ marginRight: 16 }} onClick={() => props.handleClose()}>\r\n                    Cancelar\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ marginRight: 16 }} onClick={() => {\r\n                    props.handleDescontarCaja()\r\n                    props.handleClose()\r\n                }}>\r\n                    Descontar de caja\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => {\r\n                    props.handleEvitarCaja()\r\n                    props.handleClose()\r\n                }}>\r\n                    No descontar de caja\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ModalPreguntarCaja;","import React, { Component } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst ModalPreguntarCajaSalida = (props) => {\r\n\r\n    return (\r\n        <div style={{ width: 500 }}>\r\n            <Typography variant=\"title\" gutterBottom style={{ textAlign: 'center', margin: 16 }}>\r\n                ¿Desea sumar a caja?\r\n            </Typography>\r\n            <Divider />\r\n            <div style={{ display: 'flex', flexDirection: 'row', margin: 16, justifyContent: 'center' }}>\r\n                <Button color=\"primary\" style={{ marginRight: 16 }} onClick={() => props.handleClose()}>\r\n                    Cancelar\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" style={{ marginRight: 16 }} onClick={() => {\r\n                    props.handleDescontarCaja()\r\n                    props.handleClose()\r\n                }}>\r\n                    Suma a caja\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => {\r\n                    props.handleEvitarCaja()\r\n                    props.handleClose()\r\n                }}>\r\n                    No sumar a caja\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ModalPreguntarCajaSalida;","import React from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst ModalCancelarVenta = (props) => {\r\n    return (\r\n        <div>\r\n            <DialogTitle id=\"alert-dialog-title\">{\"¿Está seguro que desea devolver esta venta?\"}</DialogTitle>\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\" >\r\n                    Cancelar\r\n                </Button>\r\n                <Button onClick={props.handleCancelarVenta} color=\"primary\" >\r\n                    Aceptar\r\n                </Button>\r\n            </DialogActions>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalCancelarVenta","import React from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst ModalEditarVenta = (props) => {\r\n    return (\r\n        <div>\r\n            <DialogTitle id=\"alert-dialog-title\">{\"¿Está seguro que desea editar esta venta?\"}</DialogTitle>\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\" >\r\n                    Cancelar\r\n                </Button>\r\n                <Button onClick={props.handleEditarVenta} color=\"primary\" >\r\n                    Editar\r\n                </Button>\r\n            </DialogActions>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalEditarVenta","import React from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { Typography, TextField } from '@material-ui/core';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport setSnackBars from '../../plugins/setSnackBars';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nclass ModalFinalizaPago extends React.Component {\r\n    state = {\r\n        medio: '',\r\n        total: '',\r\n        propiedades_numero: '',\r\n        propiedades_banco: '',\r\n\r\n        fecha_vencimiento: `${new Date().getFullYear() + \"-\" + (new Date().getMonth() + 1) + \"-\" + new Date().getDate()}`,\r\n        monto: '',\r\n\r\n        valor_acreditado: '',\r\n        buttonEstadoAceptar:false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/configuracion/dias_a_pagar_defecto\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        Date.prototype.addDays = function (days) {\r\n                            var date = new Date(this.valueOf())\r\n                            date.setDate(date.getDate() + days)\r\n                            var dayDate = date.getDate()\r\n                            var mes = date.getMonth() + 1\r\n                            if (dayDate.toString().length === 1) {\r\n                                dayDate = '0' + dayDate\r\n                            }\r\n                            if (mes.toString().length === 1) {\r\n                                mes = '0' + mes\r\n                            }\r\n                            return `${date.getFullYear()}-${mes}-${dayDate}`;\r\n                        }\r\n                        var date = new Date();\r\n                        this.setState({\r\n                            fecha_vencimiento: date.addDays(Number(snap.val().dias))\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    comprobarTextLlenos = () => {\r\n        if (\r\n            this.state.propiedades_banco.length > 0 &&\r\n            this.state.propiedades_numero.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n\r\n    }\r\n\r\n    finalizarPago = (event) => {\r\n       \r\n        switch (this.props.tipo_pago) {\r\n            case 'efectivo': {\r\n                this.setState({buttonEstadoAceptar:true})\r\n                this.props.handleClose()\r\n                this.props.handleAceptar({ tipo_pago: 'efectivo' })\r\n                break\r\n            }\r\n            case 'credito': {\r\n                this.setState({buttonEstadoAceptar:true})\r\n                this.props.handleClose()\r\n                this.props.handleAceptar({\r\n                    tipo_pago: 'credito',\r\n                    fecha_vencimiento: this.state.fecha_vencimiento,\r\n                    monto: this.props.total,\r\n                    valor_acreditado: this.state.valor_acreditado\r\n                })\r\n                break\r\n            }\r\n            case 'tarjeta-credito': {\r\n                if (this.comprobarTextLlenos()) {\r\n                    this.setState({buttonEstadoAceptar:true})\r\n                    this.props.handleClose()\r\n                    this.props.handleAceptar({\r\n                        tipo_pago: 'tarjeta-credito',\r\n                        medio: 'Tarjeta de crédito',\r\n                        total: this.props.total,\r\n                        propiedades_numero: this.state.propiedades_numero,\r\n                        propiedades_banco: this.state.propiedades_banco,\r\n                    })\r\n                }\r\n                break\r\n            }\r\n            case 'tarjeta-debito': {\r\n                if (this.comprobarTextLlenos()) {\r\n                    this.setState({buttonEstadoAceptar:true})\r\n                    this.props.handleClose()\r\n                    this.props.handleAceptar({\r\n                        tipo_pago: 'tarjeta-debito',\r\n                        medio: 'Tarjeta de débito',\r\n                        total: this.props.total,\r\n                        propiedades_numero: this.state.propiedades_numero,\r\n                        propiedades_banco: this.state.propiedades_banco,\r\n                    })\r\n                }\r\n                break\r\n            }\r\n            case 'cheque': {\r\n                if (this.comprobarTextLlenos()) {\r\n                    this.setState({buttonEstadoAceptar:true})\r\n                    this.props.handleClose()\r\n                    this.props.handleAceptar({\r\n                        tipo_pago: 'cheque',\r\n                        medio: 'Cheque',\r\n                        total: this.props.total,\r\n                        propiedades_numero: this.state.propiedades_numero,\r\n                        propiedades_banco: this.state.propiedades_banco,\r\n                    })\r\n                }\r\n                break\r\n            }\r\n            case 'transferencia': {\r\n                this.setState({buttonEstadoAceptar:true})\r\n                this.props.handleClose()\r\n                this.props.handleAceptar({ tipo_pago: 'transferencia' })\r\n                break\r\n            }\r\n            default: {\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div id='rootSnackBarModalFinalizar'></div>\r\n                {\r\n                    this.props.tipo_pago === 'efectivo' &&\r\n                    <DialogTitle >{`Pago en efectivo`}</DialogTitle>\r\n                }\r\n                {\r\n                    this.props.tipo_pago === 'credito' &&\r\n                    <DialogTitle >{`Pago a crédito`}</DialogTitle>\r\n                }\r\n                {\r\n                    this.props.tipo_pago === 'tarjeta-credito' &&\r\n                    <DialogTitle >{`Pago con tarjeta de crédito`}</DialogTitle>\r\n                }\r\n                {\r\n                    this.props.tipo_pago === 'tarjeta-debito' &&\r\n                    <DialogTitle >{`Pago con tarjeta de débito`}</DialogTitle>\r\n                }\r\n                {\r\n                    this.props.tipo_pago === 'cheque' &&\r\n                    <DialogTitle >{`Pago con cheque`}</DialogTitle>\r\n                }\r\n                {\r\n                    this.props.tipo_pago === 'transferencia' &&\r\n                    <DialogTitle >{`Pago con transferencia bancaria`}</DialogTitle>\r\n                }\r\n                <DialogContent>\r\n                    <Typography variant=\"title\" gutterBottom>\r\n                        {`Total: ${this.props.total}`}\r\n                    </Typography>\r\n                    {\r\n                        this.props.tipo_pago === 'efectivo' &&\r\n                        <></>\r\n                    }\r\n                    {\r\n                        this.props.tipo_pago === 'credito' &&\r\n                        <>\r\n                            <TextField\r\n                                id=\"filled-acreditoa-venta\"\r\n                                label=\"Valor acreditado\"\r\n                                value={this.state.valor_acreditado}\r\n                                onChange={event => this.setState({\r\n                                    valor_acreditado: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                            </TextField>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                label=\"Fecha de pago\"\r\n                                type=\"date\"\r\n                                error={this.state.fecha_vencimiento.length > 0 ? false : true}\r\n                                value={this.state.fecha_vencimiento}\r\n                                onChange={event => this.setState({\r\n                                    fecha_vencimiento: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                            </TextField>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.props.tipo_pago === 'tarjeta-credito' &&\r\n                        <>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                helperText={this.state.propiedades_numero.length > 0 ? '' : 'Complete este campo'}\r\n                                label=\"Numero de la tarjeta de crédito\"\r\n                                error={this.state.propiedades_numero.length < 16 ? true : false}\r\n                                value={this.state.propiedades_numero}\r\n                                onChange={event => this.setState({\r\n                                    propiedades_numero: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                autoComplete='off'\r\n                                InputProps={{\r\n                                    inputComponent: NumberFormatCustomTarjeta,\r\n                                }}\r\n                            >\r\n                            </TextField>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                helperText={this.state.propiedades_banco.length > 0 ? '' : 'Complete este campo'}\r\n                                label=\"Banco\"\r\n                                error={this.state.propiedades_banco.length > 0 ? false : true}\r\n                                value={this.state.propiedades_banco}\r\n                                onChange={event => this.setState({\r\n                                    propiedades_banco: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                autoComplete='off'\r\n                            >\r\n                            </TextField>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.props.tipo_pago === 'tarjeta-debito' &&\r\n                        <>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                helperText={this.state.propiedades_numero.length > 0 ? '' : 'Complete este campo'}\r\n                                label=\"Numero de la tarjeta de débito\"\r\n                                error={this.state.propiedades_numero.length < 16 ? true : false}\r\n                                value={this.state.propiedades_numero}\r\n                                onChange={event => this.setState({\r\n                                    propiedades_numero: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                autoComplete='off'\r\n                                InputProps={{\r\n                                    inputComponent: NumberFormatCustomTarjeta,\r\n                                }}\r\n                            >\r\n                            </TextField>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                label=\"Banco\"\r\n                                helperText={this.state.propiedades_banco.length > 0 ? '' : 'Complete este campo'}\r\n                                error={this.state.propiedades_banco.length > 0 ? false : true}\r\n                                value={this.state.propiedades_banco}\r\n                                onChange={event => this.setState({\r\n                                    propiedades_banco: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                autoComplete='off'\r\n                            >\r\n                            </TextField>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.props.tipo_pago === 'cheque' &&\r\n                        <>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                helperText={this.state.propiedades_numero.length > 0 ? '' : 'Complete este campo'}\r\n                                label=\"Numero de cheque\"\r\n                                error={this.state.propiedades_numero.length > 0 ? false : true}\r\n                                value={this.state.propiedades_numero}\r\n                                onChange={event => this.setState({\r\n                                    propiedades_numero: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                autoComplete='off'\r\n                            >\r\n                            </TextField>\r\n                            <TextField\r\n                                id=\"filled-fecha-venta\"\r\n                                helperText={this.state.propiedades_banco.length > 0 ? '' : 'Complete este campo'}\r\n                                label=\"Banco\"\r\n                                error={this.state.propiedades_banco.length > 0 ? false : true}\r\n                                value={this.state.propiedades_banco}\r\n                                onChange={event => this.setState({\r\n                                    propiedades_banco: event.target.value\r\n                                })}\r\n                                margin=\"normal\"\r\n                                variant=\"outlined\"\r\n                                style={{ width: '100%' }}\r\n                                autoComplete='off'\r\n                            >\r\n                            </TextField>\r\n                        </>\r\n                    }\r\n                    {\r\n                        this.props.tipo_pago === 'transferencia' &&\r\n                        <></>\r\n                    }\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button disabled={this.state.buttonEstadoAceptar} onClick={event => this.finalizarPago(event)} color=\"primary\" >\r\n                        Aceptar\r\n                </Button>\r\n                    <Button onClick={() => this.props.handleClose()} color=\"primary\" >\r\n                        Cancelar\r\n                </Button>\r\n                </DialogActions>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst NumberFormatCustomTarjeta = (props) => {\r\n    const { inputRef, onChange, ...other } = props;\r\n    return (\r\n        <NumberFormat\r\n            {...other}\r\n            getInputRef={inputRef}\r\n            onValueChange={values => {\r\n                onChange({\r\n                    target: {\r\n                        value: values.value,\r\n                    },\r\n                });\r\n            }}\r\n            thousandSeparator\r\n            format=\"####  ####  ####  ####\"\r\n            mask=\"_\"\r\n        />\r\n        \r\n    );\r\n}\r\n\r\n\r\nexport default ModalFinalizaPago","import React from 'react';\r\n\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport ModalContainerNormal from '../modals_container/ModalContainerNormal'\r\nimport ModalNewCategoria from '../modals_container/ModalNewCategoria'\r\n\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport funtions from '../../utils/funtions';\r\nimport setSnackBars from './setSnackBars';\r\n\r\n\r\nclass AutoCompleteAdmin extends React.Component {\r\n    state = {\r\n        anchorEl: null,\r\n        dataAuto: [],\r\n        dataAutoTemporal: [],\r\n        open: false,\r\n\r\n        checkedKey: null,\r\n        // estado del modal\r\n        estadoModalSimple: false,\r\n        //item seleccionado\r\n        itemSelected: null,\r\n        //tipo modal estado\r\n        estadoModal: null,\r\n        //Valor del texto del modal\r\n        valorTextoNuevoEditar: '',\r\n        //texto text field\r\n        textoNombreProveedor: ''\r\n    };\r\n\r\n    handleClick = event => {\r\n        const { currentTarget } = event;\r\n        this.setState({\r\n            anchorEl: currentTarget,\r\n            open: true\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            dataAuto: [],\r\n                            dataAutoTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        this.setState({\r\n                            dataAuto: lista,\r\n                            dataAutoTemporal: lista,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            dataAuto: [],\r\n                            dataAutoTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillReceiveProps(props){\r\n        this.getNombreDataBase(props.itemCategoria)\r\n        this.setState({checkedKey:props.itemCategoria})\r\n    }\r\n\r\n    getNombreDataBase = (codigo) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef + \"/\" + codigo);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            textoNombreProveedor: snapshot.val().nombre\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            textoNombreProveedor: ''\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    getResult = (array, text) => {\r\n        var arrayL = array.filter((obj) => obj.nombre.toLowerCase().includes(text))\r\n        if (arrayL.length > 0) {\r\n            this.setState({\r\n                dataAuto: [arrayL]\r\n            })\r\n        } else {\r\n            this.setState({\r\n                dataAuto: [{ nombre: 'No existe', key: 0 }]\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleSetTextCategori = () => {\r\n        this.setState({\r\n            open: false\r\n        })\r\n    }\r\n\r\n    handleToggle = value => () => {\r\n        const { checkedKey } = this.state\r\n        if (checkedKey === value) {\r\n            this.setState({\r\n                checkedKey: null,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                checkedKey: value,\r\n            });\r\n        }\r\n    };\r\n\r\n    handleNuevoItem = (nuevoItem) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef + \"/\" + funtions.guidGenerator());\r\n                productosRef.set({\r\n                    nombre: nuevoItem\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    handleActualizarItem = (nuevoItem, id) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef + \"/\" + id);\r\n                productosRef.update({\r\n                    nombre: nuevoItem\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    handleEliminarItem = async (id) => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef + \"/\" + id);\r\n                var collections = db.ref('users/' + user.uid + \"/\" + \"productos\");\r\n\r\n                collections.orderByChild(this.props.dataRefObject + '/id').equalTo(id).once('value').then((snap) => {\r\n                    if (snap.val()) {\r\n                        setSnackBars.openSnack('error', 'rootSnackBar', \"Esta categoria está ocupada\", 2000)\r\n                    } else {\r\n                        productosRef.remove()\r\n                    }\r\n                })\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            anchorEl,\r\n            open,\r\n            checkedKey,\r\n            estadoModalSimple,\r\n            itemSelected,\r\n            dataAuto,\r\n            estadoModal,\r\n            valorTextoNuevoEditar,\r\n            textoNombreProveedor\r\n        } = this.state;\r\n\r\n        const {\r\n            itemCategoria,\r\n            id,\r\n            styleText,\r\n            nameTextFiel,\r\n            margin,\r\n            textItemVacio\r\n        } = this.props\r\n\r\n        return (\r\n\r\n            <div  >\r\n                <TextField\r\n                    id={id}\r\n                    variant=\"contained\"\r\n                    error={textoNombreProveedor ? textoNombreProveedor.length > 0 ? false : true : true}\r\n                    value={`${textoNombreProveedor}`}\r\n                    onChange={(event) => {\r\n                        //this.handleClick(event)\r\n                        //this.setState({ anchorEl: event.currentTarget})\r\n                        //this.getResult(this.state.dataAutoTemporal, event.target.value)\r\n                        //this.props.changueText(event.target.value)\r\n                    }}\r\n                    style={styleText}\r\n                    required\r\n                    label={nameTextFiel}\r\n                    margin={margin ? 'dense' : 'normal'}\r\n                    variant=\"outlined\"\r\n                    onFocus={(event) => this.handleClick(event)}\r\n                />\r\n\r\n                <ModalContainerNormal\r\n                    open={estadoModalSimple}\r\n                    handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                >\r\n                    <ModalNewCategoria\r\n                        item={itemSelected}\r\n                        estadoModal={estadoModal}\r\n                        title={nameTextFiel}\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                        valorTexto={valorTextoNuevoEditar}\r\n                        handleSetValorTexto={text => this.setState({ valorTextoNuevoEditar: text })}\r\n                        handleNuevoItem={text => this.handleNuevoItem(text)}\r\n                        handleActualizarItem={(text, id) => this.handleActualizarItem(text, id)}\r\n                        handleEliminarItem={id => this.handleEliminarItem(id)}\r\n                    />\r\n                </ModalContainerNormal>\r\n\r\n                <Popper open={open} anchorEl={anchorEl} transition style={{ zIndex: 1300, minWidth: 350 }} >\r\n                    {({ TransitionProps }) => (\r\n                        <Fade {...TransitionProps} timeout={350}>\r\n                            <Paper elevation={6}>\r\n                                <AppBar position=\"static\" color=\"default\">\r\n                                    <Toolbar>\r\n                                        <Tooltip title=\"Seleccionar\" placement=\"top\">\r\n                                            <IconButton color=\"primary\" onClick={() => {\r\n                                                this.props.changueText(checkedKey)\r\n                                                this.setState({ open: false })\r\n                                                this.getNombreDataBase(checkedKey)\r\n                                            }}>\r\n                                                <CheckIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                       {/*  <Tooltip title=\"Cancelar\" placement=\"top\">\r\n                                            <IconButton color=\"secondary\" onClick={() => {\r\n                                                this.setState({ open: false })\r\n                                            }}>\r\n                                                <CloseIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip> */}\r\n                                        <div style={{ display: 'flex', flex: 1 }}></div>\r\n                                        <Tooltip title=\"Agregar\" placement=\"top\">\r\n                                            <IconButton color=\"secondary\" onClick={() => {\r\n                                                this.setState({\r\n                                                    itemSelected: null,\r\n                                                    estadoModalSimple: true,\r\n                                                    estadoModal: 'nuevo',\r\n                                                    valorTextoNuevoEditar: ''\r\n                                                })\r\n                                            }}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Editar\" placement=\"top\">\r\n                                            <IconButton color=\"secondary\" onClick={() => {\r\n                                                if (checkedKey != null) {\r\n                                                    this.setState({\r\n                                                        itemSelected: dataAuto.filter(item => item.id === checkedKey)[0],\r\n                                                        estadoModalSimple: true,\r\n                                                        estadoModal: 'editar',\r\n                                                        valorTextoNuevoEditar: dataAuto.filter(item => item.id === checkedKey)[0].nombre\r\n                                                    })\r\n                                                }\r\n                                            }}>\r\n                                                <EditIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                        <Tooltip title=\"Eliminar\" placement=\"top\">\r\n                                            <IconButton color=\"secondary\" onClick={() => {\r\n                                                if (checkedKey != null) {\r\n                                                    this.setState({\r\n                                                        itemSelected: dataAuto.filter(item => item.id === checkedKey)[0],\r\n                                                        estadoModalSimple: true,\r\n                                                        estadoModal: 'eliminar'\r\n                                                    })\r\n                                                }\r\n                                            }}\r\n                                            >\r\n                                                <DeleteIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                {\r\n                                    dataAuto.length > 0 ?\r\n                                        <List style={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                            {\r\n                                                this.state.dataAuto.map((item) => {\r\n                                                    return (\r\n                                                        <ListItem key={item.id} button onClick={\r\n                                                            this.handleToggle(item.id)\r\n                                                            //this.props.changueText(item.nombre)\r\n                                                            //this.handleSetTextCategori()\r\n                                                        }\r\n                                                        >\r\n                                                            <Checkbox\r\n                                                                style={{ padding: 0 }}\r\n                                                                onChange={this.handleToggle(item.id)}\r\n                                                                checked={checkedKey === item.id}\r\n                                                            />\r\n                                                            <ListItemText primary={`${item.nombre}`} />\r\n                                                        </ListItem>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </List>\r\n                                        :\r\n                                        <div style={{ margin: 16, paddingBottom: 16 }}>\r\n                                            <Typography variant=\"subheading\" gutterBottom>\r\n                                                {textItemVacio}\r\n                                            </Typography>\r\n                                        </div>\r\n                                }\r\n\r\n                            </Paper>\r\n                        </Fade>\r\n                    )}\r\n                </Popper>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoCompleteAdmin\r\n","import React from 'react';\r\n\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../utils/funtions';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FullScreenDialog from '../components/FullScreenDialog';\r\nimport ModalNewCliente from '../modals_container/ModalNewCliente';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nclass AutoCompleteCliente extends React.Component {\r\n    state = {\r\n        anchorEl: null,\r\n        listaClientes: [],\r\n        listaClientesTemporal: [],\r\n        \r\n        //estado lista \r\n        estadoListaLoader: 'vacia',\r\n        //texto buscado\r\n        textoBuscado: '',\r\n        //selecciona automatica\r\n        //estado modal\r\n        estadoModalSimple:false,\r\n        //texto label\r\n        textLabel:''\r\n    };\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/clientes');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaClientes: [],\r\n                            estadoListaLoader: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var listaFiltrada = lista.filter(item => item.estado === true)\r\n                        this.setState({\r\n                            listaClientes: listaFiltrada,\r\n                            estadoListaLoader: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaClientes: [],\r\n                            estadoListaLoader: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSearchItems = (text) => {\r\n        this.setState({ textoBuscado: text })\r\n\r\n            if (text.length > 0) {\r\n                let array = funtions.filterObjectsCedulas(this.state.listaClientes, text)\r\n                this.setState({\r\n                    listaClientesTemporal: array\r\n                })\r\n\r\n            } else {\r\n                this.setState({\r\n                    listaClientesTemporal: []\r\n                })\r\n            }\r\n        }\r\n    \r\n\r\n    handleToggle = (item) => {\r\n        this.props.onChangue(item)\r\n        this.setState({\r\n            listaClientesTemporal: [],\r\n            textoBuscado: '',\r\n            textLabel:item.nombre\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            anchorEl,\r\n        } = this.state;\r\n\r\n        const {\r\n            styleText,\r\n            margin,\r\n        } = this.props\r\n\r\n        return (\r\n            <div  >\r\n                <TextField\r\n                    id=\"handle-id-clientes-selected\"\r\n                    variant=\"contained\"\r\n                    value={this.state.textoBuscado}\r\n                    onChange={event => {\r\n                        this.handleSearchItems(event.target.value)\r\n                    }}\r\n                    style={styleText}\r\n                    label={this.state.textLabel.length>0?this.state.textLabel:'Ingresar cedula o Ruc'}\r\n                    margin={margin ? 'dense' : 'normal'}\r\n                    variant=\"outlined\"\r\n                    onFocus={(event) => this.setState({ anchorEl: event.currentTarget })}\r\n                    error={this.props.error}\r\n                    autoComplete='off'\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment variant=\"filled\" position=\"end\">\r\n                                {\r\n                                    this.state.textoBuscado.length > 0 &&\r\n                                    <Tooltip title=\"Borrar busqueda\" >\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle clean text\"\r\n                                            onClick={() => this.setState({  listaClientesTemporal: [],textoBuscado: '' })}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                }\r\n\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n\r\n                <FullScreenDialog openModal={this.state.estadoModalSimple}>\r\n                    <ModalNewCliente\r\n                        item={null}\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                        usuario={this.props.usuario}\r\n                    />\r\n                </FullScreenDialog>\r\n\r\n                <Popper open={this.state.listaClientesTemporal.length > 0} anchorEl={anchorEl} transition style={{ zIndex: 1300, maxWidth: 640 }} >\r\n                    {({ TransitionProps }) => (\r\n                        <Fade {...TransitionProps} timeout={350}>\r\n                            <Paper elevation={15}>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    paddingLeft: 24,\r\n                                    paddingRight: 24,\r\n                                    paddingTop: 16,\r\n                                    width: '100%'\r\n                                }}\r\n                                >\r\n                                    <div style={{ width: '40%', paddingRight: 32 }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Nombre\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <div style={{ width: '20%', paddingRight: 32 }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Identificación\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <div style={{ width: '70%', paddingRight: 32, display:'flex', flexDirection:'row' }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Email\r\n                                        </Typography>\r\n                                        <div style={{flex:1}}></div>\r\n                                        <Tooltip title=\"Agregar\" placement=\"top\">\r\n                                            <Button variant=\"raised\" size='small' color=\"secondary\" onClick={() => {\r\n                                                this.setState({\r\n                                                    estadoModalSimple: true,\r\n                                                    estadoModal: 'nuevo'\r\n                                                })\r\n                                            }}>\r\n                                               Nuevo Cliente\r\n                                            </Button >\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </div>\r\n                                <Divider />\r\n                                {\r\n                                    <List style={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                        {\r\n                                            this.state.listaClientesTemporal.map((item) => {\r\n                                                return (\r\n                                                    <ListItem key={item.id} button onClick={() =>\r\n                                                        this.handleToggle(item)\r\n                                                    }\r\n                                                    >\r\n                                                        <ListItemText style={{ width:'25vw' }} primary={`${item.nombre}`} />\r\n                                                        <ListItemText style={{ width:'15vw'  }} primary={`${item.numero_identificacion}`} />\r\n                                                        <ListItemText style={{ width: '40vw'  }} primary={`${item.email}`} />\r\n                                                    </ListItem>\r\n                                                )\r\n                                            }\r\n                                            )\r\n                                        }\r\n                                    </List>\r\n                                }\r\n\r\n                            </Paper>\r\n                        </Fade>\r\n                    )}\r\n                </Popper>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoCompleteCliente\r\n","import React from 'react';\r\n\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport funtions from '../../utils/funtions';\r\nimport FullScreenDialog from '../components/FullScreenDialog';\r\nimport ModalNewCliente from '../modals_container/ModalNewCliente';\r\n\r\n\r\nclass AutoComplete_GetItems extends React.Component {\r\n    state = {\r\n        anchorEl: null,\r\n        dataAuto: [],\r\n        dataAutoTemporal: [],\r\n        open: false,\r\n\r\n        checkedKey: 'null',\r\n        // estado del modal\r\n        estadoModalSimple: false,\r\n        //item seleccionado\r\n        itemSelected: null,\r\n        //tipo modal estado\r\n        estadoModal: null,\r\n        //Valor del texto del modal\r\n        valorTextoNuevoEditar: '',\r\n        //texto text field\r\n        textoNombreProveedor: ''\r\n    };\r\n\r\n    handleClick = event => {\r\n        const { currentTarget } = event;\r\n        this.setState({\r\n            anchorEl: currentTarget,\r\n            open: true\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            dataAuto: [],\r\n                            dataAutoTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var listaFiltrada = lista.filter(item => item.estado === true)\r\n                        this.setState({\r\n                            dataAuto: listaFiltrada,\r\n                            dataAutoTemporal: listaFiltrada,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            dataAuto: [],\r\n                            dataAutoTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.getNombreDataBase(props.itemCategoria)\r\n        this.setState({ checkedKey: props.itemCategoria })\r\n    }\r\n\r\n    getNombreDataBase = (codigo) => {\r\n        if (codigo) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef + \"/\" + codigo);\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({\r\n                                textoNombreProveedor: snapshot.val().nombre\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                textoNombreProveedor: ''\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleToggle = value => () => {\r\n        const { checkedKey } = this.state\r\n        if (checkedKey === value) {\r\n            this.setState({\r\n                checkedKey: 'null',\r\n            });\r\n        } else {\r\n            this.setState({\r\n                checkedKey: value,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const {\r\n            anchorEl,\r\n            open,\r\n            checkedKey,\r\n            estadoModalSimple,\r\n            itemSelected,\r\n            dataAuto,\r\n            textoNombreProveedor\r\n        } = this.state;\r\n\r\n        const {\r\n            itemCategoria,\r\n            id,\r\n            styleText,\r\n            nameTextFiel,\r\n            margin,\r\n            textItemVacio\r\n        } = this.props\r\n       \r\n\r\n        return (\r\n\r\n            <div  >\r\n                <TextField\r\n                    id={id}\r\n                    variant=\"contained\"\r\n                    error={textoNombreProveedor ? textoNombreProveedor.length > 0 ? false : true : true}\r\n                    value={`${textoNombreProveedor}`}\r\n                    style={styleText}\r\n                    required\r\n                    label={nameTextFiel}\r\n                    margin={margin ? 'dense' : 'normal'}\r\n                    variant=\"outlined\"\r\n                    onFocus={(event) => this.handleClick(event)}\r\n                    autoComplete=\"off\"\r\n                />\r\n\r\n\r\n                <FullScreenDialog openModal={estadoModalSimple}>\r\n                    <ModalNewCliente\r\n                        item={itemSelected}\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                        usuario={this.props.usuario}\r\n                    />\r\n                </FullScreenDialog>\r\n\r\n                <Popper open={open} anchorEl={anchorEl} transition style={{ zIndex: 1300, minWidth: 350 }} >\r\n                    {({ TransitionProps }) => (\r\n                        <Fade {...TransitionProps} timeout={350}>\r\n                            <Paper elevation={6}>\r\n                                <AppBar position=\"static\" color=\"default\">\r\n                                    <Toolbar>\r\n                                        <Tooltip title=\"Seleccionar\" placement=\"top\">\r\n                                            <IconButton color=\"primary\" onClick={() => {\r\n                                                this.props.changueText(checkedKey)\r\n                                                this.setState({ open: false })\r\n                                                this.getNombreDataBase(checkedKey)\r\n                                            }}>\r\n                                                <CheckIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                        <div style={{ display: 'flex', flex: 1 }}></div>\r\n                                        <Tooltip title=\"Agregar\" placement=\"top\">\r\n                                            <IconButton color=\"secondary\" onClick={() => {\r\n                                                this.setState({\r\n                                                    itemSelected: null,\r\n                                                    estadoModalSimple: true,\r\n                                                    estadoModal: 'nuevo',\r\n                                                    valorTextoNuevoEditar: ''\r\n                                                })\r\n                                            }}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                {\r\n                                    dataAuto.length > 0 ?\r\n                                        <List style={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                            {\r\n                                                this.state.dataAuto.map((item) => {\r\n                                                    return (\r\n                                                        <ListItem key={item.id} button onClick={\r\n                                                            this.handleToggle(item.id)\r\n                                                        }\r\n                                                        >\r\n                                                            <Checkbox\r\n                                                                style={{ padding: 0 }}\r\n                                                                onChange={this.handleToggle(item.id)}\r\n                                                                checked={checkedKey === item.id}\r\n                                                            />\r\n                                                            <ListItemText primary={`${item.nombre}`} />\r\n                                                        </ListItem>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </List>\r\n                                        :\r\n                                        <div style={{ margin: 16, paddingBottom: 16 }}>\r\n                                            <Typography variant=\"subheading\" gutterBottom>\r\n                                                {textItemVacio}\r\n                                            </Typography>\r\n                                        </div>\r\n                                }\r\n\r\n                            </Paper>\r\n                        </Fade>\r\n                    )}\r\n                </Popper>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoComplete_GetItems\r\n","import React from 'react';\r\n\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport funtions from '../../utils/funtions';\r\nimport FullScreenDialog from '../components/FullScreenDialog';\r\nimport ModalNewEditProveedor from '../modals_container/ModalNewEditProveedor';\r\n\r\n\r\nclass AutoComplete_GetItems extends React.Component {\r\n    state = {\r\n        anchorEl: null,\r\n        dataAuto: [],\r\n        dataAutoTemporal: [],\r\n        open: false,\r\n        checkedKey: 'null',\r\n        // estado del modal\r\n        estadoModalSimple: false,\r\n        //item seleccionado\r\n        itemSelected: null,\r\n        //tipo modal estado\r\n        estadoModal: null,\r\n        //Valor del texto del modal\r\n        valorTextoNuevoEditar: '',\r\n        //texto text field\r\n        textoNombreProveedor: ''\r\n    };\r\n\r\n    handleClick = event => {\r\n        const { currentTarget } = event;\r\n        this.setState({\r\n            anchorEl: currentTarget,\r\n            open: true\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            dataAuto: [],\r\n                            dataAutoTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var listaFiltrada = lista.filter(item => item.estado === true)\r\n                        this.setState({\r\n                            dataAuto: listaFiltrada,\r\n                            dataAutoTemporal: listaFiltrada,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            dataAuto: [],\r\n                            dataAutoTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.getNombreDataBase(props.itemCategoria)\r\n        this.setState({ checkedKey: props.itemCategoria })\r\n    }\r\n\r\n    getNombreDataBase = (codigo) => {\r\n        if (codigo) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + \"/\" + this.props.dataRef + \"/\" + codigo);\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({\r\n                                textoNombreProveedor: snapshot.val().nombre\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                textoNombreProveedor: ''\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleToggle = value => () => {\r\n        const { checkedKey } = this.state\r\n        if (checkedKey === value) {\r\n            this.setState({\r\n                checkedKey: 'null',\r\n            });\r\n        } else {\r\n            this.setState({\r\n                checkedKey: value,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const {\r\n            anchorEl,\r\n            open,\r\n            checkedKey,\r\n            estadoModalSimple,\r\n            itemSelected,\r\n            dataAuto,\r\n            textoNombreProveedor\r\n        } = this.state;\r\n\r\n        const {\r\n            itemCategoria,\r\n            id,\r\n            styleText,\r\n            nameTextFiel,\r\n            margin,\r\n            textItemVacio\r\n        } = this.props\r\n\r\n        return (\r\n\r\n            <div  >\r\n                <TextField\r\n                    id={id}\r\n                    variant=\"contained\"\r\n                    error={textoNombreProveedor ? textoNombreProveedor.length > 0 ? false : true : true}\r\n                    value={`${textoNombreProveedor}`}\r\n                    style={styleText}\r\n                    required\r\n                    label={nameTextFiel}\r\n                    margin={margin ? 'dense' : 'normal'}\r\n                    variant=\"outlined\"\r\n                    onFocus={(event) => this.handleClick(event)}\r\n                    autoComplete=\"off\"\r\n                />\r\n\r\n\r\n                <FullScreenDialog openModal={estadoModalSimple}>\r\n                    <ModalNewEditProveedor\r\n                        item={itemSelected}\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                        usuario={this.props.usuario}\r\n                    />\r\n                </FullScreenDialog>\r\n\r\n                <Popper open={open} anchorEl={anchorEl} transition style={{ zIndex: 1300, minWidth: 350 }} >\r\n                    {({ TransitionProps }) => (\r\n                        <Fade {...TransitionProps} timeout={350}>\r\n                            <Paper elevation={6}>\r\n                                <AppBar position=\"static\" color=\"default\">\r\n                                    <Toolbar>\r\n                                        <Tooltip title=\"Seleccionar\" placement=\"top\">\r\n                                            <IconButton color=\"primary\" onClick={() => {\r\n                                                this.props.changueText(checkedKey)\r\n                                                this.setState({ open: false })\r\n                                                this.getNombreDataBase(checkedKey)\r\n                                            }}>\r\n                                                <CheckIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                        <div style={{ display: 'flex', flex: 1 }}></div>\r\n                                        <Tooltip title=\"Agregar\" placement=\"top\">\r\n                                            <IconButton color=\"secondary\" onClick={() => {\r\n                                                this.setState({\r\n                                                    itemSelected: null,\r\n                                                    estadoModalSimple: true,\r\n                                                    estadoModal: 'nuevo',\r\n                                                    valorTextoNuevoEditar: ''\r\n                                                })\r\n                                            }}>\r\n                                                <AddIcon fontSize=\"small\" />\r\n                                            </IconButton >\r\n                                        </Tooltip>\r\n                                    </Toolbar>\r\n                                </AppBar>\r\n                                {\r\n                                    dataAuto.length > 0 ?\r\n                                        <List style={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                            {\r\n                                                this.state.dataAuto.map((item) => {\r\n                                                    return (\r\n                                                        <ListItem key={item.id} button onClick={\r\n                                                            this.handleToggle(item.id)\r\n                                                        }\r\n                                                        >\r\n                                                            <Checkbox\r\n                                                                style={{ padding: 0 }}\r\n                                                                onChange={this.handleToggle(item.id)}\r\n                                                                checked={checkedKey === item.id}\r\n                                                            />\r\n                                                            <ListItemText primary={`${item.nombre}`} />\r\n                                                        </ListItem>\r\n                                                    )\r\n                                                }\r\n                                                )\r\n                                            }\r\n                                        </List>\r\n                                        :\r\n                                        <div style={{ margin: 16, paddingBottom: 16 }}>\r\n                                            <Typography variant=\"subheading\" gutterBottom>\r\n                                                {textItemVacio}\r\n                                            </Typography>\r\n                                        </div>\r\n                                }\r\n\r\n                            </Paper>\r\n                        </Fade>\r\n                    )}\r\n                </Popper>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoComplete_GetItems\r\n","import React from 'react';\r\n\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../utils/funtions';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FullScreenDialog from '../components/FullScreenDialog';\r\nimport ModalNewEditProveedor from '../modals_container/ModalNewEditProveedor';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nclass AutoCompleteProveedores extends React.Component {\r\n    state = {\r\n        anchorEl: null,\r\n        listaProvedores: [],\r\n        listaProvedoresTemporal: [],\r\n\r\n        //estado lista \r\n        estadoListaLoader: 'vacia',\r\n        //texto buscado\r\n        textoBuscado: '',\r\n        //selecciona automatica\r\n        //texto label\r\n        textLabel: '',\r\n        //estado modals\r\n        openModalFullScreen: false,\r\n    };\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/proveedores');\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaProvedores: [],\r\n                            estadoListaLoader: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var listaFiltrada = lista.filter(item => item.estado === true)\r\n                        this.setState({\r\n                            listaProvedores: listaFiltrada,\r\n                            estadoListaLoader: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaProvedores: [],\r\n                            estadoListaLoader: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });        \r\n    }\r\n\r\n    componentWillReceiveProps(props){\r\n        if (props.codigoProveedor.length>0) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/proveedores/'+props.codigoProveedor);\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({textLabel:snapshot.val().nombre})\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSearchItems = (text) => {\r\n        this.setState({ textoBuscado: text })\r\n\r\n        if (text.length > 0) {\r\n            let array = funtions.filterObjectsCedulas(this.state.listaProvedores, text)\r\n            this.setState({\r\n                listaProvedoresTemporal: array\r\n            })\r\n\r\n        } else {\r\n            this.setState({\r\n                listaProvedoresTemporal: []\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleToggle = (item) => {\r\n        this.props.onChangue(item)\r\n        this.setState({\r\n            listaProvedoresTemporal: [],\r\n            textoBuscado: '',\r\n            textLabel: item.nombre\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            anchorEl,\r\n        } = this.state;\r\n\r\n        const {\r\n            styleText,\r\n            margin,\r\n        } = this.props\r\n\r\n        return (\r\n\r\n            <div  >\r\n                <TextField\r\n                    id=\"handle-id-proveedores-selected\"\r\n                    variant=\"contained\"\r\n                    value={this.state.textoBuscado}\r\n                    onChange={event => {\r\n                        this.handleSearchItems(event.target.value)\r\n                    }}\r\n                    style={styleText}\r\n                    label={this.state.textLabel.length > 0 ? this.state.textLabel : 'Seleccionar proveedor'}\r\n                    margin={margin ? 'dense' : 'normal'}\r\n                    variant=\"outlined\"\r\n                    onFocus={(event) => this.setState({ anchorEl: event.currentTarget })}\r\n                    error={this.props.error}\r\n                    autoComplete='off'\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment variant=\"filled\" position=\"end\">\r\n                                {\r\n                                    this.state.textoBuscado.length > 0 &&\r\n                                    <Tooltip title=\"Borrar busqueda\" >\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle clean text\"\r\n                                            onClick={() => this.setState({ textoBuscado: '', listaProvedoresTemporal: [] })}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                }\r\n\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n\r\n                <FullScreenDialog openModal={this.state.openModalFullScreen}>\r\n                    <ModalNewEditProveedor\r\n                        item={null}\r\n                        handleClose={() => this.setState({ openModalFullScreen: false })}\r\n                        usuario={this.props.usuario}\r\n                    />\r\n                </FullScreenDialog>\r\n\r\n                <Popper open={this.state.listaProvedoresTemporal.length > 0} anchorEl={anchorEl} transition style={{ zIndex: 1300, maxWidth: 800 }} >\r\n                    {({ TransitionProps }) => (\r\n                        <Fade {...TransitionProps} timeout={350}>\r\n                            <Paper elevation={15}>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    paddingLeft: 24,\r\n                                    paddingRight: 24,\r\n                                    paddingTop: 16,\r\n                                    width: '100%'\r\n                                }}\r\n                                >\r\n                                    <div style={{ width: '40%', paddingRight: 32 }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Nombre\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <div style={{ width: '40%', paddingRight: 32 }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Tipo Proveedor\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <div style={{ width: '50%', paddingRight: 32, display: 'flex', flexDirection: 'row' }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Email\r\n                                        </Typography>\r\n                                        <div style={{ flex: 1 }}></div>\r\n                                        <Tooltip title=\"Agregar\" placement=\"top\">\r\n                                            <Button variant=\"raised\" size='small' color=\"secondary\" onClick={() => {\r\n                                                this.setState({\r\n                                                    openModalFullScreen: true,\r\n                                                    estadoModal: 'nuevo'\r\n                                                })\r\n                                            }}>\r\n                                                Nuevo Proveedor\r\n                                            </Button >\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </div>\r\n                                <Divider />\r\n                                {\r\n                                    <List style={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                        {\r\n                                            this.state.listaProvedoresTemporal.map((item) => {\r\n                                                return (\r\n                                                    <ListItem key={item.id} button onClick={() =>\r\n                                                        this.handleToggle(item)\r\n                                                    }\r\n                                                    >\r\n                                                        <ListItemText style={{ width: '25vw' }} primary={`${item.nombre}`} />\r\n                                                        <ListItemText style={{ width: '15vw' }} primary={`${item.tipo}`} />\r\n                                                        <ListItemText style={{ width: '40vw' }} primary={`${item.email}`} />\r\n                                                    </ListItem>\r\n                                                )\r\n                                            }\r\n                                            )\r\n                                        }\r\n                                    </List>\r\n                                }\r\n\r\n                            </Paper>\r\n                        </Fade>\r\n                    )}\r\n                </Popper>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoCompleteProveedores\r\n","import React from 'react';\r\n\r\nimport Popper from '@material-ui/core/Popper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport funtions from '../../utils/funtions';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nclass AutoCompleteSelectedProducto extends React.Component {\r\n    state = {\r\n        anchorEl: null,\r\n        listaProductos: [],\r\n        listaProductosTemporal: [],\r\n\r\n        //estado lista \r\n        estadoListaLoader: 'vacia',\r\n        //texto buscado\r\n        textoBuscado: '',\r\n        //selecciona automatica\r\n        checkedSeleccionAutomatica: false\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + \"/productos\");\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaProductos: [],\r\n                            estadoListaLoader: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var listaFiltrada = lista.filter(item => item.estado === true)\r\n                        this.setState({\r\n                            listaProductos: listaFiltrada,\r\n                            estadoListaLoader: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaProductos: [],\r\n                            estadoListaLoader: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    handleSearchItems = (text) => {\r\n        this.setState({ textoBuscado: text })\r\n        if (this.state.checkedSeleccionAutomatica) {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaProductos, text)\r\n            if(array.length===1){\r\n                this.props.onChangue(array[0])\r\n                this.setState({\r\n                    listaProductosTemporal: [],\r\n                    textoBuscado: ''\r\n                })\r\n            }\r\n        } else {\r\n            if (text.length > 0) {\r\n                let array = funtions.filterObjectsCodigo(this.state.listaProductos, text)\r\n                this.setState({\r\n                    listaProductosTemporal: array\r\n                })\r\n\r\n            } else {\r\n                this.setState({\r\n                    listaProductosTemporal: []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleToggle = (item) => {\r\n        this.props.onChangue(item)\r\n        this.setState({\r\n            listaProductosTemporal: [],\r\n            textoBuscado: ''\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            anchorEl,\r\n        } = this.state;\r\n\r\n        const {\r\n            styleText,\r\n            margin,\r\n        } = this.props\r\n\r\n        return (\r\n\r\n            <div  >\r\n                <TextField\r\n                    id=\"handle-id-producto\"\r\n                    variant=\"contained\"\r\n                    value={this.state.textoBuscado}\r\n                    onChange={event => {\r\n                        this.handleSearchItems(event.target.value)\r\n                    }}\r\n                    style={styleText}\r\n                    label='Buscar producto...'\r\n                    margin={margin ? 'dense' : 'normal'}\r\n                    variant=\"outlined\"\r\n                    onFocus={(event) => this.setState({ anchorEl: event.currentTarget })}\r\n\r\n                    autoComplete='off'\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment variant=\"filled\" position=\"end\">\r\n                                {\r\n                                    this.state.textoBuscado.length > 0 &&\r\n                                    <Tooltip title=\"Borrar busqueda\" >\r\n                                        <IconButton\r\n                                            aria-label=\"Toggle clean text\"\r\n                                            onClick={() => this.setState({ textoBuscado: '', listaProductosTemporal:[] })}\r\n                                        >\r\n                                            <CloseIcon />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                }\r\n\r\n                                <Tooltip title=\"Seleccion Automática\" >\r\n                                    <Checkbox\r\n                                        checked={this.state.checkedSeleccionAutomatica}\r\n                                        onChange={() => this.setState({ checkedSeleccionAutomatica: !this.state.checkedSeleccionAutomatica })}\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n\r\n                <Popper open={this.state.listaProductosTemporal.length > 0} anchorEl={anchorEl} transition style={{ zIndex: 1300, minWidth:450 }} >\r\n                    {({ TransitionProps }) => (\r\n                        <Fade {...TransitionProps} timeout={350}>\r\n                            <Paper elevation={6}>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    paddingLeft: 24,\r\n                                    paddingRight: 24,\r\n                                    paddingTop: 16\r\n                                }}\r\n                                >\r\n                                    <div style={{ width: 300, paddingRight: 32 }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Descripción\r\n                                        </Typography>\r\n                                    </div>\r\n                                    <div style={{ width: 110 }}>\r\n                                        <Typography variant=\"subheading\" gutterBottom>\r\n                                            Stock Actual\r\n                                        </Typography>\r\n                                    </div>\r\n                                </div>\r\n                                <Divider />\r\n                                {\r\n                                    <List style={{ maxHeight: 200, overflow: 'auto' }}>\r\n                                        {\r\n                                            this.state.listaProductosTemporal.map((item) => {\r\n                                                return (\r\n                                                    <ListItem key={item.id} button onClick={() =>\r\n                                                        this.handleToggle(item)\r\n                                                    }\r\n                                                    >\r\n                                                        <ListItemText style={{ width: 300 }} primary={`${item.descripcion_producto}`} />\r\n                                                        <ListItemText style={{ width: 110 }} primary={`${item.stock_actual}`} />\r\n                                                    </ListItem>\r\n                                                )\r\n                                            }\r\n                                            )\r\n                                        }\r\n                                    </List>\r\n                                }\r\n\r\n                            </Paper>\r\n                        </Fade>\r\n                    )}\r\n                </Popper>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default AutoCompleteSelectedProducto\r\n","import React, { Component } from 'react';\r\n//lista dependecias\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TextField, InputAdornment, IconButton, Tooltip } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport funtions from '../../utils/funtions';\r\n\r\nimport ModalContainerNormal from '../modals_container/ModalContainerNormal';\r\nimport ModalSettingsPrices from '../modals_container/ModalSettingsPrices';\r\n\r\nclass ContainerSelectPrecios extends Component {\r\n    state = {\r\n        precios: [],\r\n        //estado modales\r\n        estadoModalSimple: false,\r\n    }\r\n    componentDidMount() {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/precios')\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            precios: funtions.snapshotToArray(snapshot)\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid container>\r\n                    <Grid item xs={12}\r\n                        style={{\r\n                            marginLeft: 12,\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center'\r\n                        }}>\r\n                        <Typography variant=\"title\" gutterBottom>\r\n                            Precios\r\n                        </Typography>\r\n                        <div style={{ flex: 1 }}></div>\r\n                        <Tooltip title=\"Configurar precios\">\r\n                            <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"Add to price\"\r\n                                onClick={() => {\r\n                                    this.setState({\r\n                                        estadoModalSimple: true\r\n                                    })\r\n                                }}\r\n                            >\r\n                                <SettingsIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalSimple}\r\n                    handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                >\r\n                    <ModalSettingsPrices\r\n                        handleClose={() => this.setState({ estadoModalSimple: false })}\r\n                    >\r\n\r\n                    </ModalSettingsPrices>\r\n                </ModalContainerNormal>\r\n\r\n                <List style={{ padding: 0 }}>\r\n                    {\r\n                        this.state.precios.map(item => {\r\n                            if (Boolean(item.estado)) {\r\n                                return <ListItem style={{ padding: 0 }}>\r\n                                    <TextField\r\n                                        id={item.codigo}\r\n                                        variant=\"filled\"\r\n                                        label={<div>{item.nombre}</div>}\r\n                                        value={((Number(this.props.precio_costo) * Number(item.porcentaje) + Number(this.props.precio_costo)).toFixed(2))}\r\n                                        style={{ width: '100%' }}\r\n                                        /* InputProps={{\r\n                                            startAdornment: (\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <div style={{ marginTop: 17, width: 'max-content', color: 'rgba(0,0,0,0.4)' }}> {`+ %${item.porcentaje}`} =</div>\r\n                                                </InputAdornment>\r\n                                            ),\r\n                                        }} */\r\n                                    />\r\n                                </ListItem>\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContainerSelectPrecios;","import React, { Component } from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst EmitirFacturaModal = (props) => {\r\n    return (\r\n        <div>\r\n            <DialogTitle id=\"alert-dialog-title\">{\"¿Está seguro que desea emitir esta factura?\"}</DialogTitle>\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\" >\r\n                    Cancelar\r\n                </Button>\r\n                <Button onClick={props.handleEmitir} color=\"primary\" >\r\n                    Emitir\r\n                </Button>\r\n            </DialogActions>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmitirFacturaModal;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SectionContentFactura from '../components/SectionContentFactura';\r\nimport SectionFactura from '../components/SectionFactura';\r\nimport funtions from '../../utils/funtions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MonetizationOn from '@material-ui/icons/MonetizationOn';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport setSnackBars from './setSnackBars';\r\nimport ModalContainerNormal from '../modals_container/ModalContainerNormal';\r\nimport DeleteActivarDesactivar from './deleteActivarDesactivar';\r\nimport AutoCompleteSelectedProducto from './AutoCompleteSelectedProducto';\r\nimport ModalNewVentaJs from './ModalNewVentaJs';\r\nimport { TextField, MenuItem, Typography, FormControlLabel, Switch, Button, Tooltip } from '@material-ui/core';\r\nimport ContenedorProductoVista from './ventas/ContenedorProductoVista';\r\nimport TablaNormal from '../components/tables/TableNormal';\r\nimport ContenedorClienteVista from './ventas/ContenedorClienteVista';\r\nimport ContenedorPreciosTotalesVista from './ventas/ContenedorPreciosTotalesVista';\r\nimport ContenedorSeleccionarTipoPrecio from './ventas/ContenedorSeleccionarTipoPrecio';\r\nimport ContenedorSeleccionarTipoPago from './ventas/ContenedorSeleccionarTipoPago';\r\nimport ContenedorBotonesVenta from './ventas/ContenedorBotonesVenta';\r\nimport ModalFinalizaPago from '../modals_container/ventas/ModalFinalizaPago';\r\nimport ModalSettingsPrices from '../modals_container/ModalSettingsPrices';\r\nimport colors from '../../utils/colors';\r\nimport ContenedorNumeroFactura from './ventas/ContenedorNumeroFactura';\r\n\r\n\r\n\r\n\r\nclass ModalNewVenta extends Component {\r\n\r\n    state = {\r\n        usuario: null,\r\n\r\n        sumaSubTotal: 0,\r\n        sumaIva: 0,\r\n        sumaTotal: 0,\r\n\r\n        mostrarVentana: null,\r\n\r\n        productosSeleccionados: [],\r\n\r\n        //nuevos\r\n        listaProductosSeleccionadosEditados: [],\r\n        listaProductosSeleccionados: [],\r\n        itemProductoCargado: null,\r\n\r\n        cargaAutomatica: false,\r\n\r\n        rowslistaProductos: [\r\n            { id: 'acciones', numeric: true, disablePadding: false, label: '' },\r\n            { id: 'precio_por_defecto', numeric: true, disablePadding: false, label: 'Precio' },\r\n            { id: 'cantidad', numeric: true, disablePadding: false, label: 'Cantidad' },\r\n            { id: 'descripcion_producto', numeric: true, disablePadding: false, label: 'Descripcion' },\r\n            { id: 'precio_venta', numeric: true, disablePadding: false, label: 'Precio/U' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n        ],\r\n        clienteFacturacion: '',\r\n        clienteSeleccionado: null,\r\n\r\n        //tipo de pago\r\n        tipo_pago: 'efectivo',\r\n        //estado de modals\r\n        estadoModalFinalizaPago: false,\r\n        estadoModalSimpleConfigurarPrecios: false,\r\n        //seleecionar producto por defecto\r\n        seleccionarProductoPordefecto: true,\r\n        //\r\n\r\n\r\n        clienteCargadoDB: '',\r\n\r\n        cliente: '',\r\n        descuento: 0,\r\n        observacion: '',\r\n        dinero_resibido: 0,\r\n        cambio: 0,\r\n\r\n\r\n        //valores adicionales para la factura\r\n        precioProductosSinIva: 0,\r\n        precioProductosConIva: 0,\r\n\r\n        //factura electronica\r\n        facturaElectronica: false,\r\n\r\n        // estado modales\r\n        estadoModalGuardarVenta: false,\r\n\r\n        //id del usuario\r\n        uidUser: '',\r\n\r\n        //tipo de venta\r\n        tipo_venta: 'factura',\r\n        // ambiente\r\n        ambienteFacturacion: 0,\r\n        //numero de factura\r\n        numero_factura: ''\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            this.setState({\r\n                uidUser: user.uid\r\n            })\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('auth_admins/' + user.uid + \"/ambiente\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({ ambienteFacturacion: snap.val() })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/precios\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({ precios: funtions.snapshotToArray(snap) })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/configuracion\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        const numero_factura = snap.val().numero_factura\r\n                        const suma = Number(numero_factura) + 1\r\n                        const tamaño = String(suma).length\r\n                        const restaTamaño = 9 - Number(tamaño)\r\n                        var cadenaFinal = ''\r\n                        for (var i = 0; i < restaTamaño; i++) {\r\n                            cadenaFinal = cadenaFinal + '0'\r\n                        }\r\n                        const sumaFinal = `${cadenaFinal}${suma}`\r\n                        this.setState({\r\n                            numero_factura: sumaFinal,\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/usuarios/\" + this.props.usuario.code + '/punto_emision')\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({\r\n                            punto_emision: snap.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('auth_admins/' + user.uid + '/establecimiento/codigo')\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({\r\n                            codigoEstablecimiento: snap.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        this.obtenerPreciosDefectoConfiguracion()\r\n        if (this.props.item) {\r\n            this.setState({\r\n                cambio: this.props.item.cambio,\r\n                cliente: this.props.item.cliente,\r\n                codigo: this.props.item.codigo,\r\n                descuento: this.props.item.descuento,\r\n                dinero_resibido: this.props.item.dinero_resibido,\r\n                empleado: this.props.item.empleado,\r\n                estado: this.props.item.estado,\r\n                factura_emitida: this.props.item.factura_emitida,\r\n                fecha_venta: this.props.item.fecha_venta,\r\n                hora_venta: this.props.item.hora_venta,\r\n                iva: this.props.item.iva,\r\n                observacion: this.props.item.observacion,\r\n                order: this.props.item.order,\r\n                productosSeleccionados: this.props.item.productos,\r\n                subtotal: this.props.item.subtotal,\r\n                tipo_venta: this.props.item.tipo_venta,\r\n                total: this.props.item.total\r\n            })\r\n        }\r\n    }\r\n\r\n    obtenerPreciosDefectoConfiguracion = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/configuracion/precio_por_defecto')\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            precioSeleccionadoCargar: snapshot.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n        if (item.id === 'precio_por_defecto') {\r\n            return <div style={{ width: 100, position: 'relative', left: -80 }}>\r\n                <TextField\r\n                    id={\"filled-unidad-precio-defecto\" }\r\n                    select\r\n                    label=\"\"\r\n                    //error={this.state.precio_por_defecto.length === 0}\r\n                    value={n.precio_por_defecto}\r\n                    onChange={event => {\r\n                        var array = this.state.listaProductosSeleccionados\r\n                        array.forEach((it, i) => {\r\n                            if (it.codigo === n.codigo) {\r\n                                var item = it\r\n                                item.precio_por_defecto = event.target.value\r\n                                array[i] = item\r\n                                this.setState({\r\n                                    listaProductosSeleccionados: array\r\n                                })\r\n                            }\r\n                        })\r\n                        setTimeout(() => {\r\n                            var array2 = this.state.listaProductosSeleccionadosEditados\r\n                            array2.forEach((it, i) => {\r\n                                if (it.codigo === n.codigo) {\r\n                                    var item = it\r\n                                    item.precio_venta = Number(((Number(n.precio_costo) * Number(this.obtenerPorcentajePrecio(n.precio_por_defecto))) + Number(n.precio_costo)).toFixed(2))\r\n                                    array2[i] = item\r\n                                    this.setState({\r\n                                        listaProductosSeleccionadosEditados: array2\r\n                                    })\r\n                                }\r\n                            })\r\n\r\n                        }, 100)\r\n                        setTimeout(() => {\r\n                            this.calcularValoresTotales()\r\n                        }, 200)\r\n                    }}\r\n                    margin=\"normal\"\r\n                    variant=\"standard\"\r\n                    style={{ width: 'max-content', height: 30 }}\r\n                //disabled={!props.itemProductoCargado}\r\n                >\r\n                    {\r\n                        this.state.precios != null &&\r\n                        this.state.precios.map(item => {\r\n                            return <MenuItem key={item.codigo} value={item.codigo}>{`${item.nombre}`}</MenuItem>\r\n                        })\r\n                    }\r\n                </TextField>\r\n            </div>\r\n        }\r\n        if (item.id === 'cantidad') {\r\n\r\n            var restaRetorno = <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row' }}>\r\n                <TextField\r\n                    id=\"handle-precio-edit-cantidad\"\r\n                    margin=\"dense\"\r\n                    type=\"number\"\r\n                    value={this.state.listaProductosSeleccionadosEditados.filter(item => n.codigo === item.codigo)[0].cantidad}\r\n                    onChange={event => {\r\n                        var array = this.state.listaProductosSeleccionadosEditados\r\n                        array.filter(item => n.codigo === item.codigo)[0].cantidad = event.target.value\r\n                        this.setState({\r\n                            listaProductosSeleccionadosEditados: array\r\n                        })\r\n                        this.calcularValoresTotales()\r\n                    }}\r\n                    placeholder='00'\r\n                    style={{ width: 50 }}\r\n                />\r\n                <div style={{ width: 'max-content', display: 'flex', alignItems: 'center', justifyContent: 'start', paddingLeft: 10 }}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            en stock <div style={{ color: colors.getColorPrymaryDark() }}>{Number(n.stock_actual) - Number(this.state.listaProductosSeleccionadosEditados.filter(item => n.codigo === item.codigo)[0].cantidad)}</div>\r\n                        </div>\r\n                        <div style={{ color: colors.getColorPrymary() }}>\r\n                            {`${n.unidad_medida}`}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            return restaRetorno\r\n        }\r\n        if (item.id === 'descripcion_producto') {\r\n            return Boolean(n.tiene_iva) ? `* ${n.descripcion_producto}` : n.descripcion_producto\r\n        }\r\n        if (item.id === 'precio_venta') {\r\n            var precioR = 0\r\n            precioR = ((Number(n.precio_costo) * Number(this.obtenerPorcentajePrecio(n.precio_por_defecto))) + Number(n.precio_costo)).toFixed(2)\r\n\r\n            return precioR\r\n        }\r\n        if (item.id === 'total') {\r\n            var precioR = 0\r\n            precioR = ((Number(n.precio_costo) * Number(this.obtenerPorcentajePrecio(n.precio_por_defecto))) + Number(n.precio_costo)).toFixed(2)\r\n\r\n            var itemValor = this.state.listaProductosSeleccionadosEditados.filter(item => item.codigo === n.codigo)[0]\r\n            var sumaTotal = itemValor.cantidad * precioR\r\n            return sumaTotal.toFixed(2)\r\n        }\r\n        if (item.id === 'acciones') {\r\n            return <IconButton variant=\"fab\" mini color=\"default\" aria-label=\"quit\" onClick={() => {\r\n                const arraySeleccionados = this.state.listaProductosSeleccionados\r\n                const arraySeleccionadosEditados = this.state.listaProductosSeleccionadosEditados\r\n                var contador1 = 0\r\n                var contador2 = 0\r\n                arraySeleccionados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionados.splice(contador1, 1);\r\n                        this.setState({ listaProductosSeleccionados: arraySeleccionados })\r\n                    }\r\n                    contador1++\r\n                })\r\n                arraySeleccionadosEditados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionadosEditados.splice(contador2, 1);\r\n                        this.setState({ listaProductosSeleccionadosEditados: arraySeleccionadosEditados })\r\n                    }\r\n                    contador2++\r\n                })\r\n                this.calcularValoresTotales()\r\n            }}>\r\n                <CloseIcon />\r\n            </IconButton >\r\n        }\r\n\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    getStatusUsuario = () => {\r\n        if (this.state.usuario) {\r\n            if (this.state.usuario.code) {\r\n                this.setState({\r\n                    mostrarVentana: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    mostrarVentana: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick = () => {\r\n        this.contentFactura.finalizarVenta()\r\n    };\r\n\r\n    handleNuevaVenta = () => {\r\n        this.sectionFactura.nuevaVenta()\r\n    }\r\n\r\n    handleDescontar = descuento => {\r\n        this.setState({\r\n            descuento: descuento\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaSubTotal, sumaIva, dinero_resibido } = this.state\r\n            var sumaDescuento = ((Number(sumaSubTotal) + Number(sumaIva)) - Number(descuento)).toFixed(2)\r\n            this.setState({\r\n                sumaTotal: sumaDescuento\r\n            })\r\n            this.handleDineroResibido(dinero_resibido)\r\n        }, 100)\r\n    }\r\n\r\n    handleDineroResibido = dinero_resibido => {\r\n        this.setState({\r\n            dinero_resibido: dinero_resibido\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaTotal } = this.state\r\n            var sumaCambio = Number(dinero_resibido) > 0 ? (Number(dinero_resibido) - Number(sumaTotal)).toFixed(2) : 0\r\n            this.setState({\r\n                cambio: sumaCambio\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    handleObservacion = observacion => {\r\n        this.setState({\r\n            observacion\r\n        })\r\n    }\r\n\r\n    //finalizar venta\r\n    handleFinalizarVenta = item => {\r\n        const { listaProductosSeleccionadosEditados, facturaElectronica, uidUser, tipo_venta } = this.state\r\n        var codigoRegistroVenta = funtions.guidGenerator()\r\n        switch (item.tipo_pago) {\r\n            case 'efectivo': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockEfectivo(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaEfectivo(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'credito': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockCredito(listaProductosSeleccionadosEditados, item.valor_acreditado)\r\n                this.setSaveRegistroVentaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'tarjeta-credito': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockTarjetaCredito(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaTarjetaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'tarjeta-debito': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockTarjetaCredito(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaTarjetaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'cheque': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockTarjetaCredito(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaTarjetaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'transferencia': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockEfectivo(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaEfectivo(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            default: {\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    sumarNumeroFactura = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var numeroFactura = db.ref('users/' + user.uid + \"/configuracion\")\r\n                numeroFactura.once('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        const numero_factura = snap.val().numero_factura\r\n                        const suma = Number(numero_factura) + 1\r\n                        const tamaño = String(suma).length\r\n                        const restaTamaño = 9 - Number(tamaño)\r\n                        var cadenaFinal = ''\r\n                        for (var i = 0; i < restaTamaño; i++) {\r\n                            cadenaFinal = cadenaFinal + '0'\r\n                        }\r\n                        numeroFactura.update({\r\n                            numero_factura: `${cadenaFinal}${suma}`\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    enviarFacturaElectronica = (codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item) => {\r\n        if (tipo_venta === 'factura') {\r\n\r\n            var jsonData = {}\r\n            switch (item.tipo_pago) {\r\n                case 'efectivo': {\r\n                    jsonData = this.createJsonFacturaElectronicaEfectivo()\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectrónica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'credito': {\r\n                    jsonData = this.createJsonFacturaElectronicaCredito(item)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectrónica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'tarjeta-credito': {\r\n                    jsonData = this.createJsonFacturaElectronicaTarjetaCredito(item)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectrónica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'tarjeta-debito': {\r\n                    jsonData = this.createJsonFacturaElectronicaTarjetaCredito(item)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectrónica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'cheque': {\r\n                    jsonData = this.createJsonFacturaElectronicaTarjetaCredito(item)\r\n                    this.postSetGeneratePdf(uidUser, jsonData, codigoRegistroVenta)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectrónica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'transferencia': {\r\n                    jsonData = this.createJsonFacturaElectronicaTransferencia()\r\n                    this.postSetGeneratePdf(uidUser, jsonData, codigoRegistroVenta)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectrónica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                default: {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.props.handleClose()\r\n        }, 500)\r\n        setSnackBars.openSnack('success', 'rootSnackBar', 'Venta guardada', 2000)\r\n    }\r\n\r\n    enviarFacturaElectrónica = (facturaElectronica, uidUser, jsonData, codigoRegistroVenta) => {\r\n        if (Boolean(facturaElectronica)) {\r\n            this.postSet(uidUser, jsonData, codigoRegistroVenta)\r\n        }else{\r\n            this.postSetGeneratePdf(uidUser, jsonData, codigoRegistroVenta)\r\n        }\r\n    }\r\n\r\n    saveFacturasJson = (jsonData, codigoRegistroVenta) => {\r\n        var db = firebase.database();\r\n        var operacionFacturaJson = db.ref('users/' + firebase.auth().currentUser.uid + '/facturas_ventas/' + codigoRegistroVenta);\r\n        operacionFacturaJson.set(jsonData)\r\n    }\r\n\r\n    postSet = async (uidUser, jsonData, codigoRegistroVenta) => {\r\n        //const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigoRegistroVenta,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n\r\n        /* const content = await rawResponse.json();\r\n        setSnackBars.openSnack('success', 'rootSnackBar', `Factura emitida con exito ${content.estado}`, 2000)\r\n        */ /* if (content != null) {\r\n            this.setState({ estadoModalGuardarVenta: false })\r\n        } */\r\n    }\r\n    postSetGeneratePdf = async (uidUser, jsonData, codigoRegistroVenta) => {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/facturaPdf', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigoRegistroVenta,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n    }\r\n\r\n    //comprobar campos llenos \r\n    comprobarCamposLlenosEfectivo = () => {\r\n        const { listaProductosSeleccionados, dinero_resibido } = this.state\r\n        if (\r\n            this.comprobarTipoVenta() > 0 &&\r\n            listaProductosSeleccionados.length > 0 &&\r\n            dinero_resibido.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Completar todo los campos', 1000)\r\n            return false\r\n        }\r\n    }\r\n\r\n    comprobarCamposLlenosCredito = () => {\r\n        const { listaProductosSeleccionados, dinero_resibido } = this.state\r\n        if (\r\n            this.comprobarTipoVenta() > 0 &&\r\n            listaProductosSeleccionados.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Completar todo los campos', 1000)\r\n            return false\r\n        }\r\n    }\r\n    ////////////////////////////////\r\n\r\n    comprobarTipoVenta = () => {\r\n        const { clienteSeleccionado, tipo_venta } = this.state\r\n        if (tipo_venta === 'final') {\r\n            return true\r\n        } else {\r\n            if (clienteSeleccionado != null) {\r\n                if (clienteSeleccionado.toString().length > 0) {\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    //Registra la venta \r\n    setSaveRegistroVentaEfectivo = (codigoVenta, item) => {\r\n        const {\r\n            clienteSeleccionado,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica,\r\n            listaProductosSeleccionadosEditados,\r\n            tipo_pago\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        var itemVenta = {\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            descuento: Number(descuento).toFixed(2),\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: Number(dinero_resibido).toFixed(2),\r\n            cambio: Number(cambio).toFixed(2),\r\n            subtotal: Number(sumaSubTotal).toFixed(2),\r\n            iva: Number(sumaIva).toFixed(2),\r\n            total: Number(sumaTotal).toFixed(2),\r\n            productos: listaProductosSeleccionadosEditados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            numero_tarjeta: '',\r\n            nombre_banco: '',\r\n            tipo_pago,\r\n            valor_acreditado: '0.00',\r\n            fecha_a_pagar: '',\r\n            caja: cajaSeleccionada.codigo,\r\n            urlpdf: 'genererando',\r\n        }\r\n        this.setVentaCaja(itemVenta, tipo_pago, item)\r\n        operacionVentaRef.set(itemVenta)\r\n    }\r\n\r\n    setSaveRegistroVentaCredito = (codigoVenta, item) => {\r\n        const {\r\n            clienteSeleccionado,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica,\r\n            listaProductosSeleccionadosEditados,\r\n            tipo_pago\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        var itemVenta = {\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            descuento: Number(descuento).toFixed(2),\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: '0.00',\r\n            cambio: '0.00',\r\n            subtotal: Number(sumaSubTotal).toFixed(2),\r\n            iva: Number(sumaIva).toFixed(2),\r\n            total: Number(sumaTotal).toFixed(2),\r\n            productos: listaProductosSeleccionadosEditados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            numero_tarjeta: '',\r\n            nombre_banco: '',\r\n            tipo_pago,\r\n            valor_acreditado: Number(item.valor_acreditado).toFixed(2),\r\n            fecha_a_pagar: item.fecha_vencimiento,\r\n            caja: cajaSeleccionada.codigo,\r\n            urlpdf: 'genererando',\r\n        }\r\n\r\n        this.setVentaCaja(itemVenta, tipo_pago, item)\r\n\r\n        operacionVentaRef.set(itemVenta)\r\n    }\r\n    setSaveRegistroVentaTarjetaCredito = (codigoVenta, item) => {\r\n        const {\r\n            clienteSeleccionado,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica,\r\n            listaProductosSeleccionadosEditados,\r\n            tipo_pago\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        var itemVenta = {\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            descuento: Number(descuento).toFixed(2),\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: '0.00',\r\n            cambio: '0.00',\r\n            subtotal: Number(sumaSubTotal).toFixed(2),\r\n            iva: Number(sumaIva).toFixed(2),\r\n            total: Number(sumaTotal).toFixed(2),\r\n            productos: listaProductosSeleccionadosEditados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            numero_tarjeta: item.propiedades_numero,\r\n            nombre_banco: item.propiedades_banco,\r\n            tipo_pago,\r\n            valor_acreditado: '0.00',\r\n            fecha_a_pagar: '',\r\n            caja: cajaSeleccionada.codigo,\r\n            urlpdf: 'genererando',\r\n        }\r\n        this.setVentaCaja(itemVenta, tipo_pago, item)\r\n        operacionVentaRef.set(itemVenta)\r\n    }\r\n    ////////////////////////\r\n    setVentaCaja(itemVenta, tipo_pago, item) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n                    var operacionVentaCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/ventas/' + itemVenta.codigo)\r\n                    var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                    if (tipo_pago === 'efectivo') {\r\n                        cajaRefValorActual.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                operacionVentaCaja.set(itemVenta)\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: Number(Number(snap2.val().valor_caja) + Number(itemVenta.total)).toFixed(2)\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                    if (tipo_pago === 'credito') {\r\n                        var cuentaCobrarClienteRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo)\r\n                        var configuracionMes = db.ref('users/' + firebase.auth().currentUser.uid + '/configuracion/dias_a_pagar_defecto/dias')\r\n                        cuentaCobrarClienteRef.once('value', (snap) => {\r\n                            if (snap.val()) {\r\n                                var aumentarDeudaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_deudas/' + itemVenta.codigo)\r\n                                var aumentarAcreditadoRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_acreditados/' + itemVenta.codigo)\r\n                                aumentarDeudaRef.set({\r\n                                    codigo: itemVenta.codigo,\r\n                                    valor: this.state.sumaTotal,\r\n                                    fecha_registro: funtions.obtenerFechaActual(),\r\n                                    hora_registro: funtions.obtenerHoraActual(),\r\n                                    estado: true\r\n                                })\r\n                                var cajaRefValorAcreditado = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n\r\n                                if (Number(item.valor_acreditado) > 0) {\r\n                                    cajaRefValorAcreditado.set({\r\n                                        codigo: itemVenta.codigo,\r\n                                        valor: item.valor_acreditado,\r\n                                        fecha_registro: funtions.obtenerFechaActual(),\r\n                                        hora_registro: funtions.obtenerHoraActual(),\r\n                                        estado: true,\r\n                                        tipo: 'pago_venta_credito'\r\n                                    })\r\n                                    aumentarAcreditadoRef.set({\r\n                                        codigo: itemVenta.codigo,\r\n                                        valor: item.valor_acreditado,\r\n                                        fecha_registro: funtions.obtenerFechaActual(),\r\n                                        hora_registro: funtions.obtenerHoraActual(),\r\n                                        estado: true,\r\n                                        tipo: 'pago_venta_credito'\r\n                                    })\r\n                                    cajaRefValorActual.once('value', (snap2) => {\r\n                                        if (snap2.val()) {\r\n                                            cajaRefValorActual.update({\r\n                                                valor_caja: Number(Number(snap2.val().valor_caja) + Number(item.valor_acreditado)).toFixed(2)\r\n                                            })\r\n\r\n                                        }\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                Date.prototype.addDays = function (days) {\r\n                                    var date = new Date(this.valueOf())\r\n                                    date.setDate(date.getDate() + days)\r\n                                    var dayDate = date.getDate()\r\n                                    var mes = date.getMonth() + 1\r\n                                    if (dayDate.toString().length === 1) {\r\n                                        dayDate = '0' + dayDate\r\n                                    }\r\n                                    if (mes.toString().length === 1) {\r\n                                        mes = '0' + mes\r\n                                    }\r\n                                    return `${date.getFullYear()}-${mes}-${dayDate}`;\r\n                                }\r\n                                var date = new Date();\r\n                                configuracionMes.once('value', (snapp) => {\r\n                                    if (snapp.val()) {\r\n\r\n                                        cuentaCobrarClienteRef.set({\r\n                                            cliente: this.state.clienteSeleccionado,\r\n                                            codigo: this.state.clienteSeleccionado.codigo,\r\n                                            estado: true,\r\n                                            estado_cuenta: 'deuda',\r\n                                            fecha_registro: funtions.obtenerFechaActual(),\r\n                                            fecha_pago: date.addDays(Number(snap.val())),\r\n                                            hora_registro: funtions.obtenerHoraActual(),\r\n                                            order: '' + new Date(),\r\n                                            tipo_cuenta: 'venta_credito',\r\n                                            total: this.state.sumaTotal,\r\n                                            usuario: this.props.usuario.code,\r\n                                        })\r\n\r\n\r\n                                        var deudaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_deudas/' + itemVenta.codigo)\r\n                                        deudaRef.set({\r\n                                            codigo: itemVenta.codigo,\r\n                                            valor: this.state.sumaTotal,\r\n                                            fecha_registro: funtions.obtenerFechaActual(),\r\n                                            hora_registro: funtions.obtenerHoraActual(),\r\n                                            estado: true,\r\n                                            tipo: 'pago_venta_credito'\r\n                                        })\r\n\r\n                                        var cajaRefValorAcreditado = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n                                        var aumentarAcreditadoRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_acreditados/' + itemVenta.codigo)\r\n\r\n                                        if (Number(item.valor_acreditado) > 0) {\r\n                                            cajaRefValorAcreditado.set({\r\n                                                codigo: itemVenta.codigo,\r\n                                                valor: item.valor_acreditado,\r\n                                                fecha_registro: funtions.obtenerFechaActual(),\r\n                                                hora_registro: funtions.obtenerHoraActual(),\r\n                                                estado: true,\r\n                                                tipo: 'pago_venta_credito'\r\n                                            })\r\n                                            aumentarAcreditadoRef.set({\r\n                                                codigo: itemVenta.codigo,\r\n                                                valor: item.valor_acreditado,\r\n                                                fecha_registro: funtions.obtenerFechaActual(),\r\n                                                hora_registro: funtions.obtenerHoraActual(),\r\n                                                estado: true,\r\n                                                tipo: 'pago_venta_credito'\r\n                                            })\r\n                                            cajaRefValorActual.once('value', (snap2) => {\r\n                                                if (snap2.val()) {\r\n                                                    cajaRefValorActual.update({\r\n                                                        valor_caja: Number(Number(snap2.val().valor_caja) + Number(item.valor_acreditado)).toFixed(2)\r\n                                                    })\r\n\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n    ////////////////////////////////////////\r\n    // actualizar el stok de los productos\r\n    updateDataProductos = () => {\r\n        const { listaProductosSeleccionadosEditados } = this.state\r\n        listaProductosSeleccionadosEditados.forEach(item => {\r\n            var db = firebase.database();\r\n            var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + item.codigo);\r\n            productosRef.once('value', (snap) => {\r\n                if (snap.val()) {\r\n                    productosRef.update({\r\n                        stock_actual: Number(snap.val().stock_actual) - Number(item.cantidad)\r\n                    });\r\n                }\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    //opercacion stock\r\n    setOperacionStockEfectivo = (listaProductos) => {\r\n        const { clienteSeleccionado, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio, tipo_pago } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            productos: listaProductos,\r\n            total_final: `${Number(sumaTotal).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: `${Number(sumaSubTotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: `${Number(dinero_resibido).toFixed(2)}`,\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: cambio,\r\n            acreditado: '0.00',\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n    }\r\n\r\n    setOperacionStockCredito = (listaProductos, valor_acreditado) => {\r\n        const { clienteSeleccionado, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio, tipo_pago } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            productos: listaProductos,\r\n            total_final: `${Number(sumaTotal).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: `${Number(sumaSubTotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: '0.00',\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: Number(Number(sumaTotal) - Number(valor_acreditado)).toFixed(2),\r\n            vuelto: '0.00',\r\n            acreditado: `${Number(valor_acreditado).toFixed(2)}`,\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n    }\r\n    setOperacionStockTarjetaCredito = (listaProductos) => {\r\n        const { clienteSeleccionado, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio, tipo_pago } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            productos: listaProductos,\r\n            total_final: `${Number(sumaTotal).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: `${Number(sumaSubTotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: '0.00',\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: '0.00',\r\n            acreditado: '0.00',\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n    }\r\n    //////////////////////////////////\r\n\r\n    //crar json para factura electrónica\r\n    createJsonFacturaElectronicaEfectivo = () => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": \"efectivo\",\r\n                    \"total\": Number(sumaTotal)\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n    createJsonFacturaElectronicaCredito = (item) => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"credito\": {\r\n                \"fecha_vencimiento\": `${item.fecha_vencimiento}`,\r\n                \"monto\": Number((Number(item.monto) - Number(item.valor_acreditado)).toFixed(2))\r\n            },\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": 'efectivo',\r\n                    \"total\": Number(item.valor_acreditado),\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n    createJsonFacturaElectronicaTarjetaCredito = (item) => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": item.tipo_pago === 'tarjeta-credito' ? 'tarjeta_credito' : item.tipo_pago === 'tarjeta-debito' ? 'tarjeta_debito' : 'cheque',\r\n                    \"total\": Number(item.total),\r\n                    \"propiedades\": {\r\n                        \"numero\": `${item.propiedades_numero}`,\r\n                        \"banco\": `${item.propiedades_banco}`\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n\r\n    createJsonFacturaElectronicaTransferencia = () => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": \"transferencia\",\r\n                    \"total\": Number(sumaTotal)\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n    ///////////////////////////\r\n    onChangueSelecteccionarProducto = item => {\r\n        var array = this.state.listaProductosSeleccionados\r\n        var arrayValoresSelecionados = this.state.listaProductosSeleccionadosEditados\r\n        var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n        if (this.state.cargaAutomatica === false) {\r\n            this.setState({ itemProductoCargado: item })\r\n        } else {\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vacío', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    if (Boolean(!this.state.seleccionarProductoPordefecto)) {\r\n                        if (this.state.precioSeleccionadoCargar != null) {\r\n                            item.precio_por_defecto = this.state.precioSeleccionadoCargar\r\n                        }\r\n                    }\r\n\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        precio_costo: item.precio_costo,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                        precio_venta: Number(((Number(item.precio_costo) * Number(this.obtenerPorcentajePrecio(item.precio_por_defecto))) + Number(item.precio_costo)).toFixed(2)),\r\n                    })\r\n                    this.setState({\r\n                        itemProductoCargado: null\r\n                    })\r\n                }\r\n                this.calcularValoresTotales()\r\n            } else {\r\n                setSnackBars.openSnack('info', 'rootSnackBar', 'Producto ya ingresado!', 2000)\r\n            }\r\n        }\r\n        this.setState({\r\n            listaProductosSeleccionados: array,\r\n            listaProductosSeleccionadosEditados: arrayValoresSelecionados,\r\n        })\r\n    }\r\n\r\n    agregarItemSeleccionadoVista = (item) => {\r\n        if (this.state.itemProductoCargado != null) {\r\n            var array = this.state.listaProductosSeleccionados\r\n            var arrayValoresSelecionados = this.state.listaProductosSeleccionadosEditados\r\n            var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vacío', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        precio_costo: item.precio_costo,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                        precio_venta: Number(((Number(item.precio_costo) * Number(this.obtenerPorcentajePrecio(item.precio_por_defecto))) + Number(item.precio_costo)).toFixed(2)),\r\n                    })\r\n                    this.setState({\r\n                        listaProductosSeleccionados: array,\r\n                        listaProductosSeleccionadosEditados: arrayValoresSelecionados,\r\n                    })\r\n\r\n                    this.setState({\r\n                        itemProductoCargado: null\r\n                    })\r\n                }\r\n            } else {\r\n                setSnackBars.openSnack('info', 'rootSnackBar', 'Producto ya ingresado!', 2000)\r\n            }\r\n            this.calcularValoresTotales()\r\n        }\r\n    }\r\n\r\n    obtenerPorcentajePrecio = (precio_por_defecto) => {\r\n        var porcentaje = 0\r\n        this.state.precios.filter(it => {\r\n            if (it.codigo === precio_por_defecto) {\r\n                porcentaje = it.porcentaje\r\n            }\r\n        })\r\n        return porcentaje\r\n    }\r\n\r\n    calcularValoresTotales = () => {\r\n        var sumatotalConIVA = 0\r\n        var sumatotal = 0\r\n        var sumatotalProductosSinIva = 0\r\n        var sumatotalProductosConIva = 0\r\n        this.state.listaProductosSeleccionadosEditados.forEach(item => {\r\n            var stock = this.state.listaProductosSeleccionadosEditados.filter(it => it.codigo === item.codigo)[0].cantidad\r\n            var precioCosto = this.state.listaProductosSeleccionadosEditados.filter(it => it.codigo === item.codigo)[0].precio_costo\r\n            var reultado = (precioCosto * Number(this.obtenerPorcentajePrecio(this.state.listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto))) + Number(precioCosto)\r\n            var precio = reultado\r\n\r\n            var precioIva = 0\r\n            if (item.tiene_iva === true) {\r\n                precioIva = (precio * Number(item.porcentaje_iva)) / 100\r\n                sumatotalProductosConIva += Number(precio) * Number(item.cantidad)\r\n            } else {\r\n                precioIva = 0\r\n                sumatotalProductosSinIva += Number(precio) * Number(item.cantidad)\r\n            }\r\n\r\n            sumatotalConIVA = sumatotalConIVA + (Number(stock) * Number(precioIva))\r\n            sumatotal = sumatotal + (Number(stock) * Number(precio))\r\n        })\r\n        this.setState({ sumaTotal: (sumatotal + sumatotalConIVA).toFixed(2) })\r\n        this.setState({ sumaIva: sumatotalConIVA.toFixed(2) })\r\n        this.setState({ sumaSubTotal: sumatotal.toFixed(2) })\r\n        this.setState({ precioProductosSinIva: sumatotalProductosSinIva.toFixed(2) })\r\n        this.setState({ precioProductosConIva: sumatotalProductosConIva.toFixed(2) })\r\n\r\n        // this.setState({ productosSeleccionados: this.state.listaProductosSeleccionadosEditados })\r\n        this.handleDineroResibido(this.state.dinero_resibido)\r\n        this.handleDescontar(this.state.descuento)\r\n    }\r\n\r\n\r\n\r\n    seleccionarCliente = (item) => {\r\n        this.setState({ clienteFacturacion: item.codigo })\r\n        this.getClienteDataBase(item.codigo)\r\n    }\r\n\r\n    getClienteDataBase = (codigo) => {\r\n        if (codigo) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    if (this.state.clienteFacturacion.length > 0) {\r\n                        var db = firebase.database();\r\n                        var productosRef = db.ref('users/' + user.uid + \"/clientes/\" + codigo);\r\n                        productosRef.on('value', (snapshot) => {\r\n                            if (snapshot.val()) {\r\n                                this.setState({\r\n                                    clienteSeleccionado: snapshot.val()\r\n                                })\r\n                            } else {\r\n                                this.setState({\r\n                                    clienteSeleccionado: null\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDescontar = descuento => {\r\n        this.setState({\r\n            descuento: descuento\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaSubTotal, sumaIva, dinero_resibido } = this.state\r\n            var sumaDescuento = ((Number(sumaSubTotal) + Number(sumaIva)) - Number(descuento)).toFixed(2)\r\n            this.setState({\r\n                sumaTotal: sumaDescuento\r\n            })\r\n            this.handleDineroResibido(dinero_resibido)\r\n        }, 100)\r\n    }\r\n\r\n    handleDineroResibido = dinero_resibido => {\r\n        this.setState({\r\n            dinero_resibido: dinero_resibido\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaTotal } = this.state\r\n            var sumaCambio = Number(dinero_resibido) > 0 ? (Number(dinero_resibido) - Number(sumaTotal)).toFixed(2) : 0\r\n            this.setState({\r\n                cambio: sumaCambio\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    handleObservacion = observacion => {\r\n        this.setState({\r\n            observacion\r\n        })\r\n    }\r\n    handleFacturaElectronica = () => {\r\n        this.setState({\r\n            facturaElectronica: !this.state.facturaElectronica\r\n        })\r\n    }\r\n\r\n    abrirModalFinalizarVenta = () => {\r\n        switch (this.state.tipo_pago) {\r\n            case 'efectivo': {\r\n                if (this.comprobarCamposLlenosEfectivo()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'credito': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'tarjeta-credito': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'tarjeta-debito': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'cheque': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'transferencia': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            default: {\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleText: {\r\n                width: '100%'\r\n            }\r\n        }\r\n\r\n        return <>\r\n            <div style={{\r\n                zIndex: 30,\r\n                background: 'white',\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100vw',\r\n                height: '100vh'\r\n            }}>\r\n\r\n                <Grid container\r\n                    variant=\"permanent\"\r\n                    style={{\r\n                        minHeight: '100vh'\r\n                    }}\r\n                >\r\n\r\n                    <Grid item xs={9} style={{ background: 'rgba(222, 239, 255)' }}>\r\n                        <Grid container>\r\n                            <Grid item xs={4}>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    paddingLeft: 16,\r\n                                    paddingRight: 16,\r\n                                    flexDirection: 'column',\r\n                                }}>\r\n                                    <TextField\r\n                                        id=\"filled-tipo-venta\"\r\n                                        select\r\n                                        label=\"Tipo de venta\"\r\n                                        error={this.state.tipo_venta.length > 0 ? false : true}\r\n                                        value={this.state.tipo_venta}\r\n                                        onChange={event => this.setState({\r\n                                            tipo_venta: event.target.value\r\n                                        })}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                        style={styles.styleText}\r\n                                    >\r\n                                        <MenuItem value={'factura'}>Factura</MenuItem>\r\n                                        <MenuItem value={'final'}>Consumidor Final</MenuItem>\r\n                                    </TextField>\r\n\r\n                                    <AutoCompleteSelectedProducto\r\n                                        styleText={styles.styleText}\r\n                                        onChangue={this.onChangueSelecteccionarProducto}\r\n                                    >\r\n                                    </AutoCompleteSelectedProducto>\r\n                                </div>\r\n\r\n                                <ModalContainerNormal\r\n                                    open={this.state.estadoModalGuardarVenta}\r\n                                    handleClose={() => this.setState({ estadoModalGuardarVenta: true })}\r\n                                >\r\n                                    <div style={{\r\n                                        width: 100,\r\n                                        height: 100,\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center'\r\n                                    }}>\r\n                                        <CircularProgress />\r\n                                    </div>\r\n                                </ModalContainerNormal>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n\r\n                                <ContenedorProductoVista\r\n                                    itemProductoCargado={this.state.itemProductoCargado}\r\n                                    cargaAutomatica={this.state.cargaAutomatica}\r\n                                    cargaAutomaticaCambiar={() => this.setState({ cargaAutomatica: !this.state.cargaAutomatica })}\r\n                                    agregarItemSeleccionadoVista={this.agregarItemSeleccionadoVista}\r\n\r\n                                    precios={this.state.precios}\r\n                                    onChangePrecio={valor => {\r\n                                        var producto = this.state.itemProductoCargado\r\n                                        producto.precio_por_defecto = valor\r\n                                        this.setState({\r\n                                            itemProductoCargado: producto\r\n                                        })\r\n                                    }}\r\n                                    \r\n                                    seleccionarProductoPordefecto={this.state.seleccionarProductoPordefecto}\r\n                                    seleccionarProductoPordefectoCambiar={() => this.setState({ seleccionarProductoPordefecto: !this.state.seleccionarProductoPordefecto })}\r\n\r\n                                    precioSeleccionadoCargar={this.state.precioSeleccionadoCargar}\r\n                                    precioSeleccionadoCargarCambiar={valor => this.setState({ precioSeleccionadoCargar: valor })}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container >\r\n                            <Grid item xs={12} >\r\n                                <TablaNormal\r\n                                    textoTitleP=\"Productos\"\r\n                                    textoTitleS=\"Producto\"\r\n                                    selectedItems={true}\r\n                                    toolbar={false}\r\n                                    data={this.state.listaProductosSeleccionados}\r\n                                    rows={this.state.rowslistaProductos}\r\n                                    handleGetData={this.handleGetData}\r\n                                    estadoTabla={this.state.listaProductosSeleccionados.length > 0 ? 'llena' : 'vacio'}\r\n                                    itemsSeleccionados={items => console.log()}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{ overflowY: 'auto', height: '100vh' }}>\r\n                        <ContenedorNumeroFactura\r\n                            numero_factura={this.state.numero_factura}\r\n                            punto_emision={this.state.punto_emision}\r\n                            codigoEstablecimiento={this.state.codigoEstablecimiento}\r\n                        />\r\n                        {\r\n                            this.state.tipo_venta === 'factura' &&\r\n                            <ContenedorClienteVista\r\n                                clienteSeleccionado={this.state.clienteSeleccionado}\r\n                                errorCliente={this.state.clienteFacturacion.length > 0 ? false : true}\r\n                                usuario={this.props.usuario}\r\n                                seleccionarCliente={this.seleccionarCliente}\r\n                            />\r\n                        }\r\n\r\n                        <ContenedorPreciosTotalesVista\r\n                            descuento={this.state.descuento}\r\n                            sumaSubTotal={this.state.sumaSubTotal}\r\n                            sumaIva={this.state.sumaIva}\r\n                            sumaTotal={this.state.sumaTotal}\r\n                            observacion={this.state.observacion}\r\n                            dinero_resibido={this.state.dinero_resibido}\r\n                            cambio={this.state.cambio}\r\n                            tipo_venta={this.state.tipo_venta}\r\n                            facturaElectronica={this.state.facturaElectronica}\r\n\r\n                            handleDescontar={this.handleDescontar}\r\n                            handleDineroResibido={this.handleDineroResibido}\r\n                            handleObservacion={this.handleObservacion}\r\n                            handleFacturaElectronica={this.handleFacturaElectronica}\r\n\r\n                            tipo_pago={this.state.tipo_pago}\r\n                        />\r\n                        <div style={{ marginLeft: 16, marginRight: 16 }}>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {/* <ContenedorSeleccionarTipoPrecio\r\n                                    precioSeleccionado={this.state.precioSeleccionado}\r\n                                    precios={this.state.precios}\r\n                                    handleChangeSeleccion={codigo => {\r\n                                        var precio = this.state.precios.filter(p => p.codigo === codigo)[0]\r\n                                        this.setState({\r\n                                            precioSeleccionado: precio\r\n                                        })\r\n                                        setTimeout(() => {\r\n                                            this.calcularValoresTotales()\r\n                                        }, 100)\r\n                                        setSnackBars.openSnack('info', 'rootSnackBar', 'Precio cambiado', 500)\r\n                                    }}\r\n                                />\r\n                                <Tooltip title=\"Configurar precios\">\r\n                                    <IconButton onClick={() => {\r\n                                        this.setState({\r\n                                            estadoModalSimpleConfigurarPrecios: true\r\n                                        })\r\n                                    }}>\r\n                                        <SettingsIcon color='default' />\r\n                                    </IconButton>\r\n                                </Tooltip> */}\r\n                            </div>\r\n                            <ContenedorSeleccionarTipoPago\r\n                                tipo_pago={this.state.tipo_pago}\r\n                                tipo_venta={this.state.tipo_venta}\r\n                                handleChangeSeleccionTipoPago={value => {\r\n                                    this.setState({\r\n                                        tipo_pago: value\r\n                                    })\r\n                                    setSnackBars.openSnack('info', 'rootSnackBar', 'Tipo de pago cambiado', 500)\r\n                                }}\r\n                            />\r\n                            <ContenedorBotonesVenta\r\n                                handleFinalizarVenta={this.abrirModalFinalizarVenta}\r\n                                handleClose={() =>\r\n                                    this.props.handleClose()\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalFinalizaPago}\r\n                    handleClose={() => this.setState({ estadoModalFinalizaPago: true })}\r\n                >\r\n                    <ModalFinalizaPago\r\n                        handleClose={() => this.setState({ estadoModalFinalizaPago: false })}\r\n                        tipo_pago={this.state.tipo_pago}\r\n                        total={this.state.sumaTotal}\r\n                        handleAceptar={item => {\r\n                            this.handleFinalizarVenta(item)\r\n                        }}\r\n                    />\r\n\r\n                </ModalContainerNormal>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalSimpleConfigurarPrecios}\r\n                    handleClose={() => this.setState({ estadoModalSimpleConfigurarPrecios: false })}\r\n                >\r\n                    <ModalSettingsPrices\r\n                        handleClose={() => this.setState({ estadoModalSimpleConfigurarPrecios: false })}\r\n                    >\r\n\r\n                    </ModalSettingsPrices>\r\n                </ModalContainerNormal>\r\n\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default ModalNewVenta","import setSnackBars from \"./setSnackBars\";\r\n\r\nclass ModalNewVenta {\r\n\r\n    //seleccionando un producto y cargandolo a la lista\r\n    seleccionarProductoTable = (item, state,onChangueState) => {\r\n        var array = state.listaProductosSeleccionados\r\n        var arrayValoresSelecionados = state.listaProductosSeleccionadosEditados\r\n        var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n        console.log(item)\r\n        if (state.cargaAutomatica === false) {\r\n            onChangueState(item)\r\n        } else {\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vacío', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                    })\r\n                    onChangueState(state)\r\n                }\r\n                this.calcularValoresTotales(state )\r\n            }else{\r\n                setSnackBars.openSnack('info', 'rootSnackBar', 'Producto ya ingresado!', 2000)\r\n            }\r\n        }\r\n        onChangueState(state)\r\n    }\r\n\r\n    //calcular los valores totales \r\n    calcularValoresTotales = (state ) => {\r\n        var sumatotalConIVA = 0\r\n        var sumatotal = 0\r\n        var sumatotalProductosSinIva = 0\r\n        var sumatotalProductosConIva = 0\r\n        state.listaProductosSeleccionados.forEach(item => {\r\n            var stock = state.listaProductosSeleccionadosEditados.filter(it => it.codigo === item.codigo)[0].cantidad\r\n            var precio = state.listaProductosSeleccionadosEditados.filter(it => it.codigo === item.codigo)[0].precio_venta_a\r\n\r\n            var precioIva = 0\r\n            if (item.tiene_iva === true) {\r\n                precioIva = (precio * Number(item.porcentaje_iva)) / 100\r\n                sumatotalProductosConIva += Number(precio) * Number(item.cantidad)\r\n            } else {\r\n                precioIva = 0\r\n                sumatotalProductosSinIva += Number(precio) * Number(item.cantidad)\r\n            }\r\n\r\n            sumatotalConIVA = sumatotalConIVA + (Number(stock) * Number(precioIva))\r\n            sumatotal = sumatotal + (Number(stock) * Number(precio))\r\n        })\r\n        /* this.handleSumaTotal((sumatotal + sumatotalConIVA).toFixed(2))\r\n        this.handleSumaTotalIva(sumatotalConIVA.toFixed(2))\r\n        this.handleSubTotal(sumatotal.toFixed(2))\r\n        this.handlePrecioPrductosSinIva(sumatotalProductosSinIva.toFixed(2))\r\n        this.handlePrecioPrductosConIva(sumatotalProductosConIva.toFixed(2))\r\n        this.productosSeleccionados(state.listaSeleccionadosValoresEditados) */\r\n    }\r\n\r\n}\r\n\r\nexport default new ModalNewVenta()","import React from 'react';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n};\r\n\r\nconst variantColor = {\r\n    success: {\r\n        backgroundColor: \"#43a047\"\r\n    },\r\n    warning: {\r\n        backgroundColor: \"#ffa000\"\r\n    },\r\n    error: {\r\n        backgroundColor: \"#d32f2f\"\r\n    },\r\n    info: {\r\n        backgroundColor: \"#1976d2\"\r\n    },\r\n    default: {\r\n        backgroundColor: '#1976d2'\r\n    }\r\n};\r\n\r\n\r\nclass SimpleSnackbar extends React.Component {\r\n    state = {\r\n        open: false,\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({ open: true });\r\n\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ open: this.props.openSnack });\r\n    }\r\n\r\n    handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Snackbar\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'left',\r\n                    }}\r\n                    open={this.state.open}\r\n                    autoHideDuration={this.props.time}\r\n                    onClose={this.handleClose}                    \r\n                >\r\n                    <MySnackbarContent\r\n                        onClose={this.handleClose}\r\n                        variant={`${this.props.variant}`}\r\n                        message={`${this.props.message}`}\r\n                        style={\r\n                            this.props.variant === 'error' ? variantColor.error :\r\n                                this.props.variant === 'info' ? variantColor.info :\r\n                                    this.props.variant === 'success' ? variantColor.success :\r\n                                        this.props.variant === 'warning' ? variantColor.warning :\r\n                                            variantColor.default\r\n                        }\r\n                    />\r\n                </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction MySnackbarContent(props) {\r\n    const { message, onClose, variant, ...other } = props;\r\n    const Icon = variantIcon[variant];\r\n\r\n    return (\r\n        <SnackbarContent\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                }} >\r\n                    <Icon style={{\r\n                        opacity: 0.9,\r\n                        marginRight: 10,\r\n                        fontSize: 20,\r\n                    }} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default SimpleSnackbar\r\n","import React, { Component } from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nclass AnadirVencimiento extends React.Component {\r\n\r\n    state = {\r\n        fecha_vencimiento: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.producto) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    var db = firebase.database();\r\n                    var productosRef = db.ref('users/' + user.uid + '/productos/' + this.props.producto.codigo + '/fecha_vencimiento');\r\n                    productosRef.on('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            this.setState({\r\n                                fecha_vencimiento: snapshot.val()\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleAnadirVencimiento = () => {\r\n        var db = firebase.database();\r\n        var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + this.props.producto.codigo);\r\n        productosRef.update({\r\n            fecha_vencimiento: this.state.fecha_vencimiento\r\n        });\r\n        this.props.handleClose()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Añadir nueva fecha de vencimiento\"}</DialogTitle>\r\n\r\n                <DialogContent>\r\n                    <TextField\r\n                        id=\"date-fecha-vencimiento\"\r\n                        label=\"Fecha de vencimiento\"\r\n                        type=\"date\"\r\n                        //defaultValue={`${new Date().getDate()+'-'+new Date().getMonth()+'-'+new Date().getFullYear()}`}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        onChange={(event) => this.setState({ fecha_vencimiento: event.target.value })}\r\n                        value={this.state.fecha_vencimiento}\r\n                        margin=\"normal\"\r\n                        variant=\"filled\"\r\n                        style={{ width: '100%' }}\r\n                    />\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={this.props.handleClose} color=\"primary\" >\r\n                        Cancelar\r\n                </Button>\r\n                    <Button onClick={this.handleAnadirVencimiento} color=\"primary\" >\r\n                        Añadir vencimiento\r\n                </Button>\r\n                </DialogActions>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnadirVencimiento;","import React, { Component } from 'react';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst DeleteActivarDesactivar = (props) => {\r\n    return (\r\n        <div>\r\n            {\r\n                props.tipo === 'eliminar' &&\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Está seguro que desea eliminar\"}</DialogTitle>\r\n            }\r\n            {\r\n                props.tipo === 'activar' &&\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Está seguro que desea activar\"}</DialogTitle>\r\n            }\r\n            {\r\n                props.tipo === 'desactivar' &&\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Está seguro que desea desactivar\"}</DialogTitle>\r\n            }\r\n\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\" >\r\n                    Cancelar\r\n                </Button>\r\n                {\r\n                    props.tipo === 'eliminar' &&\r\n                    <Button onClick={props.handleEliminarItems} color=\"primary\" >\r\n                        Eliminar\r\n                    </Button>\r\n                }\r\n                {\r\n                    props.tipo === 'activar' &&\r\n                    <Button onClick={props.handleActivarItems} color=\"primary\" >\r\n                        Activar\r\n                    </Button>\r\n                }\r\n                {\r\n                    props.tipo === 'desactivar' &&\r\n                    <Button onClick={props.handleDesactivarItems} color=\"primary\" >\r\n                        Desactivar\r\n                    </Button>\r\n                }\r\n            </DialogActions>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DeleteActivarDesactivar;","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SectionContentFactura from '../components/SectionContentFactura';\r\nimport SectionFactura from '../components/SectionFactura';\r\nimport funtions from '../../utils/funtions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\nimport setSnackBars from './setSnackBars';\r\nimport ModalContainerNormal from '../modals_container/ModalContainerNormal';\r\nimport DeleteActivarDesactivar from './deleteActivarDesactivar';\r\n\r\nclass NuevaVenta extends Component {\r\n\r\n    state = {\r\n        usuario: null,\r\n\r\n        sumaSubTotal: 0,\r\n        sumaIva: 0,\r\n        sumaTotal: 0,\r\n\r\n        mostrarVentana: null,\r\n\r\n        productosSeleccionados: [],\r\n\r\n        clienteCargadoDB: '',\r\n\r\n        cliente: '',\r\n        descuento: 0,\r\n        observacion: '',\r\n        dinero_resibido: 0,\r\n        cambio: 0,\r\n\r\n\r\n        //valores adicionales para la factura\r\n        precioProductosSinIva: 0,\r\n        precioProductosConIva: 0,\r\n\r\n        //factura electronica\r\n        facturaElectronica: false,\r\n\r\n        // estado modales\r\n        estadoModalGuardarVenta: false,\r\n\r\n        //id del usuario\r\n        uidUser: '',\r\n\r\n        //tipo de venta\r\n        tipo_venta: 'factura',\r\n        // ambiente\r\n        ambienteFacturacion: 0,\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            this.setState({\r\n                uidUser: user.uid\r\n            })\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('auth_admins/' + user.uid + \"/ambiente\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({ ambienteFacturacion: snap.val() })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        if (this.props.item) {\r\n            this.setState({\r\n                cambio: this.props.item.cambio,\r\n                cliente: this.props.item.cliente,\r\n                codigo: this.props.item.codigo,\r\n                descuento: this.props.item.descuento,\r\n                dinero_resibido: this.props.item.dinero_resibido,\r\n                empleado: this.props.item.empleado,\r\n                estado: this.props.item.estado,\r\n                factura_emitida: this.props.item.factura_emitida,\r\n                fecha_venta: this.props.item.fecha_venta,\r\n                hora_venta: this.props.item.hora_venta,\r\n                iva: this.props.item.iva,\r\n                observacion: this.props.item.observacion,\r\n                order: this.props.item.order,\r\n                productosSeleccionados: this.props.item.productos,\r\n                subtotal: this.props.item.subtotal,\r\n                tipo_venta: this.props.item.tipo_venta,\r\n                total: this.props.item.total\r\n            })\r\n        }\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    getClienteDataBase = cliente => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/clientes/' + cliente);\r\n                productosRef.on('value', (snapshot) => {\r\n                    this.setState({\r\n                        clienteCargadoDB: snapshot.val()\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    getStatusUsuario = () => {\r\n        if (this.state.usuario) {\r\n            if (this.state.usuario.code) {\r\n                this.setState({\r\n                    mostrarVentana: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    mostrarVentana: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick = () => {\r\n        this.contentFactura.finalizarVenta()\r\n    };\r\n\r\n    handleNuevaVenta = () => {\r\n        this.sectionFactura.nuevaVenta()\r\n    }\r\n\r\n    handleDescontar = descuento => {\r\n        this.setState({\r\n            descuento: descuento\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaSubTotal, sumaIva, dinero_resibido } = this.state\r\n            var sumaDescuento = ((Number(sumaSubTotal) + Number(sumaIva)) - Number(descuento)).toFixed(2)\r\n            this.setState({\r\n                sumaTotal: sumaDescuento\r\n            })\r\n            this.handleDineroResibido(dinero_resibido)\r\n        }, 100)\r\n    }\r\n\r\n    handleDineroResibido = dinero_resibido => {\r\n        this.setState({\r\n            dinero_resibido: dinero_resibido\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaTotal } = this.state\r\n            var sumaCambio = Number(dinero_resibido) > 0 ? (Number(dinero_resibido) - Number(sumaTotal)).toFixed(2) : 0\r\n            this.setState({\r\n                cambio: sumaCambio\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    handleObservacion = observacion => {\r\n        this.setState({\r\n            observacion\r\n        })\r\n    }\r\n\r\n    //finalizar venta\r\n    handleFinalizarVenta = () => {\r\n        const { productosSeleccionados, facturaElectronica, uidUser, tipo_venta } = this.state\r\n        if (this.comprobarCamposLlenos()) {\r\n\r\n            this.updateDataProductos()\r\n            this.setOperacionStock(productosSeleccionados)\r\n            var codigoRegistroVenta = funtions.guidGenerator()\r\n            this.setSaveRegistroVenta(codigoRegistroVenta)\r\n            if (tipo_venta === 'factura') {\r\n                this.setState({ estadoModalGuardarVenta: true })\r\n                var jsonData = this.createJsonFacturaElectronica()\r\n                this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                if (Boolean(facturaElectronica)) {\r\n                    this.postSet(uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ estadoModalGuardarVenta: false })\r\n                } else {\r\n                    this.setState({ estadoModalGuardarVenta: false })\r\n                }\r\n            }\r\n            this.props.handleClose()\r\n            setSnackBars.openSnack('success', 'rootSnackBar', 'Venta guardada', 2000)\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'LLenar todos los campos', 2000)\r\n        }\r\n    }\r\n\r\n    saveFacturasJson = (jsonData, codigoRegistroVenta) => {\r\n        var db = firebase.database();\r\n        var operacionFacturaJson = db.ref('users/' + firebase.auth().currentUser.uid + '/facturas_ventas/' + codigoRegistroVenta);\r\n        operacionFacturaJson.set(jsonData)\r\n    }\r\n\r\n    postSet = async (uidUser, jsonData, codigoRegistroVenta) => {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigoRegistroVenta,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n\r\n        const content = await rawResponse.json();\r\n        setSnackBars.openSnack('success', 'rootSnackBar', `Factura emitida con exito ${content.estado}`, 2000)\r\n        /* if (content != null) {\r\n            this.setState({ estadoModalGuardarVenta: false })\r\n        } */\r\n    }\r\n\r\n    //comprobar campos llenos \r\n    comprobarCamposLlenos = () => {\r\n        const { cliente, productosSeleccionados, dinero_resibido } = this.state\r\n        if (\r\n            this.comprobarTipoVenta() > 0 &&\r\n            productosSeleccionados.length > 0 &&\r\n            dinero_resibido.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    comprobarTipoVenta = () => {\r\n        const { tipo_venta, cliente } = this.state\r\n        if (tipo_venta === 'final') {\r\n            return true\r\n        } else {\r\n            if (cliente.length > 0) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    //Registra la venta \r\n    setSaveRegistroVenta = codigoVenta => {\r\n        const { cliente,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        operacionVentaRef.set({\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : cliente,\r\n            descuento: descuento,\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: dinero_resibido,\r\n            cambio: cambio,\r\n            subtotal: sumaSubTotal,\r\n            iva: sumaIva,\r\n            total: sumaTotal,\r\n            productos: this.state.productosSeleccionados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n        console.log(cajaSeleccionada)\r\n    }\r\n\r\n    // actualizar el stok de los productos\r\n    updateDataProductos = () => {\r\n        const { productosSeleccionados } = this.state\r\n        productosSeleccionados.forEach(item => {\r\n            var db = firebase.database();\r\n            var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + item.codigo);\r\n            productosRef.update({\r\n                stock_actual: Number(item.stock_actual) - Number(item.cantidad)\r\n            });\r\n        })\r\n    }\r\n\r\n    //opercacion stock\r\n    setOperacionStock = (listaProductos) => {\r\n        const { cliente, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var arrayProductos = []\r\n        listaProductos.forEach(item => {\r\n            arrayProductos.push({\r\n                codigo: item.codigo,\r\n                cantidad: item.cantidad,\r\n                precio_venta_a: item.precio_venta_a\r\n            })\r\n        })\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : cliente,\r\n            productos: arrayProductos,\r\n            total_final: sumaTotal,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: sumaSubTotal,\r\n            descuento: descuento,\r\n            otros_gastos: '',\r\n            flete: '',\r\n            valor_pagado: dinero_resibido,\r\n            medio_pago: '',\r\n            saldo_favor: '',\r\n            en_deuda: '',\r\n            vuelto: cambio,\r\n            acreditado: '',\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        });\r\n        console.log(cajaSeleccionada)\r\n    }\r\n\r\n    //crar json para factura electrónica\r\n    createJsonFacturaElectronica = () => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteCargadoDB,\r\n            productosSeleccionados,\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": \"\",\r\n                    \"codigo\": \"\",\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": descuento\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteCargadoDB.email,\r\n                \"identificacion\": clienteCargadoDB.numero_identificacion,\r\n                \"tipo_identificacion\": clienteCargadoDB.tipo_identificacion,\r\n                \"razon_social\": clienteCargadoDB.nombre,\r\n                \"direccion\": clienteCargadoDB.direccion,\r\n                \"telefono\": clienteCargadoDB.celular\r\n            },\r\n            \"items\": productosSeleccionados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(item.precio_venta_a),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number(item.precio_venta_a) * Number(item.cantidad),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number(item.precio_venta_a) * Number(item.cantidad),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((Number(item.precio_venta_a) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": Number(sumaIva),\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": \"efectivo\",\r\n                    \"total\": Number(sumaTotal)\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n\r\n    render() {\r\nconsole.log(this.props.cajaSeleccionada)\r\nconsole.log(\"this.props.cajaSeleccionada\")\r\n        return <>\r\n            <div style={{\r\n                zIndex: 30,\r\n                background: 'white',\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100vw',\r\n                height: '100vh'\r\n            }}>\r\n\r\n                <Grid container\r\n                    variant=\"permanent\"\r\n                    style={{\r\n                        minHeight: '100vh'\r\n                    }}\r\n                >\r\n                    <Grid item xs={9}>\r\n                        <SectionContentFactura\r\n                            ref={element => this.contentFactura = element}\r\n\r\n                            handleSubTotal={suma => {\r\n                                this.setState({ sumaSubTotal: suma })\r\n                                //this.handleDineroResibido(this.state.dinero_resibido)\r\n                                //this.handleDescontar(this.state.descuento)\r\n                            }}\r\n\r\n                            handleSumaTotalIva={sumaIva => {\r\n                                this.setState({ sumaIva: sumaIva })\r\n                            }}\r\n\r\n                            handleSumaTotal={sumaTotal => {\r\n                                this.setState({ sumaTotal })\r\n                            }}\r\n\r\n                            handlePrecioPrductosSinIva={precioProductosSinIva => {\r\n                                this.setState({ precioProductosSinIva })\r\n                            }}\r\n\r\n                            handlePrecioPrductosConIva={precioProductosConIva => {\r\n                                this.setState({ precioProductosConIva })\r\n                            }}\r\n\r\n                            productosSeleccionadosData={this.state.productosSeleccionados}\r\n                            productosSeleccionados={productosSeleccionados => {\r\n                                this.setState({ productosSeleccionados })\r\n                                this.handleDineroResibido(this.state.dinero_resibido)\r\n                                this.handleDescontar(this.state.descuento)\r\n                            }}\r\n\r\n                            tipo_venta={this.state.tipo_venta}\r\n                            handleTipoVenta={tipo_venta => {\r\n                                this.setState({ tipo_venta })\r\n                                this.setState({ facturaElectronica: false })\r\n                            }}\r\n\r\n                            usuario={this.props.usuario}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3}>\r\n                        <SectionFactura\r\n\r\n                            ref={element => this.sectionFactura = element}\r\n\r\n                            usuario={this.props.usuario}\r\n\r\n                            sumaTotal={this.state.sumaTotal}\r\n                            sumaIva={this.state.sumaIva}\r\n                            sumaSubTotal={this.state.sumaSubTotal}\r\n\r\n                            tipo_venta={this.state.tipo_venta}\r\n\r\n                            handleCliente={cliente => {\r\n                                this.getClienteDataBase(cliente)\r\n                                this.setState({ cliente })\r\n                            }}\r\n\r\n                            descuento={this.state.descuento}\r\n                            handleDescontar={descuento => {\r\n                                this.handleDescontar(descuento)\r\n                            }}\r\n\r\n                            dinero_resibido={this.state.dinero_resibido}\r\n                            handleDineroResibido={dinero_resibido => {\r\n                                this.handleDineroResibido(dinero_resibido)\r\n                            }}\r\n\r\n                            observacion={this.state.observacion}\r\n                            handleObservacion={observacion => {\r\n                                this.handleObservacion(observacion)\r\n                            }}\r\n\r\n                            handleFacturaElectronica={() =>\r\n                                this.setState({\r\n                                    facturaElectronica: !this.state.facturaElectronica\r\n                                })\r\n                            }\r\n\r\n                            cambio={this.state.cambio}\r\n\r\n                            facturaElectronica={this.state.facturaElectronica}\r\n                            handleFinalizarVenta={this.handleFinalizarVenta}\r\n\r\n                            handleClose={this.props.handleClose}\r\n\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalGuardarVenta}\r\n                    handleClose={() => this.setState({ estadoModalGuardarVenta: true })}\r\n                >\r\n                    <div style={{\r\n                        width: 100,\r\n                        height: 100,\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'\r\n                    }}>\r\n                        <CircularProgress />\r\n                    </div>\r\n                </ModalContainerNormal>\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default NuevaVenta","import React from 'react';\r\n\r\nconst ContainerPlantillas = (props) => {\r\n    return (\r\n        <div style={{ display: 'none', position: 'fixed' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContainerPlantillas","import React, { Component } from 'react';\r\n\r\n\r\nclass ResivoVenta extends Component {\r\n    render() {\r\n        const {\r\n            item,\r\n        } = this.props\r\n\r\n        if (item != null) {\r\n\r\n\r\n            return (\r\n                <div style={{ width: 219, height: 'max-content', margin: 5, fontFamily: \"Lucida Sans Typewriter\", }}>\r\n                    <div style={{ fontFamily: \"Courier New\", fontSize: 20, display: 'flex', marginRight: 25, paddingBottom: 8, justifyContent: 'center', alignItems: 'center', textAlign: 'center' }}>\r\n                        {item.nombreEmpresa}\r\n                    </div>\r\n                    {\r\n                        item.tipo_venta === 'factura' ?\r\n                            <div style={{ fontFamily: \"Lucida Sans Typewriter\", fontSize: 10, display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center',marginRight:10 }}>Revisa tu factura <br />electrónica en tu correo</div>\r\n                            :\r\n                            <div style={{ fontFamily: \"Lucida Sans Typewriter\", fontSize: 10, display: 'flex', justifyContent: 'center' }}>Consumidor final</div>\r\n                    }\r\n                    {\r\n                        item.tipo_venta === 'factura' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'column', paddingTop: 10, fontFamily: \"Lucida Sans Typewriter\", marginLeft: 15, fontSize: 8 }}>\r\n                            <div style={{ fontSize: 8, display: 'flex' }}>{`Nombre: ${item.nombreCliente}`}</div>\r\n                            <div style={{ fontSize: 8, display: 'flex' }}>{`Correo: ${item.emailCliente}`}</div>\r\n                            <div style={{ fontSize: 8, display: 'flex' }}>{`Cédula: ${item.identificacionCliente}`}</div>\r\n                            <div style={{ fontSize: 8, display: 'flex' }}>{`Dirección: ${item.direccionCliente}`}</div>\r\n                            <div style={{ fontSize: 8, display: 'flex' }}>{`Fecha: ${item.fecha_venta}`}</div>\r\n                            <div style={{ fontSize: 8, display: 'flex' }}>{`Numero de venta: ${item.numero_venta}`}</div>\r\n                        </div>\r\n                    }\r\n                    <div style={{ fontFamily: \"Lucida Sans Typewriter\", borderBottom: '1px solid', borderTop: '1px solid', padding: 15, marginTop: 10, display: 'flex', flexDirection: 'row', fontSize: 8 }}>\r\n                        <div style={{ flex: .8 }}>Cant.</div>\r\n                        <div style={{ flex: 2.5 }}>Descripción</div>\r\n                        <div style={{ flex: 1.7 }}>V. Unt.</div>\r\n                        <div style={{ flex: 2.5 }}>V. Tot.</div>\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            item.productos.map(item =>\r\n                                <div key={item.codigo} style={{ fontFamily: \"Lucida Sans Typewriter\", paddingLeft: 15, paddingRight: 5, display: 'flex', flexDirection: 'row', fontSize: 8 }}>\r\n                                    <div style={{ flex: .5 }}>{item.cantidad}</div>\r\n                                    <div style={{ flex: 2.5 }}>{item.descripcion_producto}</div>\r\n                                    <div style={{ flex: .3 }}></div>\r\n                                    <div style={{ flex: 1.7 }}>{`$ ${Number(item.precio_venta).toFixed(2)}`}</div>\r\n                                    <div style={{ flex: 2.5 }}>{`$ ${(Number(item.precio_venta) * Number(item.cantidad)).toFixed(2)}`}</div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                    <div style={{ borderBottom: '1px solid', marginTop: 5, marginBottom: 5 }}></div>\r\n                    <div>\r\n                        <div style={{ fontFamily: \"Lucida Sans Typewriter\", paddingLeft: 10, paddingRight: 8, display: 'flex', flexDirection: 'row', fontSize: 8 }}>\r\n                            <div style={{ flex: 2 }}></div>\r\n                            <div style={{ flex: 2 }}>\r\n                                <div>Descuento</div>\r\n                                <div>Subtotal</div>\r\n                                <div>Valor Iva:</div>\r\n                                <div>Valor Total:</div>\r\n                            </div>\r\n                            <div style={{ flex: 2, fontFamily: \"Lucida Sans Typewriter\" }}>\r\n                                <div>{`$ ${Number(item.descuento).toFixed(2)}`}</div>\r\n                                <div>{`$ ${item.subtotal}`}</div>\r\n                                <div>{`$ ${item.iva}`}</div>\r\n                                <div>{`$ ${item.total}`}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        item.tipo_pago === 'efectivo' ?\r\n                            <div style={{ display: 'flex', flexDirection: 'column', paddingTop: 10, fontFamily: \"Lucida Sans Typewriter\", marginLeft: 15, fontSize: 8 }}>\r\n                                <div style={{ fontSize: 8, display: 'flex' }}>{`Tipo Pago: ${item.tipo_pago}`}</div>\r\n                            </div>\r\n                            : item.tipo_pago === 'credito' ?\r\n                                <div style={{ display: 'flex', flexDirection: 'column', paddingTop: 10, fontFamily: \"Courier New\", marginLeft: 15, fontSize: 8 }}>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Tipo Pago: A Credito`}</div>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Valor Acreditado: $ ${item.valor_acreditado}`}</div>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Saldo Pendiente: $ ${item.total - item.valor_acreditado}`}</div>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Fecha a Pagar: ${item.fecha_a_pagar}`}</div>\r\n\r\n                                </div>\r\n                                :\r\n                                <div style={{ display: 'flex', flexDirection: 'column', paddingTop: 10, fontFamily: \"Lucida Sans Typewriter\", marginLeft: 15, fontSize: 8 }}>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Tipo Pago:  ${item.tipo_pago}`}</div>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Numero: ${item.numero_tarjeta}`}</div>\r\n                                    <div style={{ fontSize: 8, display: 'flex' }}>{`Nombre Banco: ${item.nombre_banco}`}</div>\r\n                                </div>\r\n\r\n\r\n\r\n\r\n                    }\r\n                    <div style={{ fontFamily: \"Lucida Sans Typewriter\", paddingLeft: 15, paddingRight: 10, paddingTop: 10, fontSize: 8 }}>\r\n                        <div>Generado por: RapiFac</div>\r\n                        <div>www.rapifac.com</div>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>ndad</div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ResivoVenta;","import React from 'react';\r\n\r\nconst Dolar = props => {\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            {`$ ${ props.children }`}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dolar;","import React from 'react';\r\nimport colors from '../../../utils/colors';\r\n\r\nconst ErrorEstado = props => {\r\n    return (\r\n        <div style={{\r\n            fontSize: 10,\r\n            color: colors.getColorPrymaryRed300(),\r\n            fontStyle: 'italic',\r\n            width: '100%',\r\n            textAlign:'center',\r\n        }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorEstado;","import React from 'react';\r\nimport PDF from 'react-pdf-js';\r\n\r\nclass ViewPDF extends React.Component {\r\n  state = {};\r\n\r\n  componentDidMount(){\r\n    \r\n  }\r\n\r\n  onDocumentComplete = (pages) => {\r\n    this.setState({ page: 1, pages });\r\n  }\r\n\r\n  handlePrevious = () => {\r\n    this.setState({ page: this.state.page - 1 });\r\n  }\r\n\r\n  handleNext = () => {\r\n    this.setState({ page: this.state.page + 1 });\r\n  }\r\n\r\n  renderPagination = (page, pages) => {\r\n    let previousButton = <li className=\"previous\" onClick={this.handlePrevious}><a href=\"#\"><i className=\"fa fa-arrow-left\"></i> Previous</a></li>;\r\n    if (page === 1) {\r\n      previousButton = <li className=\"previous disabled\"><a href=\"#\"><i className=\"fa fa-arrow-left\"></i> Previous</a></li>;\r\n    }\r\n    let nextButton = <li className=\"next\" onClick={this.handleNext}><a href=\"#\">Next <i className=\"fa fa-arrow-right\"></i></a></li>;\r\n    if (page === pages) {\r\n      nextButton = <li className=\"next disabled\"><a href=\"#\">Next <i className=\"fa fa-arrow-right\"></i></a></li>;\r\n    }\r\n    return (\r\n      <nav>\r\n        <ul className=\"pager\">\r\n          {previousButton}\r\n          {nextButton}\r\n        </ul>\r\n      </nav>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    let pagination = null;\r\n    if (this.state.pages) {\r\n      pagination = this.renderPagination(this.state.page, this.state.pages);\r\n    }\r\n    return (\r\n      <div>\r\n        <PDF\r\n          file=\"https://storage.googleapis.com/facturas-storage/10bfc2dcdac31900677533.pdf\"\r\n          onDocumentComplete={this.onDocumentComplete}\r\n          page={this.state.page}\r\n        />\r\n        {pagination}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ViewPDF;","import React, { Component } from 'react';\r\nimport funtions from '../../utils/funtions';\r\nimport SimpleSnackbar from '../plugins/SnackBars';\r\nimport {render} from 'react-dom'\r\n\r\nclass SetSnackBars {\r\n\r\n    openSnack = (variant, contenedor, message, time) => {\r\n        render(this.getSnack(variant, message, time), document.getElementById(contenedor));\r\n        funtions.setTime(time + 200, () => {\r\n            render(<div />, document.getElementById(contenedor));\r\n        })\r\n    }\r\n\r\n    getSnack = (variant, message, time) => {\r\n        switch (variant) {\r\n            case 'success':\r\n                return <SimpleSnackbar variant=\"success\" message={message} time={time} openSnack={true} />\r\n            case 'error':\r\n                return <SimpleSnackbar variant=\"error\" message={message} time={time} openSnack={true} />\r\n            case 'warning':\r\n                return <SimpleSnackbar variant=\"warning\" message={message} time={time} openSnack={true} />\r\n            case 'info':\r\n                return <SimpleSnackbar variant=\"info\" message={message} time={time} openSnack={true} />\r\n            default:\r\n                return <div />\r\n        }\r\n    }\r\n}\r\n\r\nexport default new SetSnackBars()","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst TablaVacia = (props) => {\r\n    return (\r\n        <div style={{\r\n            width: '100%',\r\n            marginTop: 60,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center'\r\n        }}>\r\n            <Typography variant=\"title\" gutterBottom>\r\n                {props.title}\r\n            </Typography>\r\n            {/* <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={props.handleClickOpen}\r\n            >\r\n                {props.titleButton}\r\n            </Button> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TablaVacia","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button, Grid } from '@material-ui/core';\r\nimport AutoCompleteCliente from '../AutoCompleteClientes-New';\r\n\r\nconst ContenedorBotonesVenta = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Grid container\r\n                variant=\"permanent\"\r\n                spacing={20}\r\n                style={{ marginTop:10}}\r\n            >\r\n                <Grid item xs={6} style={{ padding: 5 }}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        color=\"primary\"\r\n                        style={{ width: '100%' }}\r\n                        onClick={props.handleFinalizarVenta}\r\n                    >\r\n                        Aceptar\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{ padding: 5 }}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        color=\"secondary\"\r\n                        style={{ width: '100%' }}\r\n                        onClick={props.handleClose}>\r\n                        Cancelar\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorBotonesVenta;","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button } from '@material-ui/core';\r\nimport AutoCompleteCliente from '../AutoCompleteClientes-New';\r\n\r\nconst ContenedorClienteVista = (props) => {\r\n\r\n    const styles = {\r\n        textFields: {\r\n            marginRight: 16,\r\n            marginLeft: 16,\r\n            width: '90%'\r\n        },\r\n        styleClientes: {\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"title\" style={{ paddingTop: 16, paddingLeft: 16 }}>\r\n                {props.clienteSeleccionado ? props.clienteSeleccionado.nombre : 'Nombre del cliente'}\r\n            </Typography>\r\n            <Typography variant=\"subheading\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                {props.clienteSeleccionado ? props.clienteSeleccionado.numero_identificacion : 'Identificación'}\r\n            </Typography>\r\n            <Typography variant=\"caption\" style={{ paddingTop: 15, paddingLeft: 16 }}>\r\n                {props.clienteSeleccionado ? props.clienteSeleccionado.email : 'Email'}\r\n            </Typography>\r\n            <Typography variant=\"caption\" style={{ paddingTop: 2, paddingLeft: 16 }}>\r\n                {props.clienteSeleccionado ? `${props.clienteSeleccionado.telefono} / ${props.clienteSeleccionado.celular}` : 'Teléfono/Celular'}\r\n            </Typography>\r\n\r\n            <div style={{ paddingLeft: 16, paddingRight: 16 }}>\r\n                <AutoCompleteCliente\r\n                    styleText={styles.styleClientes}\r\n                    dataRef=\"clientes\"\r\n                    dataRefObject=\"cliente\"\r\n                    error={props.errorCliente}\r\n                    onChangue={(item) => props.seleccionarCliente(item)}\r\n                    usuario={props.usuario}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorClienteVista;","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button } from '@material-ui/core';\r\nimport AutoCompleteCliente from '../AutoCompleteClientes-New';\r\n\r\nconst ContenedorNumeroFactura = (props) => {\r\n\r\n    const styles = {\r\n        textFields: {\r\n            marginRight: 16,\r\n            marginLeft: 16,\r\n            width: '90%'\r\n        },\r\n        styleClientes: {\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"body2\" style={{ paddingTop: 16, paddingLeft: 16,marginBottom:-10}}>\r\n                {props.codigoEstablecimiento ? props.codigoEstablecimiento : '000'}-\r\n                {props.punto_emision ? props.punto_emision : '000'}\r\n            </Typography>\r\n            <Typography variant=\"subheading\" style={{  paddingLeft: 16 }}>\r\n                {`N° ${props.numero_factura ? props.numero_factura : 'Numero de Factura'}`}\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorNumeroFactura;","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button, TextField, Grid } from '@material-ui/core';\r\n\r\nconst ContenedorPreciosTotalesVista = (props) => {\r\n    const styles = {\r\n        textFields: {\r\n            marginRight: 16,\r\n            marginLeft: 16,\r\n            width: '90%'\r\n        },\r\n        styleClientes: {\r\n            width: '100%',\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                id=\"outlined-multiline-static-comentario\"\r\n                label=\"Descuento\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                style={styles.textFields}\r\n                value={props.descuento}\r\n                onChange={e => {\r\n                    props.handleDescontar(e.target.value)\r\n                }}\r\n                autoComplete='off'\r\n            />\r\n\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row'\r\n            }}>\r\n                <Typography variant=\"body2\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                    SubTotal\r\n                    </Typography>\r\n                <div style={{ flex: 1 }}></div>\r\n                <Typography variant=\"body2\" style={{ paddingTop: 5, paddingRight: 16 }}>\r\n                    {Number(props.sumaSubTotal).toFixed(2)}\r\n                </Typography>\r\n            </div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row'\r\n            }}>\r\n                <Typography variant=\"body2\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                    Iva\r\n                    </Typography>\r\n                <div style={{ flex: 1 }}></div>\r\n                <Typography variant=\"body2\" style={{ paddingTop: 5, paddingRight: 16 }}>\r\n                    {Number(props.sumaIva).toFixed(2)}\r\n                </Typography>\r\n            </div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row'\r\n            }}>\r\n                <Typography variant=\"body2\" style={{ paddingTop: 5, paddingLeft: 16 }}>\r\n                    Total\r\n                    </Typography>\r\n                <div style={{ flex: 1 }}></div>\r\n                <Typography variant=\"body2\" style={{ paddingTop: 5, paddingRight: 16 }}>\r\n                    {(Number(props.sumaTotal)).toFixed(2)}\r\n                </Typography>\r\n            </div>\r\n\r\n            <TextField\r\n                id=\"outlined-multiline-static-comentario\"\r\n                label=\"Comentario\"\r\n                multiline\r\n                rows=\"2\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                style={{ display: 'none' }}\r\n                value={props.observacion}\r\n                onChange={e => {\r\n                    props.handleObservacion(e.target.value)\r\n                }}\r\n                autoComplete='off'\r\n            />\r\n\r\n            {\r\n                props.tipo_pago === 'efectivo' &&\r\n\r\n                <Grid container variant=\"permanent\" spacing={20} style={{ width: '95%' }}>\r\n                    <Grid item xs={6} >\r\n                        <TextField\r\n                            id=\"outlined-name\"\r\n                            label=\"Dinero resivido\"\r\n                            margin=\"dense\"\r\n                            variant=\"outlined\"\r\n                            style={styles.textFields}\r\n                            value={props.dinero_resibido}\r\n                            error={props.dinero_resibido.length > 0 ? false : true}\r\n                            onChange={e => {\r\n                                props.handleDineroResibido(e.target.value)\r\n                            }}\r\n                            autoComplete='off'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6} >\r\n                        <TextField\r\n                            id=\"outlined-vuelto\"\r\n                            label=\"Cambio\"\r\n                            margin=\"dense\"\r\n                            variant=\"outlined\"\r\n                            style={styles.textFields}\r\n                            autoComplete='off'\r\n                            value={props.cambio}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            }\r\n            <Grid container variant=\"permanent\" spacing={20} style={{ width: '95%', paddingLeft: 16 }}>\r\n                <div style={{ display: props.tipo_venta === 'final' ? 'none' : 'block' }}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={props.facturaElectronica}\r\n                                onChange={() => props.handleFacturaElectronica()}\r\n                            />}\r\n                        label=\"Factura Electrónica\"\r\n                    />\r\n                </div>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorPreciosTotalesVista;","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst ContenedorProductoVista = (props) => {\r\n\r\n    const obtenerPorcentajePrecio = () => {\r\n        var porcentaje = 0\r\n        if (Boolean(props.seleccionarProductoPordefecto)) {\r\n            props.precios.filter(it => {\r\n                if (it.codigo === props.itemProductoCargado.precio_por_defecto) {\r\n                    porcentaje = it.porcentaje\r\n                }\r\n            })\r\n        } else {\r\n            props.precios.filter(it => {\r\n                if (it.codigo === props.precioSeleccionadoCargar) {\r\n                    porcentaje = it.porcentaje\r\n                }\r\n            })\r\n        }\r\n        return porcentaje\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                marginTop: 16,\r\n                marginLeft: 16,\r\n                marginRight: 16\r\n            }}>\r\n                <Typography variant=\"title\" gutterBottom>\r\n                    {props.itemProductoCargado ? props.itemProductoCargado.descripcion_producto : 'Nombre de producto'}\r\n                </Typography>\r\n                <div style={{ flex: 1 }} />\r\n                <Typography variant=\"subheading\" gutterBottom >\r\n                    {props.itemProductoCargado ? props.itemProductoCargado.codigo : 'Codigo'}\r\n                </Typography>\r\n            </div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                marginBottom: 16,\r\n                marginLeft: 16,\r\n                marginRight: 16,\r\n            }}>\r\n                <Typography variant=\"subheading\" gutterBottom>\r\n                    {props.itemProductoCargado ? '$ ' + ((Number(props.itemProductoCargado.precio_costo) * Number(obtenerPorcentajePrecio())) + Number(props.itemProductoCargado.precio_costo)).toFixed(2) : 'Precio'}\r\n                </Typography>\r\n                <div style={{ flex: 1 }} />\r\n                <Typography variant=\"subheading\" gutterBottom>\r\n                    {props.itemProductoCargado ? 'cantidad: ' + props.itemProductoCargado.stock_actual : 'Stock Actual'}\r\n                </Typography>\r\n            </div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                background: '#33ffa2',\r\n                alignItems:'center',\r\n                height: 30,\r\n                padding:16\r\n            }}>\r\n                <Tooltip title=\"Carga con precio por defecto\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={props.seleccionarProductoPordefecto}\r\n                                onChange={props.seleccionarProductoPordefectoCambiar}\r\n                            />}\r\n                        label=\"\"\r\n                    />\r\n                </Tooltip>\r\n\r\n                {\r\n                    Boolean(props.seleccionarProductoPordefecto) &&\r\n                    <TextField\r\n                        id=\"filled-unidad-precio-defecto-asas\"\r\n                        select\r\n                        label=\"Cargar precio por defecto\"\r\n                        value={props.itemProductoCargado ? props.itemProductoCargado.precio_por_defecto : 'sa'}\r\n                        onChange={event => props.onChangePrecio(event.target.value)}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        style={{ width: 300, height: 40, margin:0 }}\r\n                        disabled={!props.itemProductoCargado}\r\n                    >\r\n                        {\r\n                            props.precios != null &&\r\n                            props.precios.map(item => {\r\n                                return <MenuItem key={item.codigo} value={item.codigo}>{`${item.nombre}`}</MenuItem>\r\n                            })\r\n                        }\r\n                    </TextField>\r\n                }\r\n                {\r\n                    Boolean(props.seleccionarProductoPordefecto) === false &&\r\n                    <TextField\r\n                        id=\"filled-unidad-precio-defecto-activar\"\r\n                        select\r\n                        label=\"Cargar productos con este precio\"\r\n                        value={props.precioSeleccionadoCargar ? props.precioSeleccionadoCargar : ''}\r\n                        onChange={event => props.precioSeleccionadoCargarCambiar(event.target.value)}\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        style={{ width: 300, height: 40 }}\r\n                    >\r\n                        {\r\n                            props.precios != null &&\r\n                            props.precios.map(item => {\r\n                                return <MenuItem key={item.codigo} value={item.codigo}>{`${item.nombre}`}</MenuItem>\r\n                            })\r\n                        }\r\n                    </TextField>\r\n                }\r\n                <div style={{ flex: 1 }} />\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={props.cargaAutomatica}\r\n                            onChange={props.cargaAutomaticaCambiar}\r\n                        />}\r\n                    label=\"Carga Automática\"\r\n                />\r\n                <Button variant=\"contained\" size=\"small\" color=\"default\" onClick={() => {\r\n                    if(Boolean(props.seleccionarProductoPordefecto)){\r\n                        props.agregarItemSeleccionadoVista(props.itemProductoCargado)\r\n                    }else{\r\n                        var item= props.itemProductoCargado\r\n                        item.precio_por_defecto=props.precioSeleccionadoCargar\r\n                        props.agregarItemSeleccionadoVista(item)\r\n                    }\r\n                    \r\n                }}>\r\n                    Agregar\r\n            </Button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorProductoVista;","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button, TextField, MenuItem } from '@material-ui/core';\r\nimport AutoCompleteCliente from '../AutoCompleteClientes-New';\r\n\r\nconst ContenedorSeleccionarTipoPago = (props) => {\r\n\r\n    const styles = {\r\n        textFields: {\r\n            marginRight: 16,\r\n            marginLeft: 16,\r\n            width: '90%'\r\n        },\r\n        styleClientes: {\r\n            width: '100%',\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                id=\"standard-select-page-tipe\"\r\n                select\r\n                label=\"Tipo de pago\"\r\n                disabled={props.tipo_venta==='final'?true:false}\r\n                value={props.tipo_pago}\r\n                onChange={(e) => props.handleChangeSeleccionTipoPago(e.target.value)}\r\n                margin=\"normal\"\r\n                variant='filled'\r\n                style={{ width: '100%' }}\r\n            >\r\n                    <MenuItem value='efectivo'>\r\n                        Efectivo\r\n                    </MenuItem>\r\n                    <MenuItem value='credito'>\r\n                        A Credito\r\n                    </MenuItem>\r\n                    <MenuItem  value='tarjeta-credito'>\r\n                        Tarjeta de crédito\r\n                    </MenuItem>\r\n                    <MenuItem  value='tarjeta-debito'>\r\n                        Tarjeta de débito\r\n                    </MenuItem>\r\n                    <MenuItem value='cheque'>\r\n                        Cheque\r\n                    </MenuItem>\r\n                    <MenuItem value='transferencia'>\r\n                        Transferencia Bancaria\r\n                    </MenuItem>\r\n            </TextField>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorSeleccionarTipoPago;","import React from 'react';\r\nimport { Typography, FormControlLabel, Switch, Button, TextField, MenuItem } from '@material-ui/core';\r\nimport AutoCompleteCliente from '../AutoCompleteClientes-New';\r\n\r\nconst ContenedorSeleccionarTipoPrecio = (props) => {\r\n    return (\r\n        <div style={{ flex: 1 }}>\r\n            {\r\n                props.precioSeleccionado != null &&\r\n                <TextField\r\n                    id=\"standard-select-price-tipe\"\r\n                    select\r\n                    label=\"Precio de venta\"\r\n                    value={props.precioSeleccionado.codigo}\r\n                    onChange={(e) => props.handleChangeSeleccion(e.target.value)}\r\n                    margin=\"normal\"\r\n                    variant='filled'\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {props.precios.map(precio => {\r\n                        if (precio.estado) {\r\n                            return <MenuItem key={precio.codigo} value={precio.codigo}>\r\n                                {/* `%${precio.porcentaje} - ${precio.nombre} ` */}\r\n                                {`${precio.nombre} `}\r\n                            </MenuItem>\r\n                        }\r\n                    })}\r\n                </TextField>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContenedorSeleccionarTipoPrecio;","import teal from '@material-ui/core/colors/teal';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport red from '@material-ui/core/colors/red';\r\n\r\nconst theme = {\r\n    palette: {\r\n        primary:teal,\r\n        secondary: blue,\r\n        error: red,\r\n        // Used by `getContrastText()` to maximize the contrast between the background and\r\n        // the text.\r\n        contrastThreshold: 3,\r\n        // Used to shift a color's luminance by approximately\r\n        // two indexes within its tonal palette.\r\n        // E.g., shift from Red 500 to Red 300 or Red 700.\r\n        tonalOffset: 0.2,\r\n    }\r\n}\r\n\r\nexport default theme","import React, { Component } from 'react';\r\nimport Layout from '../components/containers/Layout';\r\nimport Search from '../components/components/Search';\r\nimport SimpleTable from '../components/components/TableList';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport ChipsArray from '../components/components/ChipArray';\r\nimport funtions from '../utils/funtions';\r\nimport FullScreenDialog from '../components/components/FullScreenDialog';\r\nimport ModalNewProducto from '../components/modals_container/ModalNewProducto';\r\nimport setSnackBars from '../components/plugins/setSnackBars';\r\n\r\nimport ListaProductos from '../components/components/productos/components/ListaProductos'\r\nimport Stock from '../components/components/productos/components/Stock'\r\nimport Proveedores from '../components/components/productos/components/Proveedores'\r\nimport ControlVencimiento from '../components/components/productos/components/ControlVencimiento'\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport Ventas_01 from '../components/components/ventas/Ventas_01'\r\nimport VentasDevueltas_01 from '../components/components/ventas/VentasDevueltas_01'\r\nimport HistorialVentas_01 from '../components/components/ventas/HistorialVentas_01'\r\n\r\nclass VentasFac extends Component {\r\n\r\n    state = {\r\n        //valor para cambiar de tab\r\n        valueTab: 0,\r\n        //usuario \r\n        usuario: null,\r\n        estadoPermisos: null\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    obtenerDataBaseDatos = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var usuariosRef = db.ref(`users/${user.uid}/usuarios/${this.state.usuario.code}`)\r\n                usuariosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        if (snapshot.val().privilegios.productos === true) {\r\n                            this.setState({\r\n                                estadoPermisos: true\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                estadoPermisos: false\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    handleChangeTab = (event, valueTab) => {\r\n        this.setState({ valueTab });\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Layout title=\"Ventas\" onChangueUserState={usuario => {\r\n\r\n                this.setState({ usuario: usuario })\r\n                setTimeout(() => {\r\n                    this.obtenerDataBaseDatos()\r\n                }, 100)\r\n            }}>\r\n\r\n\r\n\r\n                {\r\n                    this.state.estadoPermisos &&\r\n                    <>\r\n                        <AppBar position=\"static\" color=\"inherit\">\r\n                            <Tabs indicatorColor=\"primary\" value={this.state.valueTab} onChange={this.handleChangeTab} textColor=\"primary\">\r\n                                <Tab label=\"Ventas\" />\r\n                                <Tab label=\"Ventas canceladas\" />\r\n                                <Tab label=\"Historial de ventas\" />\r\n                            </Tabs>\r\n                        </AppBar>\r\n                        <div>\r\n                            {this.state.valueTab === 0 && <Ventas_01 usuario={this.state.usuario} />}\r\n                            {this.state.valueTab === 1 && <VentasDevueltas_01 usuario={this.state.usuario} />}\r\n                            {this.state.valueTab === 2 && <HistorialVentas_01 usuario={this.state.usuario} />}\r\n                        </div>\r\n                    </>\r\n                }\r\n                {\r\n                    this.state.estadoPermisos === false &&\r\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center', height: '80vh' }}>\r\n                        <h3><strong>Usted no tiene permisos para <br />\r\n                            esta seccion comuniquese con el administrador</strong></h3>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoPermisos === null &&\r\n                    <CircularProgress />\r\n                }\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default VentasFac;","class Print {\r\n\r\n    getColorPrymaryLightCajaActivada=()=>{\r\n        return '#43a047'\r\n    }\r\n    getColorPrymaryDarkCajaActivada=()=>{\r\n        return '#2e7d32'\r\n    }\r\n    getColorWhite=()=>{\r\n        return 'white'\r\n    }\r\n\r\n\r\n    getColorPrymary=()=>{\r\n        return '#26a69a'\r\n    }\r\n    getColorPrymaryDark=()=>{\r\n        return '#00766c'\r\n    }\r\n    getColorPrymaryLight=()=>{\r\n        return '#52c7b8'\r\n    }\r\n\r\n    //red \r\n    getColorPrymaryRed300=()=>{\r\n        return '#e57373'\r\n    }\r\n    getColorPrymaryDarkRed300=()=>{\r\n        return '#af4448'\r\n    }\r\n    getColorPrymaryLightRed300=()=>{\r\n        return '#ffa4a2'\r\n    }\r\n    //Deep Purple\r\n    getColorPrymaryDeepPurple300=()=>{\r\n        return '#9575cd'\r\n    }\r\n    getColorPrymaryDarkDeepPurple300=()=>{\r\n        return '#65499c'\r\n    }\r\n    getColorPrymaryLightDeepPurple300=()=>{\r\n        return '#c7a4ff'\r\n    }\r\n    //Blue\r\n    getColorPrymaryBlue300=()=>{\r\n        return '#64b5f6'\r\n    }\r\n    getColorPrymaryDarkBlue300=()=>{\r\n        return '#2286c3'\r\n    }\r\n    getColorPrymaryLightBlue300=()=>{\r\n        return '#9be7ff'\r\n    }\r\n    //Green\r\n    getColorPrymaryGreen300=()=>{\r\n        return '#81c784'\r\n    }\r\n    getColorPrymaryDarkGreen300=()=>{\r\n        return '#519657'\r\n    }\r\n    getColorPrymaryLightGreen300=()=>{\r\n        return '#b2fab4'\r\n    }\r\n    //Lime\r\n    getColorPrymaryLime300=()=>{\r\n        return '#dce775'\r\n    }\r\n    getColorPrymaryDarkLime300=()=>{\r\n        return '#a8b545'\r\n    }\r\n    getColorPrymaryLightLime300=()=>{\r\n        return '#ffffa6'\r\n    }\r\n    //Amber\r\n    getColorPrymaryAmber300=()=>{\r\n        return '#ffd54f'\r\n    }\r\n    getColorPrymaryDarkAmber300=()=>{\r\n        return '#c8a415'\r\n    }\r\n    getColorPrymaryLightAmber300=()=>{\r\n        return '#ffff81'\r\n    }\r\n    //grey\r\n    getColorPrymaryGrey500=()=>{\r\n        return '#9e9e9e'\r\n    }\r\n    getColorPrymaryDarkGrey500=()=>{\r\n        return '#707070'\r\n    }\r\n    getColorPrymaryLightGrey500=()=>{\r\n        return '#cfcfcf'\r\n    }\r\n    //grey  200\r\n    getColorPrymaryGrey200=()=>{\r\n        return '#eeeeee'\r\n    }\r\n    getColorPrymaryDarkGrey200=()=>{\r\n        return '#bcbcbc'\r\n    }\r\n    getColorPrymaryLightGrey200=()=>{\r\n        return '#ffffff'\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nexport default new Print()","class FUNTIONS {\r\n\r\n    filterObjectsCategories = (array, categoria) => {\r\n        return array.filter((item)=>item.categoria===categoria)\r\n    }\r\n\r\n    filterObjectsTipos = (array, tipo) => {\r\n        return array.filter((item)=>item.tipo===tipo)\r\n    }\r\n\r\n    filterObjectsCodigo = (array, codigo) => {\r\n        var arrayReturn = []\r\n        \r\n        array.forEach(item => {\r\n            var itemData=JSON.stringify(item);\r\n            itemData=itemData.toLowerCase()\r\n            var itemFilter=itemData.includes(codigo)\r\n            if (itemFilter) {\r\n                arrayReturn.push(item)\r\n            }\r\n        })\r\n        return arrayReturn\r\n    }\r\n    filterObjectsCedulas = (array, cedula) => {\r\n        var arrayReturn = []\r\n        \r\n        array.forEach(item => {\r\n            var itemData=JSON.stringify(item);\r\n            itemData=itemData.toLowerCase()\r\n            var itemFilter=itemData.includes(cedula)\r\n            if (itemFilter) {\r\n                arrayReturn.push(item)\r\n            }\r\n        })\r\n        return arrayReturn\r\n    }\r\n\r\n    filterObjectsCedula = (array, cedula) => {\r\n        var arrayReturn = []\r\n        array.forEach(item => {\r\n            if (item.cedula.toString().includes(cedula)) {\r\n                arrayReturn.push(item)\r\n            }\r\n        })\r\n        return arrayReturn\r\n    }\r\n\r\n    categorieToKey = (array) => {\r\n        var returnArray = []\r\n        var contador = 0;\r\n        array.forEach(item => {\r\n            var itemNew = {}\r\n            itemNew.nombre = item\r\n            itemNew.key = contador\r\n            returnArray.push(itemNew)\r\n            contador++\r\n        })\r\n        return returnArray\r\n    }\r\n\r\n    repeatTo = (array) => {\r\n        var returnArray = [];\r\n        array.forEach(item => {\r\n            if (!returnArray.includes(item)) {\r\n                returnArray.push(item)\r\n            }\r\n        })\r\n        return returnArray\r\n    }\r\n\r\n    inventarioToCategories = (snapshot) => {\r\n        var returnArr = [];\r\n        snapshot.forEach((childSnapshot) => {\r\n            var item = childSnapshot.val();\r\n            var nameCategory = item.categoria ? item.categoria : 'Sin Categoria';\r\n            returnArr.push(nameCategory);\r\n        });\r\n        return returnArr;\r\n    };\r\n\r\n    contactosToCedulas = (snapshot) => {\r\n        var returnArr = [];\r\n        snapshot.forEach((childSnapshot) => {\r\n            var item = childSnapshot.val();\r\n            var nameCedula = item.cedula ? item.cedula : 'Sin Tipo';\r\n            returnArr.push(nameCedula);\r\n        });\r\n        return returnArr;\r\n    };\r\n\r\n    contactosToTipos = (snapshot) => {\r\n        var returnArr = [];\r\n        snapshot.forEach((childSnapshot) => {\r\n            var item = childSnapshot.val();\r\n            var name = item.tipo ? item.tipo : 'Sin Tipo';\r\n            returnArr.push(name);\r\n        });\r\n        return returnArr;\r\n    };\r\n\r\n    inventarioToProveedores = (snapshot) => {\r\n        var returnArr = [];\r\n        snapshot.forEach((childSnapshot) => {\r\n            var item = childSnapshot.val();\r\n            var name = item.proveedor ? item.proveedor : 'Sin Categoria';\r\n            returnArr.push(name);\r\n        });\r\n        return returnArr;\r\n    };\r\n\r\n    guidGenerator = () => {\r\n        var S4 = () => {\r\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        };\r\n        return ( S4() + S4() + S4());\r\n    }\r\n\r\n    setTime = (secons, funt) => {\r\n        setTimeout(() => {\r\n            funt()\r\n        }, secons);\r\n    }\r\n\r\n    snapshotToArray = (snapshot) => {\r\n        var array = []\r\n        snapshot.forEach((childSnapshot) => {\r\n            var item = childSnapshot.val();\r\n            item.id = childSnapshot.key;\r\n            array.push(item)\r\n        });\r\n        return array\r\n    };\r\n\r\n    obtenerFechaActual=()=>{\r\n        var date= new Date()\r\n        var day= date.getDate()\r\n        var mon= date.getMonth()\r\n        var yea= date.getFullYear()\r\n        if(String(day).length===1){\r\n            day='0'+day\r\n        }\r\n        if(String(mon).length===1){\r\n            mon='0'+mon\r\n        }\r\n        return `${yea}-${mon}-${day}`\r\n    }\r\n    obtenerHoraActual=()=>{\r\n        return `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default new FUNTIONS()","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@material-ui/core\");","module.exports = require(\"@material-ui/core/AppBar\");","module.exports = require(\"@material-ui/core/Avatar\");","module.exports = require(\"@material-ui/core/Button\");","module.exports = require(\"@material-ui/core/ButtonBase\");","module.exports = require(\"@material-ui/core/Checkbox\");","module.exports = require(\"@material-ui/core/CircularProgress\");","module.exports = require(\"@material-ui/core/Dialog\");","module.exports = require(\"@material-ui/core/DialogActions\");","module.exports = require(\"@material-ui/core/DialogContent\");","module.exports = require(\"@material-ui/core/DialogContentText\");","module.exports = require(\"@material-ui/core/DialogTitle\");","module.exports = require(\"@material-ui/core/Divider\");","module.exports = require(\"@material-ui/core/Drawer\");","module.exports = require(\"@material-ui/core/Fade\");","module.exports = require(\"@material-ui/core/FormControl\");","module.exports = require(\"@material-ui/core/FormControlLabel\");","module.exports = require(\"@material-ui/core/FormLabel\");","module.exports = require(\"@material-ui/core/Grid\");","module.exports = require(\"@material-ui/core/IconButton\");","module.exports = require(\"@material-ui/core/Input\");","module.exports = require(\"@material-ui/core/InputAdornment\");","module.exports = require(\"@material-ui/core/InputLabel\");","module.exports = require(\"@material-ui/core/List\");","module.exports = require(\"@material-ui/core/ListItem\");","module.exports = require(\"@material-ui/core/ListItemIcon\");","module.exports = require(\"@material-ui/core/ListItemSecondaryAction\");","module.exports = require(\"@material-ui/core/ListItemText\");","module.exports = require(\"@material-ui/core/Menu\");","module.exports = require(\"@material-ui/core/MenuItem\");","module.exports = require(\"@material-ui/core/Paper\");","module.exports = require(\"@material-ui/core/Popper\");","module.exports = require(\"@material-ui/core/Radio\");","module.exports = require(\"@material-ui/core/RadioGroup\");","module.exports = require(\"@material-ui/core/Slide\");","module.exports = require(\"@material-ui/core/Snackbar\");","module.exports = require(\"@material-ui/core/SnackbarContent\");","module.exports = require(\"@material-ui/core/Switch\");","module.exports = require(\"@material-ui/core/Tab\");","module.exports = require(\"@material-ui/core/Table\");","module.exports = require(\"@material-ui/core/TableBody\");","module.exports = require(\"@material-ui/core/TableCell\");","module.exports = require(\"@material-ui/core/TableHead\");","module.exports = require(\"@material-ui/core/TablePagination\");","module.exports = require(\"@material-ui/core/TableRow\");","module.exports = require(\"@material-ui/core/TableSortLabel\");","module.exports = require(\"@material-ui/core/Tabs\");","module.exports = require(\"@material-ui/core/TextField\");","module.exports = require(\"@material-ui/core/Toolbar\");","module.exports = require(\"@material-ui/core/Tooltip\");","module.exports = require(\"@material-ui/core/Typography\");","module.exports = require(\"@material-ui/core/colors/blue\");","module.exports = require(\"@material-ui/core/colors/red\");","module.exports = require(\"@material-ui/core/colors/teal\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"@material-ui/icons/AccountCircle\");","module.exports = require(\"@material-ui/icons/Add\");","module.exports = require(\"@material-ui/icons/AttachMoney\");","module.exports = require(\"@material-ui/icons/Check\");","module.exports = require(\"@material-ui/icons/CheckCircle\");","module.exports = require(\"@material-ui/icons/ChevronLeft\");","module.exports = require(\"@material-ui/icons/ChevronRight\");","module.exports = require(\"@material-ui/icons/Clear\");","module.exports = require(\"@material-ui/icons/Close\");","module.exports = require(\"@material-ui/icons/CreditCard\");","module.exports = require(\"@material-ui/icons/Delete\");","module.exports = require(\"@material-ui/icons/Done\");","module.exports = require(\"@material-ui/icons/DoneAll\");","module.exports = require(\"@material-ui/icons/DonutSmall\");","module.exports = require(\"@material-ui/icons/Drafts\");","module.exports = require(\"@material-ui/icons/DriveEta\");","module.exports = require(\"@material-ui/icons/Edit\");","module.exports = require(\"@material-ui/icons/Error\");","module.exports = require(\"@material-ui/icons/FileCopy\");","module.exports = require(\"@material-ui/icons/Group\");","module.exports = require(\"@material-ui/icons/History\");","module.exports = require(\"@material-ui/icons/Home\");","module.exports = require(\"@material-ui/icons/Info\");","module.exports = require(\"@material-ui/icons/Input\");","module.exports = require(\"@material-ui/icons/LocalAtm\");","module.exports = require(\"@material-ui/icons/LocalPrintshop\");","module.exports = require(\"@material-ui/icons/Mail\");","module.exports = require(\"@material-ui/icons/MarkunreadMailbox\");","module.exports = require(\"@material-ui/icons/Menu\");","module.exports = require(\"@material-ui/icons/MonetizationOn\");","module.exports = require(\"@material-ui/icons/Payment\");","module.exports = require(\"@material-ui/icons/PictureAsPdf\");","module.exports = require(\"@material-ui/icons/Remove\");","module.exports = require(\"@material-ui/icons/Report\");","module.exports = require(\"@material-ui/icons/Save\");","module.exports = require(\"@material-ui/icons/Search\");","module.exports = require(\"@material-ui/icons/Settings\");","module.exports = require(\"@material-ui/icons/ShoppingBasket\");","module.exports = require(\"@material-ui/icons/ShoppingCart\");","module.exports = require(\"@material-ui/icons/Style\");","module.exports = require(\"@material-ui/icons/Subtitles\");","module.exports = require(\"@material-ui/icons/SupervisedUserCircle\");","module.exports = require(\"@material-ui/icons/SwapHoriz\");","module.exports = require(\"@material-ui/icons/TrendingUp\");","module.exports = require(\"@material-ui/icons/Visibility\");","module.exports = require(\"@material-ui/icons/VisibilityOff\");","module.exports = require(\"@material-ui/icons/Warning\");","module.exports = require(\"classnames\");","module.exports = require(\"firebase/app\");","module.exports = require(\"firebase/auth\");","module.exports = require(\"firebase/database\");","module.exports = require(\"firebase/firestore\");","module.exports = require(\"next/head\");","module.exports = require(\"next/link\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-number-format\");","module.exports = require(\"react-pdf-js\");","module.exports = require(\"react-to-print\");","module.exports = require(\"styled-jsx/style\");"],"mappingsxFA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAEA;AAEA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AA5GA;AACA;AA+GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;A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AAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AASA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;AArQA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmOA;AAAA;AACA;AAC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;;;;;AC5BA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;A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;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AAFA;AAKA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAFA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAjPA;AACA;AAmPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnSA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AACA;AAFA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;;;;AAnDA;AACA;AAqDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChxIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAA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;;;;AAvhBA;AACA;AAyhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvkBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AACA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeeA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AArxBA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAEA;;;AA+fA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAuLA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAev+BA;AACA;AAy+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACriCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AADA;AAIA;AAEA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;AAgBA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAFA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAGA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AArCA;AAAA;AAAA;AAAA;AAuDA;;;;AA7FA;AACA;AAiGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmpBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA5eA;AACA;AACA;AACA;;;AA2FA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AA8VA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;A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ACA;AACA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;AAzFA;AACA;AA2FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AACA;AAkrBA;AACA;AAsBA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAjWA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA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A;AACA;AACA;AADA;AADA;AAKA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtyBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAmBA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAxQA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;AAmOA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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AEA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1oBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAzCA;AACA;AAsHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AAGA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnCA;AACA;AAoCA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;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AAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;;;;AAtmBA;AACA;AAwmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1oBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;AAtEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;;;AAyjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;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DA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAvUA;AACA;AAyUA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7WA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAXA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAlHA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;AAqGA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAAA;AAhBA;AAAA;AAAA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAasGA;;;;AAtUA;AACA;AAwUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChXA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AA0CA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;AArDA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;AA6BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAdA;AAAA;AAAA;AAktDA;AAkEA;;;;AAhMA;AACA;AAkMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAXA;AACA;;;;;;AA5DA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;;;AAsCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAVA;AAAA;AAAA;AAerDA;AAiEA;;;;AAtNA;AACA;AAwNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtPA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AACA;AAiBA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAXA;AACA;;;;;;AA5DA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;;;AAsCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAVA;AAAA;AAAA;AAerDA;AAiEA;;;;AApNA;AACA;AAsNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpPA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AA0DA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;;AArEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AAEA;AAAA;AAAA;AA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AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AArDA;AAuDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAHA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AAyBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AAyBA;AACA;AAAA;AACA;AACA;AAmJA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAvEA;AA8EA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAFA;AA3EA;AAkFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAvEA;AAkFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAvEA;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAWA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAvCA;AAyCA;AACA;;;;;;AAvkjBA;AAmBA;AACA;;;AA2lBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;A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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAWA;AACA;AACA;;;;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAtEA;AA6EA;AACA;AACA;;;;;;AAjYA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;;;AA2VA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AADA;AADA;AAMA;AAEA;AACA;AAEA;AA3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA7iBA;AACA;AA+iBA;;;;;;;;;;;;;;;;AC9jBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AAEA;;;;;;;;;;;;;AACA;AAAA;AACA;AAIA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC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":""}