{"version":3,"file":"static/webpack/static\\development\\pages\\ventasFac.js.5971a50964532964bff4.hot-update.js","sources":["webpack:///./components/components/ventas/Ventas_01.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../containers/Layout';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SectionFactura from '../SectionFactura';\r\nimport SectionContentFactura from '../SectionContentFactura';\r\nimport MenuHerramientas from '../menus/MenuHerramientas';\r\nimport Search from '../Search';\r\nimport TablaNormal from '../tables/TableNormal';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ItemMenuHerramienta from '../menus/ItemMenuHerramienta';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MonetizationOn from '@material-ui/icons/MonetizationOn';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport LocalPrintshopIcon from '@material-ui/icons/LocalPrintshop';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport PaymentIcon from '@material-ui/icons/Payment';\r\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//firebase \r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport ReturnTextTable from '../tables/ReturnTextTable';\r\nimport FullScreenDialog from '../FullScreenDialog';\r\nimport NuevaVenta from '../../plugins/nueva_venta';\r\nimport funtions from '../../../utils/funtions';\r\nimport ModalCompraProductos from '../../modals_container/ModalCompraProductos';\r\nimport setSnackBars from '../../plugins/setSnackBars';\r\nimport ModalContainerNormal from '../../modals_container/ModalContainerNormal';\r\nimport EmitirFacturaModal from '../../plugins/EmitirFacturaModal';\r\nimport ModalCancelarVenta from '../../modals_container/ventas/ModalCancelarVenta';\r\nimport ModalEditarVenta from '../../modals_container/ventas/ModalEditarVenta';\r\nimport { CircularProgress, Chip, Avatar } from '@material-ui/core';\r\n\r\nimport ReactToPrint from \"react-to-print\";\r\nimport ResivoVenta from '../../plugins/plantillas/resivo_venta';\r\nimport ContainerPlantillas from '../../plugins/plantillas/container_plantillas';\r\nimport ModalNewVenta from '../../plugins/ModalNewVenta';\r\nimport colors from '../../../utils/colors';\r\nimport ErrorEstado from '../../plugins/plugins/ErrorEstado';\r\n\r\nimport ViewPDF from '../../plugins/plugins/ViewPDF'\r\n\r\n\r\nclass Ventas_01 extends Component {\r\n\r\n    state = {\r\n\r\n        itemsSeleccionados: [],\r\n        listaVentas: [],\r\n        estadoTabla: 'cargando',\r\n        listaVentasTemporal: [],\r\n\r\n        rowslistaVentas: [\r\n            { id: 'accions', numeric: false, disablePadding: true, label: '' },\r\n            { id: 'factura_emitida', numeric: false, disablePadding: true, label: 'Estado' },\r\n            { id: 'cliente', numeric: true, disablePadding: false, label: 'Cliente' },\r\n            { id: 'productos', numeric: true, disablePadding: false, label: 'Productos' },\r\n            { id: 'tipo_pago', numeric: true, disablePadding: false, label: 'Tipo de pago' },\r\n            { id: 'subtotal', numeric: true, disablePadding: false, label: 'SubTotal' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n            { id: 'iva', numeric: true, disablePadding: false, label: 'Precio Iva' },\r\n            { id: 'descuento', numeric: true, disablePadding: false, label: 'Descuento' },\r\n            { id: 'dinero_resibido', numeric: true, disablePadding: false, label: 'Dinero recibido' },\r\n            { id: 'cambio', numeric: true, disablePadding: false, label: 'Cambio/Vuelto' },\r\n            { id: 'acreditado', numeric: true, disablePadding: false, label: 'Dinero acreditado' },\r\n            { id: 'codigo', numeric: false, disablePadding: true, label: 'Codigo' },\r\n            { id: 'observacion', numeric: true, disablePadding: false, label: 'ObservaciÃ³n' },\r\n            { id: 'empleado', numeric: true, disablePadding: false, label: 'Empleado' },\r\n            { id: 'fecha_venta', numeric: true, disablePadding: false, label: 'Fecha de venta' },\r\n            { id: 'hora_venta', numeric: true, disablePadding: false, label: 'Hora de venta' },\r\n        ],\r\n        //usuario\r\n        usuario: null,\r\n        // modals\r\n        openModalNewVenta: false,\r\n        estadoModalSimpleCompraProductos: false,\r\n        estadoModalEmitirFactura: false,\r\n        estadoModalCancelarVenta: false,\r\n        estadoModalEditarVenta: false,\r\n        openModalNewVentaFinal: false,\r\n\r\n        //item para editar\r\n        itemEditar: null,\r\n        //fecha actual\r\n\r\n        //permisosUsuarios\r\n\r\n        estadoPermisos: null,\r\n        estadoacciones: '',\r\n        permisoUsuario: null,\r\n        fechaActual: '',\r\n        //estado decaja,\r\n        estadoCaja: false,\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            fechaActual: funtions.obtenerFechaActual()\r\n        })\r\n        //setTimeout(() => { this.obtenerDataBaseDatos() }, 100)\r\n        this.obteberCajaSeleccionada()\r\n        this.obtenerPermisosusuarios()\r\n        this.comprobarUsuario()\r\n\r\n    }\r\n\r\n    obtenerDataBaseDatos = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/ventas').orderByChild('caja').equalTo(this.state.cajaSeleccionada.codigo)\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            listaVentas: [],\r\n                            listaVentasTemporal: [],\r\n                            estadoTabla: 'cargando'\r\n                        })\r\n                        var lista = funtions.snapshotToArray(snapshot)\r\n                        var filterList = lista.sort((a, b) => {\r\n                            a = new Date(a.order);\r\n                            b = new Date(b.order);\r\n                            return a > b ? -1 : a < b ? 1 : 0;\r\n                        })\r\n                        this.setState({\r\n                            listaVentas: filterList,\r\n                            listaVentasTemporal: filterList,\r\n                            estadoTabla: 'llena'\r\n                        })\r\n                    } else {\r\n                        this.setState({\r\n                            listaVentas: [],\r\n                            listaVentasTemporal: [],\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    obteberCajaSeleccionada = () => {\r\n        var db = firebase.database();\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n                operacionVentaRefCaja.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                        if (caja != null) {\r\n                            this.setState({\r\n                                cajaSeleccionada: caja,\r\n                                estadoCaja: caja.estado,\r\n                            })\r\n                            this.obtenerDataBaseDatos()\r\n                        } else {\r\n                            this.setState({\r\n                                cajaSeleccionada: null,\r\n                                estadoCaja: false,\r\n                                estadoTabla: 'vacio'\r\n                            })\r\n                        }\r\n                    } else {\r\n                        this.setState({\r\n                            cajaSeleccionada: null,\r\n                            estadoCaja: false,\r\n                            estadoTabla: 'vacio'\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n\r\n        if (item.id === 'accions') {\r\n            return <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                <ReactToPrint\r\n                    ref={el => (this.refEventoImprimir = el)}\r\n                    trigger={() => <></>}\r\n                    content={() => this.refImprimirResivo}\r\n                />\r\n                <Tooltip title=\"Imprimir resivo\">\r\n                    <IconButton onClick={() => {\r\n                        this.enviarToPlantillaData(n)\r\n                    }}\r\n                    >\r\n                        <LocalPrintshopIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                {\r\n                    n.urlpdf != 'genererando' &&\r\n                    <Tooltip title=\"Descargar pdf\">\r\n                        <IconButton onClick={() => {\r\n                            window.open(\r\n                                n.urlpdf,\r\n                                '_blank'\r\n                            );\r\n                        }}\r\n                        >\r\n                            <PictureAsPdfIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                {\r\n                    n.urlpdf === 'genererando' &&\r\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                        <IconButton disabled>\r\n                            <CircularProgress size={20} thickness={5} style={{ color: colors.getColorPrymaryBlue300() }} />\r\n                        </IconButton>\r\n                        <div style={{ color: '#42A5F5', display: 'flex', alignItems: 'center' }}>Pdf...</div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'cliente') {\r\n            return n.cliente === 'Consumidor Final' ? n.cliente : <>\r\n                <ReturnTextTable\r\n                    referencia=\"clientes\"\r\n                    codigo={n.cliente.codigo}\r\n                    datoTraido=\"nombre\"\r\n                    estado={true}\r\n                />\r\n            </>\r\n        }\r\n\r\n        if (item.id === 'productos') {\r\n            return n.productos.map(item => {\r\n                return <div style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row'\r\n                }}>\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                width: 'max-content',\r\n                                paddingLeft: 10,\r\n                                paddingRight: 10,\r\n                                paddingTop: 0,\r\n                                paddingBottom: 0,\r\n                                height: 25\r\n                            }}>\r\n                                {item.cantidad}\r\n                            </Avatar>\r\n                        }\r\n                        label={\r\n                            <ReturnTextTable\r\n                                referencia=\"productos\"\r\n                                codigo={item.codigo}\r\n                                datoTraido=\"descripcion_producto\"\r\n                                estado={true}\r\n                            />\r\n                        }\r\n                        clickable\r\n                        color=\"inherit\"\r\n                        style={{ margin: 1, height: 25, background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                </div>\r\n            })\r\n        }\r\n\r\n        if (item.id === 'subtotal') {\r\n            return <div style={{ width: 'max-content' }}>{n.subtotal}</div>\r\n        }\r\n\r\n        if (item.id === 'tipo_pago') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                {\r\n                    n.tipo_pago === 'cheque' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkRed300()\r\n                            }}>\r\n                                <SubtitlesIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con cheque'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'transferencia' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkDeepPurple300()\r\n                            }}>\r\n                                <SwapHorizIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Por transferencia bancaria'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'efectivo' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDark()\r\n                            }}>\r\n                                <AttachMoneyIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'En efectivo'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkAmber300()\r\n                            }}>\r\n                                <LocalAtmIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'A crÃ©dito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-credito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkGreen300()\r\n                            }}>\r\n                                <CreditCardIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de crÃ©dito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n                {\r\n                    n.tipo_pago === 'tarjeta-debito' &&\r\n                    <Chip\r\n                        avatar={\r\n                            <Avatar style={{\r\n                                padding: 1,\r\n                                background: colors.getColorPrymaryDarkBlue300()\r\n                            }}>\r\n                                <PaymentIcon style={{ fontSize: 20, color: colors.getColorWhite() }} />\r\n                            </Avatar>\r\n                        }\r\n                        label={'Con tarjeta de dÃ©bito'}\r\n                        clickable\r\n                        style={{ background: colors.getColorPrymaryGrey200() }}\r\n                    />\r\n                }\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'factura_emitida') {\r\n            return n.cliente === 'Consumidor Final' ?\r\n                <div style={{ display: 'flex', flexDirection: 'row', width: 'max-content' }}>\r\n                    <Tooltip title=\"Devolver Venta\">\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                this.setState({\r\n                                    estadoacciones: 'devolver_venta'\r\n                                })\r\n                                setTimeout(() => {\r\n                                    this.comprobarUsuario(n)\r\n                                }, 100)\r\n                            }}>\r\n                            <CloseIcon style={{ color: '#EF5350' }} fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <IconButton disabled>\r\n                        <DoneIcon />\r\n                    </IconButton>\r\n                    <div style={{ display: 'flex', alignItems: 'center' }}>Consumidor Final</div>\r\n                </div>\r\n                :\r\n                <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                    {\r\n                        n.factura_emitida === 'emitida' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <DoneAllIcon style={{ color: '#00c853' }} fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <div style={{ color: '#00c853', display: 'flex', alignItems: 'center' }}>Emitida</div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'no_emitida' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <Tooltip title=\"Devolver Venta\">\r\n                                <IconButton onClick={() => {\r\n                                    this.setState({\r\n                                        estadoacciones: 'devolver_venta'\r\n                                    })\r\n                                    setTimeout(() => {\r\n                                        this.comprobarUsuario(n)\r\n                                    }, 100)\r\n                                }}>\r\n                                    <CloseIcon style={{ color: '#EF5350' }} fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                            <Tooltip title=\"Emitir Factura\">\r\n                                <IconButton onClick={() => {\r\n                                    this.setState({\r\n                                        estadoacciones: 'emitir_factura'\r\n                                    })\r\n                                    setTimeout(() => {\r\n                                        this.comprobarUsuario(n)\r\n                                    }, 100)\r\n                                    /*  this.setState({\r\n                                         codigoEmitirFactura: n.codigo,\r\n                                         estadoModalEmitirFactura: true,\r\n                                     }) */\r\n                                }}>\r\n                                    <InputIcon color='primary' fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'reenviar' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <Tooltip title=\"Emitir Factura\">\r\n                                <IconButton onClick={() => {\r\n                                    this.setState({\r\n                                        estadoacciones: 'emitir_factura'\r\n                                    })\r\n                                    setTimeout(() => {\r\n                                        this.comprobarUsuario(n)\r\n                                    }, 100)\r\n                                }}>\r\n                                    <InputIcon color='primary' fontSize=\"small\" />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'pendiente' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <CircularProgress size={20} thickness={5} style={{ color: '#42A5F5' }} />\r\n                            </IconButton>\r\n                            <div style={{ color: '#42A5F5', display: 'flex', alignItems: 'center' }}>Emitiendo...</div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        n.factura_emitida === 'error' &&\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            <IconButton disabled>\r\n                                <CloseIcon style={{ color: 'red' }} fontSize=\"small\" />\r\n                            </IconButton>\r\n                            <div style={{ color: 'red', display: 'flex', alignItems: 'center' }}>Error de emisiÃ³n</div>\r\n                        </div>\r\n                    }\r\n                    <ErrorEstado>{n.error_factura_emitida}</ErrorEstado>\r\n                </div >\r\n        }\r\n\r\n        if (item.id === 'total') {\r\n            return <div style={{ width: 'max-content' }}>\r\n                <Chip\r\n                    label={<div style={{ color: colors.getColorWhite() }}>{n.total}</div>}\r\n                    clickable\r\n                    style={{ background: colors.getColorPrymary() }}\r\n                />\r\n            </div>\r\n        }\r\n\r\n        if (item.id === 'iva') {\r\n            return <div style={{ width: 'max-content' }}>{n.iva}</div>\r\n        }\r\n\r\n        if (item.id === 'observacion') {\r\n            return <div style={{ width: 'max-content' }}>{n.observacion}</div>\r\n        }\r\n\r\n        if (item.id === 'dinero_resibido') {\r\n            return <div style={{ width: 'max-content' }}>{n.dinero_resibido}</div>\r\n        }\r\n\r\n        if (item.id === 'cambio') {\r\n            return <div style={{ width: 'max-content' }}>{n.cambio}</div>\r\n        }\r\n\r\n        if (item.id === 'acreditado') {\r\n            return <div style={{ width: 'max-content' }}>{n.valor_acreditado}</div>\r\n        }\r\n\r\n        if (item.id === 'fecha_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.fecha_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'hora_venta') {\r\n            return <div style={{ width: 'max-content' }}>{n.hora_venta}</div>\r\n        }\r\n\r\n        if (item.id === 'descuento') {\r\n            return <div style={{ width: 'max-content' }}>{n.descuento}</div>\r\n        }\r\n\r\n        if (item.id === 'empleado') {\r\n            return <ReturnTextTable\r\n                referencia=\"usuarios\"\r\n                codigo={n.empleado}\r\n                datoTraido=\"nombre\"\r\n                estado={true}\r\n            />\r\n        }\r\n\r\n    }\r\n\r\n    recuperarJsonFactura = codigo => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/facturas_ventas/' + codigo);\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.postSet(user.uid, snapshot.val(), codigo)\r\n                        var venteRef = db.ref('users/' + user.uid + '/ventas/' + codigo);\r\n                        venteRef.update({\r\n                            factura_emitida: 'pendiente'\r\n                        })\r\n                        //setSnackBars.openSnack('success', 'rootSnackBar', 'Factura emitida con exito', 2000)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    postSet = async (uidUser, jsonData, codigo) => {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigo,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n\r\n        /* const content = await rawResponse.json();\r\n        console.log(content) */\r\n    }\r\n\r\n    // actualizar el stock de los productos\r\n    updateDataProductos = codigoVenta => {\r\n        var db = firebase.database();\r\n        var ventaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n\r\n        ventaRef.on('value', (snapshot) => {\r\n            if (snapshot.val()) {\r\n\r\n                operacionVentaRefCaja.once('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n\r\n                        var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n\r\n                        cajaRefValorActual.once('value', (snap) => {\r\n                            if (snap.val()) {\r\n                                if (Number(snap.val().valor_caja) < Number(snapshot.val().total)) {\r\n                                    setSnackBars.openSnack('error', 'rootSnackBar', 'Dinero insuficiente en caja', 2000)\r\n                                } else {\r\n                                    snapshot.val().productos.forEach(element => {\r\n                                        var productoRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + element.codigo)\r\n                                        productoRef.once('value', (snapshot) => {\r\n                                            if (snapshot.val()) {\r\n                                                productoRef.update({\r\n                                                    stock_actual: Number(snapshot.val().stock_actual) + Number(element.cantidad)\r\n                                                })\r\n                                            }\r\n                                        })\r\n                                    })\r\n                                    this.setOperacionStock(\r\n                                        snapshot.val().productos,\r\n                                        snapshot.val().cliente,\r\n                                        snapshot.val().dinero_resibido,\r\n                                        snapshot.val().total,\r\n                                        snapshot.val().subtotal,\r\n                                        snapshot.val().descuento,\r\n                                        snapshot.val().cambio,\r\n                                        snapshot.val().tipo_pago,\r\n                                    )\r\n                                    this.setVentaDevuelta(snapshot.val(), snapshot.val().tipo_pago)\r\n                                    this.setVentaCaja(snapshot.val(), snapshot.val().tipo_pago)\r\n                                    setTimeout(() => { this.deleteVenta(snapshot.val().codigo) }, 300)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // venta caja devolver\r\n    setVentaCaja(itemVenta, tipo_pago) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n\r\n                    if(itemVenta.tipo_pago==='efectivo'){\r\n                        var operacionVentaCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/ventas_devueltas/' + itemVenta.codigo)\r\n                        operacionVentaCaja.set(itemVenta)\r\n                    }\r\n\r\n                    var operacionVentaCajaEliminar = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/ventas/' + itemVenta.codigo)\r\n                    operacionVentaCajaEliminar.remove()\r\n\r\n                    var cajaRefValorAcreditado = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n                    cajaRefValorAcreditado.remove()\r\n\r\n                    var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n\r\n                    var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/').orderByChild('cliente/codigo').equalTo(itemVenta.cliente.codigo)\r\n                    cuentaCobrarDeudaQuitarRef.once('value', (snap2) => {\r\n                        if (snap2.val()) {\r\n                            var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + funtions.snapshotToArray(snap2)[0].cliente.codigo + '/lista_deudas/' + itemVenta.codigo)\r\n                            cuentaCobrarDeudaQuitarRef.remove()\r\n\r\n                        }\r\n                    })\r\n\r\n                    if (Number(itemVenta.valor_acreditado) > 0) {\r\n                        var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/').orderByChild('cliente/codigo').equalTo(itemVenta.cliente.codigo)\r\n                        cuentaCobrarDeudaQuitarRef.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                var cuentaCobrarDeudaQuitarRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + funtions.snapshotToArray(snap2)[0].cliente.codigo + '/lista_acreditados/' + itemVenta.codigo)\r\n                                cuentaCobrarDeudaQuitarRef.remove()\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (itemVenta.tipo_pago === 'efectivo') {\r\n                        cajaRefValorActual.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: Number(Number(snap2.val().valor_caja) - Number(itemVenta.total)).toFixed(2)\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n    // venta ventas devueltas\r\n    setVentaDevuelta(itemVenta, tipo_pago) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n                    var operacionVentaDevuelta = db.ref('users/' + firebase.auth().currentUser.uid + '/lista_ventas/ventas_devueltas/' + itemVenta.codigo)\r\n                    itemVenta.caja = caja.codigo\r\n                    itemVenta.factura_emitida = 'devuelta'\r\n                    operacionVentaDevuelta.set(itemVenta)\r\n                    if (Number(itemVenta.valor_acreditado) > 0) {\r\n                        var operacionAcreditadoDevueltoCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/ventas_devueltas/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n                        operacionAcreditadoDevueltoCaja.remove()\r\n\r\n                        var operacionValorTotalCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                        operacionValorTotalCaja.once('value', (snap) => {\r\n                            if (snap.val()) {\r\n                                operacionValorTotalCaja.update({\r\n                                    valor_caja: Number(snap.val().valor_caja) - Number(itemVenta.valor_acreditado)\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    //opercacion stock\r\n    setOperacionStock = (listaProductos, cliente, dinero_resibido, total, subtotal, descuento, cambio, tipo_pago) => {\r\n        var codigoStock = funtions.guidGenerator()\r\n        var arrayProductos = []\r\n        listaProductos.forEach(item => {\r\n            arrayProductos.push({\r\n                codigo: item.codigo,\r\n                cantidad: item.cantidad,\r\n                precio_venta_a: item.precio_venta_a\r\n            })\r\n        })\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'devolucion_cliente',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: cliente,\r\n            productos: arrayProductos,\r\n            total_final: `${Number(total).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: '',\r\n            subtotal: `${Number(subtotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: dinero_resibido,\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: cambio,\r\n            acreditado: '0.00',\r\n            order: order + \"\"\r\n        });\r\n    }\r\n\r\n    deleteVenta = codigo => {\r\n        var db = firebase.database();\r\n        var ventRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigo);\r\n        var ventRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigo);\r\n        ventRef.remove()\r\n        setSnackBars.openSnack('success', 'rootSnackBar', 'Venta eliminada con exito', 2000)\r\n    }\r\n\r\n    enviarToPlantillaData = item => {\r\n        const itemFormat = {\r\n            numero_venta: item.codigo,\r\n            tipo_venta: item.tipo_venta,\r\n            productos: item.productos,\r\n            subtotal: item.subtotal,\r\n            iva: item.iva,\r\n            total: item.total,\r\n            descuento: item.descuento,\r\n            fecha_venta: item.fecha_venta,\r\n            hora_venta: item.hora_venta,\r\n            tipo_pago: item.tipo_pago,\r\n            valor_acreditado: item.valor_acreditado,\r\n            fecha_a_pagar: item.fecha_a_pagar,\r\n            numero_tarjeta: item.numero_tarjeta,\r\n            nombre_banco: item.nombre_banco,\r\n        }\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                if (item.tipo_venta === 'factura') {\r\n                    var clienteRef = db.ref('users/' + user.uid + '/clientes/' + item.cliente.codigo);\r\n                    var empresaRef = db.ref('auth_admins/' + user.uid + \"/nombre_comercial\")\r\n                    clienteRef.once('value', (snapshot) => {\r\n                        if (snapshot.val()) {\r\n                            itemFormat.nombreCliente = snapshot.val().nombre\r\n                            itemFormat.emailCliente = snapshot.val().email\r\n                            itemFormat.identificacionCliente = snapshot.val().numero_identificacion\r\n                            itemFormat.direccionCliente = snapshot.val().direccion\r\n\r\n                            empresaRef.once('value', (snap) => {\r\n                                if (snap.val()) {\r\n                                    itemFormat.nombreEmpresa = snap.val()\r\n                                    this.setState({\r\n                                        itemFormateadoImprimir: itemFormat\r\n                                    })\r\n                                    this.refEventoImprimir.handlePrint()\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                } else {\r\n                    var empresaRef = db.ref('auth_admins/' + user.uid + \"/nombre_comercial\")\r\n                    empresaRef.once('value', (snap) => {\r\n                        if (snap.val()) {\r\n                            itemFormat.nombreEmpresa = snap.val()\r\n                            this.setState({\r\n                                itemFormateadoImprimir: itemFormat\r\n                            })\r\n                            this.refEventoImprimir.handlePrint()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    handleSearch = (codigo) => {\r\n        this.setState({ listaVentas: [], estadoTabla: 'cargando' })\r\n        funtions.setTime(300, () => {\r\n            let array = funtions.filterObjectsCodigo(this.state.listaVentasTemporal, codigo)\r\n            if (array.length > 0) {\r\n                this.setState({ estadoTabla: 'llena' })\r\n            } else {\r\n                this.setState({ estadoTabla: 'sin_resultados' })\r\n            }\r\n            this.setState({\r\n                listaVentas: array\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    obtenerPermisosusuarios = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var usuariosRef = db.ref(`users/${user.uid}/usuarios/${this.props.usuario.code}`)\r\n                usuariosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        if (snapshot.val().privilegios.ventas === true) {\r\n                            this.setState({\r\n                                estadoPermisos: true\r\n                            })\r\n                        } else {\r\n                            this.setState({\r\n                                estadoPermisos: false\r\n                            })\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    comprobarUsuario = (item) => {\r\n        if (this.props.usuario.tipo_usuario === 'administrador') {\r\n            if (this.state.estadoacciones === 'devolver_venta') {\r\n                this.setState({\r\n                    codigoEmitirFactura: item.codigo,\r\n                    estadoModalCancelarVenta: true,\r\n                })\r\n            } else if (this.state.estadoacciones === 'emitir_factura') {\r\n                this.setState({\r\n                    codigoEmitirFactura: item.codigo,\r\n                    estadoModalEmitirFactura: true,\r\n                })\r\n            } else {\r\n                this.setState({ itemSeleccionado: item })\r\n                this.setState({ openModalNewCliente: true })\r\n            }\r\n        } else {\r\n            if (this.state.estadoacciones === 'devolver_venta') {\r\n                if (item.empleado === this.props.usuario.code) {\r\n                    this.setState({\r\n                        codigoEmitirFactura: item.codigo,\r\n                        estadoModalCancelarVenta: true,\r\n                    })\r\n                } else {\r\n                    setSnackBars.openSnack('warning', 'rootSnackBar', `Usted ${this.props.usuario.nombre} no registro esta Venta`, 2000)\r\n                }\r\n            } else if (this.state.estadoacciones === 'emitir_factura') {\r\n                if (item.empleado === this.props.usuario.code) {\r\n                    this.setState({\r\n                        codigoEmitirFactura: item.codigo,\r\n                        estadoModalEmitirFactura: true,\r\n                    })\r\n                } else {\r\n                    setSnackBars.openSnack('warning', 'rootSnackBar', `Usted ${this.props.usuario.nombre} no registro esta Venta`, 2000)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                {/*  <ViewPDF\r\n            /> */}\r\n                {\r\n                    this.state.estadoPermisos &&\r\n                    <div>\r\n                        <MenuHerramientas>\r\n                            {\r\n                                Boolean(this.state.estadoCaja) === true ?\r\n\r\n                                    <>\r\n                                        <Tooltip title=\"Estado de caja\">\r\n                                            <IconButton >\r\n                                                <MonetizationOn style={{ color: '#00c853' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <Tooltip title=\"Estado de caja\">\r\n                                            <IconButton >\r\n                                                <MonetizationOn style={{ color: '#EF5350' }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </>\r\n                            }\r\n\r\n                            <ItemMenuHerramienta\r\n                                titleButton=\"Nueva Venta\"\r\n                                color=\"primary\"\r\n                                visible={true}\r\n                                onClick={() => {\r\n                                    if (this.state.estadoCaja) {\r\n                                        this.setState({ itemEditar: null })\r\n                                        this.setState({ openModalNewVentaFinal: true })\r\n                                    } else {\r\n                                        setSnackBars.openSnack('error', 'rootSnackBar', 'Abrir caja!', 2000)\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <AddIcon />\r\n                            </ItemMenuHerramienta>\r\n\r\n                            <div style={{ flex: 0.95 }}></div>\r\n\r\n                            <Search\r\n                                id='buscar-cliente-clientes'\r\n                                textoSearch=\"Buscar...\"\r\n                                textoTooltip=\"Buscar venta\"\r\n                                handleSearch={this.handleSearch}\r\n                            />\r\n                        </MenuHerramientas>\r\n\r\n                        <Divider />\r\n\r\n                        <TablaNormal\r\n                            textoTitleP=\"Ventas\"\r\n                            textoTitleS=\"Venta\"\r\n                            selectedItems={true}\r\n                            toolbar={false}\r\n                            notTab={false}\r\n                            data={this.state.listaVentas}\r\n                            rows={this.state.rowslistaVentas}\r\n                            handleGetData={this.handleGetData}\r\n                            estadoTabla={this.state.estadoTabla}\r\n                            itemsSeleccionados={items => {\r\n                                this.setState({ itemsSeleccionados: items })\r\n                            }}\r\n                        />\r\n\r\n                        <FullScreenDialog openModal={this.state.openModalNewVentaFinal}>\r\n                            <ModalNewVenta\r\n                                usuario={this.props.usuario}\r\n                                handleClose={() => this.setState({ openModalNewVentaFinal: false })}\r\n                                item={this.state.itemEditar}\r\n                                cajaSeleccionada={this.state.cajaSeleccionada}\r\n                            >\r\n                            </ModalNewVenta>\r\n                        </FullScreenDialog>\r\n\r\n                        <FullScreenDialog openModal={this.state.estadoModalSimpleCompraProductos}>\r\n                            <ModalCompraProductos\r\n                                handleClose={() => this.setState({\r\n                                    estadoModalSimpleCompraProductos: false,\r\n                                })}\r\n                                usuario={this.props.usuario}\r\n                                tipoAjuste='devolucion_cliente'\r\n                            />\r\n                        </FullScreenDialog>\r\n\r\n                        <ModalContainerNormal\r\n                            open={this.state.estadoModalEmitirFactura}\r\n                            handleClose={() => this.setState({ estadoModalEmitirFactura: false })}\r\n                        >\r\n                            <EmitirFacturaModal\r\n                                handleClose={() => this.setState({ estadoModalEmitirFactura: false })}\r\n                                handleEmitir={() => {\r\n                                    this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                                    this.setState({ estadoModalEmitirFactura: false })\r\n                                }}\r\n                            />\r\n                        </ModalContainerNormal>\r\n\r\n                        <ModalContainerNormal\r\n                            open={this.state.estadoModalCancelarVenta}\r\n                            handleClose={() => this.setState({ estadoModalCancelarVenta: false })}\r\n                        >\r\n                            <ModalCancelarVenta\r\n                                handleClose={() => this.setState({ estadoModalCancelarVenta: false })}\r\n                                handleCancelarVenta={() => {\r\n                                    // this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                                    this.updateDataProductos(this.state.codigoEmitirFactura)\r\n                                    this.setState({ estadoModalCancelarVenta: false })\r\n                                }}\r\n                            />\r\n                        </ModalContainerNormal>\r\n\r\n                        <ModalContainerNormal\r\n                            open={this.state.estadoModalEditarVenta}\r\n                            handleClose={() => this.setState({ estadoModalEditarVenta: false })}\r\n                        >\r\n                            <ModalEditarVenta\r\n                                handleClose={() => this.setState({ estadoModalEditarVenta: false })}\r\n                                handleEditarVenta={() => {\r\n                                    // this.recuperarJsonFactura(this.state.codigoEmitirFactura)\r\n                                    this.setState({ openModalNewVenta: true })\r\n                                    this.setState({ estadoModalEditarVenta: false })\r\n                                }}\r\n                            />\r\n                        </ModalContainerNormal>\r\n\r\n                        <ContainerPlantillas>\r\n                            <ResivoVenta\r\n                                item={this.state.itemFormateadoImprimir}\r\n                                ref={el => (this.refImprimirResivo = el)}\r\n                            />\r\n                        </ContainerPlantillas>\r\n\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoPermisos === false &&\r\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center', height: '80vh' }}>\r\n                        <h3><strong>Usted no tiene permisos para <br />\r\n                            esta seccion comuniquese con el administrador</strong></h3>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.estadoPermisos === null &&\r\n                    <CircularProgress />\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ventas_01"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AA/CA;AACA;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AA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A;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AArxBA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAEA;;;AA+fA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAuLA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAev+BA;AACA;AAy+BA;;;;A","sourceRoot":""}