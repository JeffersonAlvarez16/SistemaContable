{"version":3,"file":"static/webpack/static\\development\\pages\\ventasFac.js.97d7c73c102c092a9f37.hot-update.js","sources":["webpack:///./components/plugins/ModalNewVenta.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SectionContentFactura from '../components/SectionContentFactura';\r\nimport SectionFactura from '../components/SectionFactura';\r\nimport funtions from '../../utils/funtions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MonetizationOn from '@material-ui/icons/MonetizationOn';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth'\r\n\r\nimport setSnackBars from './setSnackBars';\r\nimport ModalContainerNormal from '../modals_container/ModalContainerNormal';\r\nimport DeleteActivarDesactivar from './deleteActivarDesactivar';\r\nimport AutoCompleteSelectedProducto from './AutoCompleteSelectedProducto';\r\nimport ModalNewVentaJs from './ModalNewVentaJs';\r\nimport { TextField, MenuItem, Typography, FormControlLabel, Switch, Button, Tooltip } from '@material-ui/core';\r\nimport ContenedorProductoVista from './ventas/ContenedorProductoVista';\r\nimport TablaNormal from '../components/tables/TableNormal';\r\nimport ContenedorClienteVista from './ventas/ContenedorClienteVista';\r\nimport ContenedorPreciosTotalesVista from './ventas/ContenedorPreciosTotalesVista';\r\nimport ContenedorSeleccionarTipoPrecio from './ventas/ContenedorSeleccionarTipoPrecio';\r\nimport ContenedorSeleccionarTipoPago from './ventas/ContenedorSeleccionarTipoPago';\r\nimport ContenedorBotonesVenta from './ventas/ContenedorBotonesVenta';\r\nimport ModalFinalizaPago from '../modals_container/ventas/ModalFinalizaPago';\r\nimport ModalSettingsPrices from '../modals_container/ModalSettingsPrices';\r\nimport colors from '../../utils/colors';\r\nimport ContenedorNumeroFactura from './ventas/ContenedorNumeroFactura';\r\n\r\n\r\n\r\n\r\nclass ModalNewVenta extends Component {\r\n\r\n    state = {\r\n        usuario: null,\r\n\r\n        sumaSubTotal: 0,\r\n        sumaIva: 0,\r\n        sumaTotal: 0,\r\n\r\n        mostrarVentana: null,\r\n\r\n        productosSeleccionados: [],\r\n\r\n        //nuevos\r\n        listaProductosSeleccionadosEditados: [],\r\n        listaProductosSeleccionados: [],\r\n        itemProductoCargado: null,\r\n\r\n        cargaAutomatica: false,\r\n\r\n        rowslistaProductos: [\r\n            { id: 'acciones', numeric: true, disablePadding: false, label: '' },\r\n            { id: 'precio_por_defecto', numeric: true, disablePadding: false, label: 'Precio' },\r\n            { id: 'cantidad', numeric: true, disablePadding: false, label: 'Cantidad' },\r\n            { id: 'descripcion_producto', numeric: true, disablePadding: false, label: 'Descripcion' },\r\n            { id: 'precio_venta', numeric: true, disablePadding: false, label: 'Precio/U' },\r\n            { id: 'total', numeric: true, disablePadding: false, label: 'Total' },\r\n        ],\r\n        clienteFacturacion: '',\r\n        clienteSeleccionado: null,\r\n\r\n        //tipo de pago\r\n        tipo_pago: 'efectivo',\r\n        //estado de modals\r\n        estadoModalFinalizaPago: false,\r\n        estadoModalSimpleConfigurarPrecios: false,\r\n        //seleecionar producto por defecto\r\n        seleccionarProductoPordefecto: true,\r\n        //\r\n\r\n\r\n        clienteCargadoDB: '',\r\n\r\n        cliente: '',\r\n        descuento: 0,\r\n        observacion: '',\r\n        dinero_resibido: 0,\r\n        cambio: 0,\r\n\r\n\r\n        //valores adicionales para la factura\r\n        precioProductosSinIva: 0,\r\n        precioProductosConIva: 0,\r\n\r\n        //factura electronica\r\n        facturaElectronica: false,\r\n\r\n        // estado modales\r\n        estadoModalGuardarVenta: false,\r\n\r\n        //id del usuario\r\n        uidUser: '',\r\n\r\n        //tipo de venta\r\n        tipo_venta: 'factura',\r\n        // ambiente\r\n        ambienteFacturacion: 0,\r\n        //numero de factura\r\n        numero_factura: ''\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            this.setState({\r\n                uidUser: user.uid\r\n            })\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('auth_admins/' + user.uid + \"/ambiente\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({ ambienteFacturacion: snap.val() })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/precios\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({ precios: funtions.snapshotToArray(snap) })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/configuracion\")\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        const numero_factura = snap.val().numero_factura\r\n                        const suma = Number(numero_factura) + 1\r\n                        const tama単o = String(suma).length\r\n                        const restaTama単o = 9 - Number(tama単o)\r\n                        var cadenaFinal = ''\r\n                        for (var i = 0; i < restaTama単o; i++) {\r\n                            cadenaFinal = cadenaFinal + '0'\r\n                        }\r\n                        const sumaFinal = `${cadenaFinal}${suma}`\r\n                        this.setState({\r\n                            numero_factura: sumaFinal,\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('users/' + user.uid + \"/usuarios/\" + this.props.usuario.code + '/punto_emision')\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({\r\n                            punto_emision: snap.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var empresaRef = db.ref('auth_admins/' + user.uid + '/establecimiento/codigo')\r\n                empresaRef.on('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        this.setState({\r\n                            codigoEstablecimiento: snap.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        this.obtenerPreciosDefectoConfiguracion()\r\n        if (this.props.item) {\r\n            this.setState({\r\n                cambio: this.props.item.cambio,\r\n                cliente: this.props.item.cliente,\r\n                codigo: this.props.item.codigo,\r\n                descuento: this.props.item.descuento,\r\n                dinero_resibido: this.props.item.dinero_resibido,\r\n                empleado: this.props.item.empleado,\r\n                estado: this.props.item.estado,\r\n                factura_emitida: this.props.item.factura_emitida,\r\n                fecha_venta: this.props.item.fecha_venta,\r\n                hora_venta: this.props.item.hora_venta,\r\n                iva: this.props.item.iva,\r\n                observacion: this.props.item.observacion,\r\n                order: this.props.item.order,\r\n                productosSeleccionados: this.props.item.productos,\r\n                subtotal: this.props.item.subtotal,\r\n                tipo_venta: this.props.item.tipo_venta,\r\n                total: this.props.item.total\r\n            })\r\n        }\r\n    }\r\n\r\n    obtenerPreciosDefectoConfiguracion = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var productosRef = db.ref('users/' + user.uid + '/configuracion/precio_por_defecto')\r\n                productosRef.on('value', (snapshot) => {\r\n                    if (snapshot.val()) {\r\n                        this.setState({\r\n                            precioSeleccionadoCargar: snapshot.val()\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleGetData = (n, item) => {\r\n        if (item.id === 'codigo') {\r\n            return n.codigo\r\n        }\r\n        if (item.id === 'precio_por_defecto') {\r\n            return <div style={{ width: 100, position: 'relative', left: -80 }}>\r\n                <TextField\r\n                    id={\"filled-unidad-precio-defecto\" }\r\n                    select\r\n                    label=\"\"\r\n                    //error={this.state.precio_por_defecto.length === 0}\r\n                    value={n.precio_por_defecto}\r\n                    onChange={event => {\r\n                        var array = this.state.listaProductosSeleccionados\r\n                        array.forEach((it, i) => {\r\n                            if (it.codigo === n.codigo) {\r\n                                var item = it\r\n                                item.precio_por_defecto = event.target.value\r\n                                array[i] = item\r\n                                this.setState({\r\n                                    listaProductosSeleccionados: array\r\n                                })\r\n                            }\r\n                        })\r\n                        setTimeout(() => {\r\n                            var array2 = this.state.listaProductosSeleccionadosEditados\r\n                            array2.forEach((it, i) => {\r\n                                if (it.codigo === n.codigo) {\r\n                                    var item = it\r\n                                    item.precio_venta = Number(((Number(n.precio_costo) * Number(this.obtenerPorcentajePrecio(n.precio_por_defecto))) + Number(n.precio_costo)).toFixed(2))\r\n                                    array2[i] = item\r\n                                    this.setState({\r\n                                        listaProductosSeleccionadosEditados: array2\r\n                                    })\r\n                                }\r\n                            })\r\n\r\n                        }, 100)\r\n                        setTimeout(() => {\r\n                            this.calcularValoresTotales()\r\n                        }, 200)\r\n                    }}\r\n                    margin=\"normal\"\r\n                    variant=\"standard\"\r\n                    style={{ width: 'max-content', height: 30 }}\r\n                //disabled={!props.itemProductoCargado}\r\n                >\r\n                    {\r\n                        this.state.precios != null &&\r\n                        this.state.precios.map(item => {\r\n                            return <MenuItem key={item.codigo} value={item.codigo}>{`${item.nombre}`}</MenuItem>\r\n                        })\r\n                    }\r\n                </TextField>\r\n            </div>\r\n        }\r\n        if (item.id === 'cantidad') {\r\n\r\n            var restaRetorno = <div style={{ width: 'max-content', display: 'flex', flexDirection: 'row' }}>\r\n                <TextField\r\n                    id=\"handle-precio-edit-cantidad\"\r\n                    margin=\"dense\"\r\n                    type=\"number\"\r\n                    value={this.state.listaProductosSeleccionadosEditados.filter(item => n.codigo === item.codigo)[0].cantidad}\r\n                    onChange={event => {\r\n                        var array = this.state.listaProductosSeleccionadosEditados\r\n                        array.filter(item => n.codigo === item.codigo)[0].cantidad = event.target.value\r\n                        this.setState({\r\n                            listaProductosSeleccionadosEditados: array\r\n                        })\r\n                        this.calcularValoresTotales()\r\n                    }}\r\n                    placeholder='00'\r\n                    style={{ width: 50 }}\r\n                />\r\n                <div style={{ width: 'max-content', display: 'flex', alignItems: 'center', justifyContent: 'start', paddingLeft: 10 }}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            en stock <div style={{ color: colors.getColorPrymaryDark() }}>{Number(n.stock_actual) - Number(this.state.listaProductosSeleccionadosEditados.filter(item => n.codigo === item.codigo)[0].cantidad)}</div>\r\n                        </div>\r\n                        <div style={{ color: colors.getColorPrymary() }}>\r\n                            {`${n.unidad_medida}`}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            return restaRetorno\r\n        }\r\n        if (item.id === 'descripcion_producto') {\r\n            return Boolean(n.tiene_iva) ? `* ${n.descripcion_producto}` : n.descripcion_producto\r\n        }\r\n        if (item.id === 'precio_venta') {\r\n            var precioR = 0\r\n            precioR = ((Number(n.precio_costo) * Number(this.obtenerPorcentajePrecio(n.precio_por_defecto))) + Number(n.precio_costo)).toFixed(2)\r\n\r\n            return precioR\r\n        }\r\n        if (item.id === 'total') {\r\n            var precioR = 0\r\n            precioR = ((Number(n.precio_costo) * Number(this.obtenerPorcentajePrecio(n.precio_por_defecto))) + Number(n.precio_costo)).toFixed(2)\r\n\r\n            var itemValor = this.state.listaProductosSeleccionadosEditados.filter(item => item.codigo === n.codigo)[0]\r\n            var sumaTotal = itemValor.cantidad * precioR\r\n            return sumaTotal.toFixed(2)\r\n        }\r\n        if (item.id === 'acciones') {\r\n            return <IconButton variant=\"fab\" mini color=\"default\" aria-label=\"quit\" onClick={() => {\r\n                const arraySeleccionados = this.state.listaProductosSeleccionados\r\n                const arraySeleccionadosEditados = this.state.listaProductosSeleccionadosEditados\r\n                var contador1 = 0\r\n                var contador2 = 0\r\n                arraySeleccionados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionados.splice(contador1, 1);\r\n                        this.setState({ listaProductosSeleccionados: arraySeleccionados })\r\n                    }\r\n                    contador1++\r\n                })\r\n                arraySeleccionadosEditados.forEach(item => {\r\n                    if (item.codigo === n.codigo) {\r\n                        arraySeleccionadosEditados.splice(contador2, 1);\r\n                        this.setState({ listaProductosSeleccionadosEditados: arraySeleccionadosEditados })\r\n                    }\r\n                    contador2++\r\n                })\r\n                this.calcularValoresTotales()\r\n            }}>\r\n                <CloseIcon />\r\n            </IconButton >\r\n        }\r\n\r\n    }\r\n\r\n    escFunction = (event) => {\r\n        if (event.keyCode === 27) {\r\n            this.props.handleClose()\r\n        }\r\n    }\r\n\r\n    getStatusUsuario = () => {\r\n        if (this.state.usuario) {\r\n            if (this.state.usuario.code) {\r\n                this.setState({\r\n                    mostrarVentana: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    mostrarVentana: false\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick = () => {\r\n        this.contentFactura.finalizarVenta()\r\n    };\r\n\r\n    handleNuevaVenta = () => {\r\n        this.sectionFactura.nuevaVenta()\r\n    }\r\n\r\n    handleDescontar = descuento => {\r\n        this.setState({\r\n            descuento: descuento\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaSubTotal, sumaIva, dinero_resibido } = this.state\r\n            var sumaDescuento = ((Number(sumaSubTotal) + Number(sumaIva)) - Number(descuento)).toFixed(2)\r\n            this.setState({\r\n                sumaTotal: sumaDescuento\r\n            })\r\n            this.handleDineroResibido(dinero_resibido)\r\n        }, 100)\r\n    }\r\n\r\n    handleDineroResibido = dinero_resibido => {\r\n        this.setState({\r\n            dinero_resibido: dinero_resibido\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaTotal } = this.state\r\n            var sumaCambio = Number(dinero_resibido) > 0 ? (Number(dinero_resibido) - Number(sumaTotal)).toFixed(2) : 0\r\n            this.setState({\r\n                cambio: sumaCambio\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    handleObservacion = observacion => {\r\n        this.setState({\r\n            observacion\r\n        })\r\n    }\r\n\r\n    //finalizar venta\r\n    handleFinalizarVenta = item => {\r\n        const { listaProductosSeleccionadosEditados, facturaElectronica, uidUser, tipo_venta } = this.state\r\n        var codigoRegistroVenta = funtions.guidGenerator()\r\n        switch (item.tipo_pago) {\r\n            case 'efectivo': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockEfectivo(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaEfectivo(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'credito': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockCredito(listaProductosSeleccionadosEditados, item.valor_acreditado)\r\n                this.setSaveRegistroVentaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'tarjeta-credito': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockTarjetaCredito(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaTarjetaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'tarjeta-debito': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockTarjetaCredito(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaTarjetaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'cheque': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockTarjetaCredito(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaTarjetaCredito(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            case 'transferencia': {\r\n                this.updateDataProductos()\r\n                this.setOperacionStockEfectivo(listaProductosSeleccionadosEditados)\r\n                this.setSaveRegistroVentaEfectivo(codigoRegistroVenta, item)\r\n                this.enviarFacturaElectronica(codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item)\r\n                break\r\n            }\r\n            default: {\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    sumarNumeroFactura = () => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user) {\r\n                var db = firebase.database();\r\n                var numeroFactura = db.ref('users/' + user.uid + \"/configuracion\")\r\n                numeroFactura.once('value', (snap) => {\r\n                    if (snap.val()) {\r\n                        const numero_factura = snap.val().numero_factura\r\n                        const suma = Number(numero_factura) + 1\r\n                        const tama単o = String(suma).length\r\n                        const restaTama単o = 9 - Number(tama単o)\r\n                        var cadenaFinal = ''\r\n                        for (var i = 0; i < restaTama単o; i++) {\r\n                            cadenaFinal = cadenaFinal + '0'\r\n                        }\r\n                        numeroFactura.update({\r\n                            numero_factura: `${cadenaFinal}${suma}`\r\n                        })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    enviarFacturaElectronica = (codigoRegistroVenta, uidUser, tipo_venta, facturaElectronica, item) => {\r\n        if (tipo_venta === 'factura') {\r\n\r\n            var jsonData = {}\r\n            switch (item.tipo_pago) {\r\n                case 'efectivo': {\r\n                    jsonData = this.createJsonFacturaElectronicaEfectivo()\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectr坦nica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'credito': {\r\n                    jsonData = this.createJsonFacturaElectronicaCredito(item)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectr坦nica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'tarjeta-credito': {\r\n                    jsonData = this.createJsonFacturaElectronicaTarjetaCredito(item)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectr坦nica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'tarjeta-debito': {\r\n                    jsonData = this.createJsonFacturaElectronicaTarjetaCredito(item)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectr坦nica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'cheque': {\r\n                    jsonData = this.createJsonFacturaElectronicaTarjetaCredito(item)\r\n                    this.postSetGeneratePdf(uidUser, jsonData, codigoRegistroVenta)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectr坦nica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                case 'transferencia': {\r\n                    jsonData = this.createJsonFacturaElectronicaTransferencia()\r\n                    this.postSetGeneratePdf(uidUser, jsonData, codigoRegistroVenta)\r\n                    this.saveFacturasJson(jsonData, codigoRegistroVenta)\r\n                    this.sumarNumeroFactura()\r\n                    this.enviarFacturaElectr坦nica(facturaElectronica, uidUser, jsonData, codigoRegistroVenta)\r\n                    this.setState({ abrirModalFinalizarVenta: false })\r\n                    break\r\n                }\r\n                default: {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.props.handleClose()\r\n        }, 500)\r\n        setSnackBars.openSnack('success', 'rootSnackBar', 'Venta guardada', 2000)\r\n    }\r\n\r\n    enviarFacturaElectr坦nica = (facturaElectronica, uidUser, jsonData, codigoRegistroVenta) => {\r\n        if (Boolean(facturaElectronica)) {\r\n            this.postSet(uidUser, jsonData, codigoRegistroVenta)\r\n        }else{\r\n            this.postSetGeneratePdf(uidUser, jsonData, codigoRegistroVenta)\r\n        }\r\n    }\r\n\r\n    saveFacturasJson = (jsonData, codigoRegistroVenta) => {\r\n        var db = firebase.database();\r\n        var operacionFacturaJson = db.ref('users/' + firebase.auth().currentUser.uid + '/facturas_ventas/' + codigoRegistroVenta);\r\n        operacionFacturaJson.set(jsonData)\r\n    }\r\n\r\n    postSet = async (uidUser, jsonData, codigoRegistroVenta) => {\r\n        //const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/generarfactura', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigoRegistroVenta,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n\r\n        /* const content = await rawResponse.json();\r\n        setSnackBars.openSnack('success', 'rootSnackBar', `Factura emitida con exito ${content.estado}`, 2000)\r\n        */ /* if (content != null) {\r\n            this.setState({ estadoModalGuardarVenta: false })\r\n        } */\r\n    }\r\n    postSetGeneratePdf = async (uidUser, jsonData, codigoRegistroVenta) => {\r\n        const rawResponse = await fetch('https://stormy-bayou-19844.herokuapp.com/facturaPdf', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'id': uidUser,\r\n                'codigo': codigoRegistroVenta,\r\n            },\r\n            body: JSON.stringify(jsonData)\r\n        })\r\n    }\r\n\r\n    //comprobar campos llenos \r\n    comprobarCamposLlenosEfectivo = () => {\r\n        const { listaProductosSeleccionados, dinero_resibido } = this.state\r\n        if (\r\n            this.comprobarTipoVenta() > 0 &&\r\n            listaProductosSeleccionados.length > 0 &&\r\n            dinero_resibido.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Completar todo los campos', 1000)\r\n            return false\r\n        }\r\n    }\r\n\r\n    comprobarCamposLlenosCredito = () => {\r\n        const { listaProductosSeleccionados, dinero_resibido } = this.state\r\n        if (\r\n            this.comprobarTipoVenta() > 0 &&\r\n            listaProductosSeleccionados.length > 0\r\n        ) {\r\n            return true\r\n        } else {\r\n            setSnackBars.openSnack('error', 'rootSnackBar', 'Completar todo los campos', 1000)\r\n            return false\r\n        }\r\n    }\r\n    ////////////////////////////////\r\n\r\n    comprobarTipoVenta = () => {\r\n        const { clienteSeleccionado, tipo_venta } = this.state\r\n        if (tipo_venta === 'final') {\r\n            return true\r\n        } else {\r\n            if (clienteSeleccionado != null) {\r\n                if (clienteSeleccionado.toString().length > 0) {\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n\r\n    //Registra la venta \r\n    setSaveRegistroVentaEfectivo = (codigoVenta, item) => {\r\n        const {\r\n            clienteSeleccionado,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica,\r\n            listaProductosSeleccionadosEditados,\r\n            tipo_pago\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        var itemVenta = {\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            descuento: Number(descuento).toFixed(2),\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: Number(dinero_resibido).toFixed(2),\r\n            cambio: Number(cambio).toFixed(2),\r\n            subtotal: Number(sumaSubTotal).toFixed(2),\r\n            iva: Number(sumaIva).toFixed(2),\r\n            total: Number(sumaTotal).toFixed(2),\r\n            productos: listaProductosSeleccionadosEditados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            numero_tarjeta: '',\r\n            nombre_banco: '',\r\n            tipo_pago,\r\n            valor_acreditado: '0.00',\r\n            fecha_a_pagar: '',\r\n            caja: cajaSeleccionada.codigo,\r\n            urlpdf: 'genererando',\r\n        }\r\n        this.setVentaCaja(itemVenta, tipo_pago, item)\r\n        operacionVentaRef.set(itemVenta)\r\n    }\r\n\r\n    setSaveRegistroVentaCredito = (codigoVenta, item) => {\r\n        const {\r\n            clienteSeleccionado,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica,\r\n            listaProductosSeleccionadosEditados,\r\n            tipo_pago\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        var itemVenta = {\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            descuento: Number(descuento).toFixed(2),\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: '0.00',\r\n            cambio: '0.00',\r\n            subtotal: Number(sumaSubTotal).toFixed(2),\r\n            iva: Number(sumaIva).toFixed(2),\r\n            total: Number(sumaTotal).toFixed(2),\r\n            productos: listaProductosSeleccionadosEditados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            numero_tarjeta: '',\r\n            nombre_banco: '',\r\n            tipo_pago,\r\n            valor_acreditado: Number(item.valor_acreditado).toFixed(2),\r\n            fecha_a_pagar: item.fecha_vencimiento,\r\n            caja: cajaSeleccionada.codigo,\r\n            urlpdf: 'genererando',\r\n        }\r\n\r\n        this.setVentaCaja(itemVenta, tipo_pago, item)\r\n\r\n        operacionVentaRef.set(itemVenta)\r\n    }\r\n    setSaveRegistroVentaTarjetaCredito = (codigoVenta, item) => {\r\n        const {\r\n            clienteSeleccionado,\r\n            descuento,\r\n            observacion,\r\n            dinero_resibido,\r\n            cambio,\r\n            sumaSubTotal,\r\n            sumaIva,\r\n            sumaTotal,\r\n            tipo_venta,\r\n            facturaElectronica,\r\n            listaProductosSeleccionadosEditados,\r\n            tipo_pago\r\n        } = this.state\r\n\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var db = firebase.database();\r\n        var operacionVentaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/ventas/' + codigoVenta);\r\n        var order = new Date()\r\n\r\n        var itemVenta = {\r\n            codigo: codigoVenta,\r\n            cliente: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            descuento: Number(descuento).toFixed(2),\r\n            tipo_venta,\r\n            factura_emitida: Boolean(facturaElectronica) ? 'pendiente' : 'no_emitida',\r\n            observacion: observacion,\r\n            dinero_resibido: '0.00',\r\n            cambio: '0.00',\r\n            subtotal: Number(sumaSubTotal).toFixed(2),\r\n            iva: Number(sumaIva).toFixed(2),\r\n            total: Number(sumaTotal).toFixed(2),\r\n            productos: listaProductosSeleccionadosEditados,\r\n            fecha_venta: funtions.obtenerFechaActual(),\r\n            hora_venta: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            empleado: this.props.usuario.code,\r\n            order: '' + order,\r\n            estado: true,\r\n            numero_tarjeta: item.propiedades_numero,\r\n            nombre_banco: item.propiedades_banco,\r\n            tipo_pago,\r\n            valor_acreditado: '0.00',\r\n            fecha_a_pagar: '',\r\n            caja: cajaSeleccionada.codigo,\r\n            urlpdf: 'genererando',\r\n        }\r\n        this.setVentaCaja(itemVenta, tipo_pago, item)\r\n        operacionVentaRef.set(itemVenta)\r\n    }\r\n    ////////////////////////\r\n    setVentaCaja(itemVenta, tipo_pago, item) {\r\n        var db = firebase.database();\r\n        var codigoVentaCaja = funtions.guidGenerator()\r\n        var operacionVentaRefCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_abiertas_usuario')\r\n        operacionVentaRefCaja.once('value', (snap) => {\r\n            if (snap.val()) {\r\n                var caja = funtions.snapshotToArray(snap).filter(it => it.usuario === this.props.usuario.code)[0]\r\n                if (Boolean(caja.estado)) {\r\n                    var operacionVentaCaja = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/ventas/' + itemVenta.codigo)\r\n                    var cajaRefValorActual = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo)\r\n                    if (tipo_pago === 'efectivo') {\r\n                        cajaRefValorActual.once('value', (snap2) => {\r\n                            if (snap2.val()) {\r\n                                operacionVentaCaja.set(itemVenta)\r\n                                cajaRefValorActual.update({\r\n                                    valor_caja: Number(Number(snap2.val().valor_caja) + Number(itemVenta.total)).toFixed(2)\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                    if (tipo_pago === 'credito') {\r\n                        var cuentaCobrarClienteRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo)\r\n                        var configuracionMes = db.ref('users/' + firebase.auth().currentUser.uid + '/configuracion/dias_a_pagar_defecto/dias')\r\n                        cuentaCobrarClienteRef.once('value', (snap) => {\r\n                            if (snap.val()) {\r\n                                var aumentarDeudaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_deudas/' + itemVenta.codigo)\r\n                                var aumentarAcreditadoRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_acreditados/' + itemVenta.codigo)\r\n                                aumentarDeudaRef.set({\r\n                                    codigo: itemVenta.codigo,\r\n                                    valor: this.state.sumaTotal,\r\n                                    fecha_registro: funtions.obtenerFechaActual(),\r\n                                    hora_registro: funtions.obtenerHoraActual(),\r\n                                    estado: true\r\n                                })\r\n                                var cajaRefValorAcreditado = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n\r\n                                if (Number(item.valor_acreditado) > 0) {\r\n                                    cajaRefValorAcreditado.set({\r\n                                        codigo: itemVenta.codigo,\r\n                                        valor: item.valor_acreditado,\r\n                                        fecha_registro: funtions.obtenerFechaActual(),\r\n                                        hora_registro: funtions.obtenerHoraActual(),\r\n                                        estado: true,\r\n                                        tipo: 'pago_venta_credito'\r\n                                    })\r\n                                    aumentarAcreditadoRef.set({\r\n                                        codigo: itemVenta.codigo,\r\n                                        valor: item.valor_acreditado,\r\n                                        fecha_registro: funtions.obtenerFechaActual(),\r\n                                        hora_registro: funtions.obtenerHoraActual(),\r\n                                        estado: true,\r\n                                        tipo: 'pago_venta_credito'\r\n                                    })\r\n                                    cajaRefValorActual.once('value', (snap2) => {\r\n                                        if (snap2.val()) {\r\n                                            cajaRefValorActual.update({\r\n                                                valor_caja: Number(Number(snap2.val().valor_caja) + Number(item.valor_acreditado)).toFixed(2)\r\n                                            })\r\n\r\n                                        }\r\n                                    })\r\n                                }\r\n                            } else {\r\n                                Date.prototype.addDays = function (days) {\r\n                                    var date = new Date(this.valueOf())\r\n                                    date.setDate(date.getDate() + days)\r\n                                    var dayDate = date.getDate()\r\n                                    var mes = date.getMonth() + 1\r\n                                    if (dayDate.toString().length === 1) {\r\n                                        dayDate = '0' + dayDate\r\n                                    }\r\n                                    if (mes.toString().length === 1) {\r\n                                        mes = '0' + mes\r\n                                    }\r\n                                    return `${date.getFullYear()}-${mes}-${dayDate}`;\r\n                                }\r\n                                var date = new Date();\r\n                                configuracionMes.once('value', (snapp) => {\r\n                                    if (snapp.val()) {\r\n\r\n                                        cuentaCobrarClienteRef.set({\r\n                                            cliente: this.state.clienteSeleccionado,\r\n                                            codigo: this.state.clienteSeleccionado.codigo,\r\n                                            estado: true,\r\n                                            estado_cuenta: 'deuda',\r\n                                            fecha_registro: funtions.obtenerFechaActual(),\r\n                                            fecha_pago: date.addDays(Number(snap.val())),\r\n                                            hora_registro: funtions.obtenerHoraActual(),\r\n                                            order: '' + new Date(),\r\n                                            tipo_cuenta: 'venta_credito',\r\n                                            total: this.state.sumaTotal,\r\n                                            usuario: this.props.usuario.code,\r\n                                        })\r\n\r\n\r\n                                        var deudaRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_deudas/' + itemVenta.codigo)\r\n                                        deudaRef.set({\r\n                                            codigo: itemVenta.codigo,\r\n                                            valor: this.state.sumaTotal,\r\n                                            fecha_registro: funtions.obtenerFechaActual(),\r\n                                            hora_registro: funtions.obtenerHoraActual(),\r\n                                            estado: true,\r\n                                            tipo: 'pago_venta_credito'\r\n                                        })\r\n\r\n                                        var cajaRefValorAcreditado = db.ref('users/' + firebase.auth().currentUser.uid + '/caja/cajas_normales/' + caja.codigo + '/lista_dinero_acreditado_venta_credito/' + itemVenta.codigo)\r\n                                        var aumentarAcreditadoRef = db.ref('users/' + firebase.auth().currentUser.uid + '/cuentas_por_cobrar/cuentas_por_cobrar_basicas/' + this.state.clienteSeleccionado.codigo + '/lista_acreditados/' + itemVenta.codigo)\r\n\r\n                                        if (Number(item.valor_acreditado) > 0) {\r\n                                            cajaRefValorAcreditado.set({\r\n                                                codigo: itemVenta.codigo,\r\n                                                valor: item.valor_acreditado,\r\n                                                fecha_registro: funtions.obtenerFechaActual(),\r\n                                                hora_registro: funtions.obtenerHoraActual(),\r\n                                                estado: true,\r\n                                                tipo: 'pago_venta_credito'\r\n                                            })\r\n                                            aumentarAcreditadoRef.set({\r\n                                                codigo: itemVenta.codigo,\r\n                                                valor: item.valor_acreditado,\r\n                                                fecha_registro: funtions.obtenerFechaActual(),\r\n                                                hora_registro: funtions.obtenerHoraActual(),\r\n                                                estado: true,\r\n                                                tipo: 'pago_venta_credito'\r\n                                            })\r\n                                            cajaRefValorActual.once('value', (snap2) => {\r\n                                                if (snap2.val()) {\r\n                                                    cajaRefValorActual.update({\r\n                                                        valor_caja: Number(Number(snap2.val().valor_caja) + Number(item.valor_acreditado)).toFixed(2)\r\n                                                    })\r\n\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n    ////////////////////////////////////////\r\n    // actualizar el stok de los productos\r\n    updateDataProductos = () => {\r\n        const { listaProductosSeleccionadosEditados } = this.state\r\n        listaProductosSeleccionadosEditados.forEach(item => {\r\n            var db = firebase.database();\r\n            var productosRef = db.ref('users/' + firebase.auth().currentUser.uid + '/productos/' + item.codigo);\r\n            productosRef.once('value', (snap) => {\r\n                if (snap.val()) {\r\n                    productosRef.update({\r\n                        stock_actual: Number(snap.val().stock_actual) - Number(item.cantidad)\r\n                    });\r\n                }\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    //opercacion stock\r\n    setOperacionStockEfectivo = (listaProductos) => {\r\n        const { clienteSeleccionado, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio, tipo_pago } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            productos: listaProductos,\r\n            total_final: `${Number(sumaTotal).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: `${Number(sumaSubTotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: `${Number(dinero_resibido).toFixed(2)}`,\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: cambio,\r\n            acreditado: '0.00',\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n    }\r\n\r\n    setOperacionStockCredito = (listaProductos, valor_acreditado) => {\r\n        const { clienteSeleccionado, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio, tipo_pago } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            productos: listaProductos,\r\n            total_final: `${Number(sumaTotal).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: `${Number(sumaSubTotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: '0.00',\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: Number(Number(sumaTotal) - Number(valor_acreditado)).toFixed(2),\r\n            vuelto: '0.00',\r\n            acreditado: `${Number(valor_acreditado).toFixed(2)}`,\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n    }\r\n    setOperacionStockTarjetaCredito = (listaProductos) => {\r\n        const { clienteSeleccionado, observacion, dinero_resibido, sumaTotal, tipo_venta, sumaSubTotal, descuento, cambio, tipo_pago } = this.state\r\n        const { cajaSeleccionada } = this.props\r\n\r\n        var codigoStock = funtions.guidGenerator()\r\n        var order = new Date()\r\n        var db = firebase.database();\r\n        var operacionStockRef = db.ref('users/' + firebase.auth().currentUser.uid + '/operaciones_stock/' + codigoStock);\r\n        operacionStockRef.set({\r\n            codigo: codigoStock,\r\n            tipo_operacion: 'venta-producto',\r\n            fecha: funtions.obtenerFechaActual(),\r\n            hora: `${new Date().getHours() + \":\" + new Date().getMinutes() + \":\" + new Date().getSeconds()}`,\r\n            cliente_proveedor: tipo_venta === 'final' ? 'Consumidor Final' : clienteSeleccionado,\r\n            productos: listaProductos,\r\n            total_final: `${Number(sumaTotal).toFixed(2)}`,\r\n            empleado: this.props.usuario.code,\r\n            observacion: observacion,\r\n            subtotal: `${Number(sumaSubTotal).toFixed(2)}`,\r\n            descuento: `${Number(descuento).toFixed(2)}`,\r\n            otros_gastos: '0.00',\r\n            flete: '0.00',\r\n            valor_pagado: '0.00',\r\n            medio_pago: tipo_pago,\r\n            saldo_favor: '0.00',\r\n            en_deuda: '0.00',\r\n            vuelto: '0.00',\r\n            acreditado: '0.00',\r\n            order: order + \"\",\r\n            caja: cajaSeleccionada.codigo\r\n        })\r\n    }\r\n    //////////////////////////////////\r\n\r\n    //crar json para factura electr坦nica\r\n    createJsonFacturaElectronicaEfectivo = () => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": \"efectivo\",\r\n                    \"total\": Number(sumaTotal)\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n    createJsonFacturaElectronicaCredito = (item) => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"credito\": {\r\n                \"fecha_vencimiento\": `${item.fecha_vencimiento}`,\r\n                \"monto\": Number((Number(item.monto) - Number(item.valor_acreditado)).toFixed(2))\r\n            },\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": 'efectivo',\r\n                    \"total\": Number(item.valor_acreditado),\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n    createJsonFacturaElectronicaTarjetaCredito = (item) => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": item.tipo_pago === 'tarjeta-credito' ? 'tarjeta_credito' : item.tipo_pago === 'tarjeta-debito' ? 'tarjeta_debito' : 'cheque',\r\n                    \"total\": Number(item.total),\r\n                    \"propiedades\": {\r\n                        \"numero\": `${item.propiedades_numero}`,\r\n                        \"banco\": `${item.propiedades_banco}`\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n\r\n    createJsonFacturaElectronicaTransferencia = () => {\r\n        const {\r\n            sumaSubTotal,\r\n            precioProductosSinIva,\r\n            precioProductosConIva,\r\n            sumaIva,\r\n            sumaTotal,\r\n            descuento,\r\n            clienteSeleccionado,\r\n            listaProductosSeleccionadosEditados,\r\n            listaProductosSeleccionados,\r\n            precioSeleccionado,\r\n            punto_emision,\r\n            codigoEstablecimiento,\r\n            numero_factura\r\n        } = this.state\r\n\r\n        var date = new Date()\r\n        var json = {\r\n            \"ambiente\": this.state.ambienteFacturacion,\r\n            \"tipo_emision\": 1,\r\n            \"secuencial\": Number(numero_factura),\r\n            \"fecha_emision\": date.toISOString(),\r\n            \"emisor\": {\r\n                \"ruc\": \"\",\r\n                \"obligado_contabilidad\": false,\r\n                \"contribuyente_especial\": \"\",\r\n                \"nombre_comercial\": \"\",\r\n                \"razon_social\": \"\",\r\n                \"direccion\": \"\",\r\n                \"establecimiento\": {\r\n                    \"punto_emision\": String(punto_emision),\r\n                    \"codigo\": String(codigoEstablecimiento),\r\n                    \"direccion\": \"\"\r\n                }\r\n            },\r\n            \"moneda\": \"USD\",\r\n            \"totales\": {\r\n                \"total_sin_impuestos\": Number(sumaSubTotal),\r\n                \"impuestos\": [\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosSinIva),\r\n                        \"valor\": 0.0,\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"0\"\r\n                    },\r\n                    {\r\n                        \"base_imponible\": Number(precioProductosConIva),\r\n                        \"valor\": Number(sumaIva),\r\n                        \"codigo\": \"2\",\r\n                        \"codigo_porcentaje\": \"2\"\r\n                    }\r\n                ],\r\n                \"importe_total\": Number(sumaTotal),\r\n                \"propina\": 0.0,\r\n                \"descuento\": Number(Number(descuento).toFixed(2))\r\n            },\r\n            \"comprador\": {\r\n                \"email\": clienteSeleccionado.email,\r\n                \"identificacion\": clienteSeleccionado.numero_identificacion,\r\n                \"tipo_identificacion\": clienteSeleccionado.tipo_identificacion,\r\n                \"razon_social\": clienteSeleccionado.nombre,\r\n                \"direccion\": clienteSeleccionado.direccion,\r\n                \"telefono\": clienteSeleccionado.celular\r\n            },\r\n            \"items\": listaProductosSeleccionadosEditados.map(item => {\r\n                return {\r\n                    cantidad: Number(item.cantidad),\r\n                    codigo_principal: item.codigo_barras.length > 0 ? item.codigo_barras : '0',\r\n                    codigo_auxiliar: item.codigo,\r\n                    precio_unitario: Number(((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)).toFixed(2)),\r\n                    descripcion: Boolean(item.tiene_iva) ? '* ' + item.descripcion_producto : item.descripcion_producto,\r\n                    precio_total_sin_impuestos: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                    impuestos: [\r\n                        {\r\n                            base_imponible: Number((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.cantidad)).toFixed(2)),\r\n                            valor: Boolean(item.tiene_iva) ? Number(((((Number(item.precio_costo) * Number(Number(this.obtenerPorcentajePrecio(listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto)))) + Number(item.precio_costo)) * Number(item.porcentaje_iva)) / 100).toFixed(2)) : 0,\r\n                            tarifa: Boolean(item.tiene_iva) ? Number(item.porcentaje_iva) : 0,\r\n                            codigo: '2',\r\n                            codigo_porcentaje: Boolean(item.tiene_iva) ? '2' : '0'\r\n                        }\r\n                    ],\r\n                    descuento: 0.0\r\n                }\r\n            })\r\n            ,\r\n            \"valor_retenido_iva\": 0.00,\r\n            \"valor_retenido_renta\": 0.00,\r\n            \"pagos\": [\r\n                {\r\n                    \"medio\": \"transferencia\",\r\n                    \"total\": Number(sumaTotal)\r\n                }\r\n            ]\r\n        }\r\n\r\n        return json\r\n    }\r\n    ///////////////////////////\r\n    onChangueSelecteccionarProducto = item => {\r\n        var array = this.state.listaProductosSeleccionados\r\n        var arrayValoresSelecionados = this.state.listaProductosSeleccionadosEditados\r\n        var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n        if (this.state.cargaAutomatica === false) {\r\n            this.setState({ itemProductoCargado: item })\r\n        } else {\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vac鱈o', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    if (Boolean(!this.state.seleccionarProductoPordefecto)) {\r\n                        if (this.state.precioSeleccionadoCargar != null) {\r\n                            item.precio_por_defecto = this.state.precioSeleccionadoCargar\r\n                        }\r\n                    }\r\n\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        precio_costo: item.precio_costo,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                        precio_venta: Number(((Number(item.precio_costo) * Number(this.obtenerPorcentajePrecio(item.precio_por_defecto))) + Number(item.precio_costo)).toFixed(2)),\r\n                    })\r\n                    this.setState({\r\n                        itemProductoCargado: null\r\n                    })\r\n                }\r\n                this.calcularValoresTotales()\r\n            } else {\r\n                setSnackBars.openSnack('info', 'rootSnackBar', 'Producto ya ingresado!', 2000)\r\n            }\r\n        }\r\n        this.setState({\r\n            listaProductosSeleccionados: array,\r\n            listaProductosSeleccionadosEditados: arrayValoresSelecionados,\r\n        })\r\n    }\r\n\r\n    agregarItemSeleccionadoVista = (item) => {\r\n        if (this.state.itemProductoCargado != null) {\r\n            var array = this.state.listaProductosSeleccionados\r\n            var arrayValoresSelecionados = this.state.listaProductosSeleccionadosEditados\r\n            var array2 = array.filter(item2 => item2.codigo === item.codigo)\r\n            if (array2.length === 0) {\r\n                if (Number(item.stock_actual) === 0) {\r\n                    setSnackBars.openSnack('error', 'rootSnackBar', 'Producto vac鱈o', 2000)\r\n                } else {\r\n                    array.push(item)\r\n                    arrayValoresSelecionados.push({\r\n                        codigo: item.codigo,\r\n                        cantidad: '1',\r\n                        precio_venta_a: item.precio_venta_a,\r\n                        precio_costo: item.precio_costo,\r\n                        tiene_iva: item.tiene_iva,\r\n                        porcentaje_iva: item.porcentaje_iva,\r\n                        stock_actual: item.stock_actual,\r\n                        codigo_barras: item.codigo_barras,\r\n                        descripcion_producto: item.descripcion_producto,\r\n                        precio_venta: Number(((Number(item.precio_costo) * Number(this.obtenerPorcentajePrecio(item.precio_por_defecto))) + Number(item.precio_costo)).toFixed(2)),\r\n                    })\r\n                    this.setState({\r\n                        listaProductosSeleccionados: array,\r\n                        listaProductosSeleccionadosEditados: arrayValoresSelecionados,\r\n                    })\r\n\r\n                    this.setState({\r\n                        itemProductoCargado: null\r\n                    })\r\n                }\r\n            } else {\r\n                setSnackBars.openSnack('info', 'rootSnackBar', 'Producto ya ingresado!', 2000)\r\n            }\r\n            this.calcularValoresTotales()\r\n        }\r\n    }\r\n\r\n    obtenerPorcentajePrecio = (precio_por_defecto) => {\r\n        var porcentaje = 0\r\n        this.state.precios.filter(it => {\r\n            if (it.codigo === precio_por_defecto) {\r\n                porcentaje = it.porcentaje\r\n            }\r\n        })\r\n        return porcentaje\r\n    }\r\n\r\n    calcularValoresTotales = () => {\r\n        var sumatotalConIVA = 0\r\n        var sumatotal = 0\r\n        var sumatotalProductosSinIva = 0\r\n        var sumatotalProductosConIva = 0\r\n        this.state.listaProductosSeleccionadosEditados.forEach(item => {\r\n            var stock = this.state.listaProductosSeleccionadosEditados.filter(it => it.codigo === item.codigo)[0].cantidad\r\n            var precioCosto = this.state.listaProductosSeleccionadosEditados.filter(it => it.codigo === item.codigo)[0].precio_costo\r\n            var reultado = (precioCosto * Number(this.obtenerPorcentajePrecio(this.state.listaProductosSeleccionados.filter(it => it.codigo === item.codigo)[0].precio_por_defecto))) + Number(precioCosto)\r\n            var precio = reultado\r\n\r\n            var precioIva = 0\r\n            if (item.tiene_iva === true) {\r\n                precioIva = (precio * Number(item.porcentaje_iva)) / 100\r\n                sumatotalProductosConIva += Number(precio) * Number(item.cantidad)\r\n            } else {\r\n                precioIva = 0\r\n                sumatotalProductosSinIva += Number(precio) * Number(item.cantidad)\r\n            }\r\n\r\n            sumatotalConIVA = sumatotalConIVA + (Number(stock) * Number(precioIva))\r\n            sumatotal = sumatotal + (Number(stock) * Number(precio))\r\n        })\r\n        this.setState({ sumaTotal: (sumatotal + sumatotalConIVA).toFixed(2) })\r\n        this.setState({ sumaIva: sumatotalConIVA.toFixed(2) })\r\n        this.setState({ sumaSubTotal: sumatotal.toFixed(2) })\r\n        this.setState({ precioProductosSinIva: sumatotalProductosSinIva.toFixed(2) })\r\n        this.setState({ precioProductosConIva: sumatotalProductosConIva.toFixed(2) })\r\n\r\n        // this.setState({ productosSeleccionados: this.state.listaProductosSeleccionadosEditados })\r\n        this.handleDineroResibido(this.state.dinero_resibido)\r\n        this.handleDescontar(this.state.descuento)\r\n    }\r\n\r\n\r\n\r\n    seleccionarCliente = (item) => {\r\n        this.setState({ clienteFacturacion: item.codigo })\r\n        this.getClienteDataBase(item.codigo)\r\n    }\r\n\r\n    getClienteDataBase = (codigo) => {\r\n        if (codigo) {\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    if (this.state.clienteFacturacion.length > 0) {\r\n                        var db = firebase.database();\r\n                        var productosRef = db.ref('users/' + user.uid + \"/clientes/\" + codigo);\r\n                        productosRef.on('value', (snapshot) => {\r\n                            if (snapshot.val()) {\r\n                                this.setState({\r\n                                    clienteSeleccionado: snapshot.val()\r\n                                })\r\n                            } else {\r\n                                this.setState({\r\n                                    clienteSeleccionado: null\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDescontar = descuento => {\r\n        this.setState({\r\n            descuento: descuento\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaSubTotal, sumaIva, dinero_resibido } = this.state\r\n            var sumaDescuento = ((Number(sumaSubTotal) + Number(sumaIva)) - Number(descuento)).toFixed(2)\r\n            this.setState({\r\n                sumaTotal: sumaDescuento\r\n            })\r\n            this.handleDineroResibido(dinero_resibido)\r\n        }, 100)\r\n    }\r\n\r\n    handleDineroResibido = dinero_resibido => {\r\n        this.setState({\r\n            dinero_resibido: dinero_resibido\r\n        })\r\n        setTimeout(() => {\r\n            const { sumaTotal } = this.state\r\n            var sumaCambio = Number(dinero_resibido) > 0 ? (Number(dinero_resibido) - Number(sumaTotal)).toFixed(2) : 0\r\n            this.setState({\r\n                cambio: sumaCambio\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    handleObservacion = observacion => {\r\n        this.setState({\r\n            observacion\r\n        })\r\n    }\r\n    handleFacturaElectronica = () => {\r\n        this.setState({\r\n            facturaElectronica: !this.state.facturaElectronica\r\n        })\r\n    }\r\n\r\n    abrirModalFinalizarVenta = () => {\r\n        switch (this.state.tipo_pago) {\r\n            case 'efectivo': {\r\n                if (this.comprobarCamposLlenosEfectivo()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'credito': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'tarjeta-credito': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'tarjeta-debito': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'cheque': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            case 'transferencia': {\r\n                if (this.comprobarCamposLlenosCredito()) {\r\n                    this.setState({ estadoModalFinalizaPago: true })\r\n                }\r\n                break\r\n            }\r\n            default: {\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const styles = {\r\n            styleText: {\r\n                width: '100%'\r\n            }\r\n        }\r\n\r\n        return <>\r\n            <div style={{\r\n                zIndex: 30,\r\n                background: 'white',\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100vw',\r\n                height: '100vh'\r\n            }}>\r\n\r\n                <Grid container\r\n                    variant=\"permanent\"\r\n                    style={{\r\n                        minHeight: '100vh'\r\n                    }}\r\n                >\r\n\r\n                    <Grid item xs={9} style={{ background: 'rgba(222, 239, 255)' }}>\r\n                        <Grid container>\r\n                            <Grid item xs={4}>\r\n                                <div style={{\r\n                                    display: 'flex',\r\n                                    paddingLeft: 16,\r\n                                    paddingRight: 16,\r\n                                    flexDirection: 'column',\r\n                                }}>\r\n                                    <TextField\r\n                                        id=\"filled-tipo-venta\"\r\n                                        select\r\n                                        label=\"Tipo de venta\"\r\n                                        error={this.state.tipo_venta.length > 0 ? false : true}\r\n                                        value={this.state.tipo_venta}\r\n                                        onChange={event => this.setState({\r\n                                            tipo_venta: event.target.value\r\n                                        })}\r\n                                        margin=\"normal\"\r\n                                        variant=\"outlined\"\r\n                                        style={styles.styleText}\r\n                                    >\r\n                                        <MenuItem value={'factura'}>Factura</MenuItem>\r\n                                        <MenuItem value={'final'}>Consumidor Final</MenuItem>\r\n                                    </TextField>\r\n\r\n                                    <AutoCompleteSelectedProducto\r\n                                        styleText={styles.styleText}\r\n                                        onChangue={this.onChangueSelecteccionarProducto}\r\n                                    >\r\n                                    </AutoCompleteSelectedProducto>\r\n                                </div>\r\n\r\n                                <ModalContainerNormal\r\n                                    open={this.state.estadoModalGuardarVenta}\r\n                                    handleClose={() => this.setState({ estadoModalGuardarVenta: true })}\r\n                                >\r\n                                    <div style={{\r\n                                        width: 100,\r\n                                        height: 100,\r\n                                        display: 'flex',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'center'\r\n                                    }}>\r\n                                        <CircularProgress />\r\n                                    </div>\r\n                                </ModalContainerNormal>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n\r\n                                <ContenedorProductoVista\r\n                                    itemProductoCargado={this.state.itemProductoCargado}\r\n                                    cargaAutomatica={this.state.cargaAutomatica}\r\n                                    cargaAutomaticaCambiar={() => this.setState({ cargaAutomatica: !this.state.cargaAutomatica })}\r\n                                    agregarItemSeleccionadoVista={this.agregarItemSeleccionadoVista}\r\n\r\n                                    precios={this.state.precios}\r\n                                    onChangePrecio={valor => {\r\n                                        var producto = this.state.itemProductoCargado\r\n                                        producto.precio_por_defecto = valor\r\n                                        this.setState({\r\n                                            itemProductoCargado: producto\r\n                                        })\r\n                                    }}\r\n                                    \r\n                                    seleccionarProductoPordefecto={this.state.seleccionarProductoPordefecto}\r\n                                    seleccionarProductoPordefectoCambiar={() => this.setState({ seleccionarProductoPordefecto: !this.state.seleccionarProductoPordefecto })}\r\n\r\n                                    precioSeleccionadoCargar={this.state.precioSeleccionadoCargar}\r\n                                    precioSeleccionadoCargarCambiar={valor => this.setState({ precioSeleccionadoCargar: valor })}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container >\r\n                            <Grid item xs={12} >\r\n                                <TablaNormal\r\n                                    textoTitleP=\"Productos\"\r\n                                    textoTitleS=\"Producto\"\r\n                                    selectedItems={true}\r\n                                    toolbar={false}\r\n                                    data={this.state.listaProductosSeleccionados}\r\n                                    rows={this.state.rowslistaProductos}\r\n                                    handleGetData={this.handleGetData}\r\n                                    estadoTabla={this.state.listaProductosSeleccionados.length > 0 ? 'llena' : 'vacio'}\r\n                                    itemsSeleccionados={items => console.log()}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{ overflowY: 'auto', height: '100vh' }}>\r\n                        <ContenedorNumeroFactura\r\n                            numero_factura={this.state.numero_factura}\r\n                            punto_emision={this.state.punto_emision}\r\n                            codigoEstablecimiento={this.state.codigoEstablecimiento}\r\n                        />\r\n                        {\r\n                            this.state.tipo_venta === 'factura' &&\r\n                            <ContenedorClienteVista\r\n                                clienteSeleccionado={this.state.clienteSeleccionado}\r\n                                errorCliente={this.state.clienteFacturacion.length > 0 ? false : true}\r\n                                usuario={this.props.usuario}\r\n                                seleccionarCliente={this.seleccionarCliente}\r\n                            />\r\n                        }\r\n\r\n                        <ContenedorPreciosTotalesVista\r\n                            descuento={this.state.descuento}\r\n                            sumaSubTotal={this.state.sumaSubTotal}\r\n                            sumaIva={this.state.sumaIva}\r\n                            sumaTotal={this.state.sumaTotal}\r\n                            observacion={this.state.observacion}\r\n                            dinero_resibido={this.state.dinero_resibido}\r\n                            cambio={this.state.cambio}\r\n                            tipo_venta={this.state.tipo_venta}\r\n                            facturaElectronica={this.state.facturaElectronica}\r\n\r\n                            handleDescontar={this.handleDescontar}\r\n                            handleDineroResibido={this.handleDineroResibido}\r\n                            handleObservacion={this.handleObservacion}\r\n                            handleFacturaElectronica={this.handleFacturaElectronica}\r\n\r\n                            tipo_pago={this.state.tipo_pago}\r\n                        />\r\n                        <div style={{ marginLeft: 16, marginRight: 16 }}>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {/* <ContenedorSeleccionarTipoPrecio\r\n                                    precioSeleccionado={this.state.precioSeleccionado}\r\n                                    precios={this.state.precios}\r\n                                    handleChangeSeleccion={codigo => {\r\n                                        var precio = this.state.precios.filter(p => p.codigo === codigo)[0]\r\n                                        this.setState({\r\n                                            precioSeleccionado: precio\r\n                                        })\r\n                                        setTimeout(() => {\r\n                                            this.calcularValoresTotales()\r\n                                        }, 100)\r\n                                        setSnackBars.openSnack('info', 'rootSnackBar', 'Precio cambiado', 500)\r\n                                    }}\r\n                                />\r\n                                <Tooltip title=\"Configurar precios\">\r\n                                    <IconButton onClick={() => {\r\n                                        this.setState({\r\n                                            estadoModalSimpleConfigurarPrecios: true\r\n                                        })\r\n                                    }}>\r\n                                        <SettingsIcon color='default' />\r\n                                    </IconButton>\r\n                                </Tooltip> */}\r\n                            </div>\r\n                            <ContenedorSeleccionarTipoPago\r\n                                tipo_pago={this.state.tipo_pago}\r\n                                tipo_venta={this.state.tipo_venta}\r\n                                handleChangeSeleccionTipoPago={value => {\r\n                                    this.setState({\r\n                                        tipo_pago: value\r\n                                    })\r\n                                    setSnackBars.openSnack('info', 'rootSnackBar', 'Tipo de pago cambiado', 500)\r\n                                }}\r\n                            />\r\n                            <ContenedorBotonesVenta\r\n                                handleFinalizarVenta={this.abrirModalFinalizarVenta}\r\n                                handleClose={() =>\r\n                                    this.props.handleClose()\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalFinalizaPago}\r\n                    handleClose={() => this.setState({ estadoModalFinalizaPago: true })}\r\n                >\r\n                    <ModalFinalizaPago\r\n                        handleClose={() => this.setState({ estadoModalFinalizaPago: false })}\r\n                        tipo_pago={this.state.tipo_pago}\r\n                        total={this.state.sumaTotal}\r\n                        handleAceptar={item => {\r\n                            this.handleFinalizarVenta(item)\r\n                        }}\r\n                    />\r\n\r\n                </ModalContainerNormal>\r\n\r\n                <ModalContainerNormal\r\n                    open={this.state.estadoModalSimpleConfigurarPrecios}\r\n                    handleClose={() => this.setState({ estadoModalSimpleConfigurarPrecios: false })}\r\n                >\r\n                    <ModalSettingsPrices\r\n                        handleClose={() => this.setState({ estadoModalSimpleConfigurarPrecios: false })}\r\n                    >\r\n\r\n                    </ModalSettingsPrices>\r\n                </ModalContainerNormal>\r\n\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default ModalNewVenta"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlEA;AACA;AA2KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AArDA;AAuDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAHA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAYA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AAyBA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AAyBA;AACA;AAAA;AACA;AACA;AAmJA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAvEA;AA8EA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAFA;AA3EA;AAkFA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAvEA;AAkFA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAaA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAhBA;AAkBA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAvEA;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAWA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAWA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAvCA;AAyCA;AACA;;;;;;AAvkDA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AACA;;;AA2lBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAuvBA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAj3DA;AACA;AAm3DA;;;;A","sourceRoot":""}